<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Express에서 게임 행동력 구현 해보기</title>
      <link href="/2020/11/01/nodejs-game-active-point/"/>
      <url>/2020/11/01/nodejs-game-active-point/</url>
      
        <content type="html"><![CDATA[<p>예로 애니팡 같은 게임의 하트 등 행동력 채우기 로직 구현 정리</p><h2 id="서버"><a href="#서버" class="headerlink" title="서버"></a>서버</h2><ol><li><p>클라에서 소모를 요청 시 그 당시의 시간(클라에서 소모한 시간, 단위는 ms)을 기록해 둔다.</p></li><li><p>일정 시간이 지나면 요청이나 리스트 통신이 올 시 (현재 시간 - 이전에 기록한 시간) / 충전 쿨타임 으로 충전해줘야 하는 개수를 구한다.</p></li><li><p>충전할 개수가 있으면 충전 해주고 시간은 서버에서 충전해준 시간으로 갱신을 한다 충전되지 않을 시에는 패스.</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&quot;mysql2&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">&quot;cors&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(cors());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  host: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">  user: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">  database: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> USER_ID = <span class="string">&quot;1q2w3e&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> GET_USER_QUERY = <span class="string">&quot;SELECT * FROM UserActivePoint WHERE user_id = ?&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> UPDATE_USER_QUERY =</span><br><span class="line">  <span class="string">&quot;UPDATE UserActivePoint SET last_update_ts = ?, active_point = ? WHERE user_id = ?&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> CHARGE_TIME = <span class="number">60</span> * <span class="number">1000</span>; <span class="comment">// 충전 쿨타임 단위는 ms</span></span><br><span class="line"><span class="keyword">const</span> MAX_ACTIVE_POINT = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">  connection.query(GET_USER_QUERY, [USER_ID], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="keyword">if</span> (results.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> connection.query(</span><br><span class="line">        <span class="string">&quot;INSERT INTO UserActivePoint(user_id, last_update_ts, active_point) VALUES (?, ?, ?)&quot;</span>,</span><br><span class="line">        [USER_ID, <span class="number">0</span>, <span class="number">5</span>],</span><br><span class="line">        (err) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">          <span class="keyword">return</span> res.send(</span><br><span class="line">            <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">              code: <span class="number">200</span>,</span><br><span class="line">              active_point: <span class="number">5</span>,</span><br><span class="line">              last_update_ts: <span class="number">0</span>,</span><br><span class="line">              server_ts: now,</span><br><span class="line">            &#125;)</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> activePointCalculate = activePointMiddleWare(</span><br><span class="line">      results[<span class="number">0</span>].active_point,</span><br><span class="line">      results[<span class="number">0</span>].last_update_ts</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> connection.query(</span><br><span class="line">      UPDATE_USER_QUERY,</span><br><span class="line">      [</span><br><span class="line">        activePointCalculate.last_update_ts,</span><br><span class="line">        activePointCalculate.active_point,</span><br><span class="line">        USER_ID,</span><br><span class="line">      ],</span><br><span class="line">      (err) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        <span class="keyword">const</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">        <span class="keyword">return</span> res.send(</span><br><span class="line">          <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            code: <span class="number">200</span>,</span><br><span class="line">            active_point: activePointCalculate.active_point,</span><br><span class="line">            last_update_ts: activePointCalculate.last_update_ts,</span><br><span class="line">            server_ts: now,</span><br><span class="line">          &#125;)</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/use&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  connection.query(GET_USER_QUERY, [USER_ID], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="keyword">if</span> (results[<span class="number">0</span>].active_point === <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> res.send(<span class="built_in">JSON</span>.stringify(&#123; <span class="attr">code</span>: <span class="number">400</span> &#125;));</span><br><span class="line">    <span class="keyword">const</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">const</span> activePointCalculate = activePointMiddleWare(</span><br><span class="line">      results[<span class="number">0</span>].active_point,</span><br><span class="line">      results[<span class="number">0</span>].last_update_ts &gt; <span class="number">0</span> ? results[<span class="number">0</span>].last_update_ts : now</span><br><span class="line">    );</span><br><span class="line">    connection.query(</span><br><span class="line">      UPDATE_USER_QUERY,</span><br><span class="line">      [</span><br><span class="line">        activePointCalculate.last_update_ts,</span><br><span class="line">        activePointCalculate.active_point - <span class="number">1</span>,</span><br><span class="line">        USER_ID,</span><br><span class="line">      ],</span><br><span class="line">      (err) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        <span class="keyword">return</span> res.send(</span><br><span class="line">          <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            code: <span class="number">200</span>,</span><br><span class="line">            active_point: activePointCalculate.active_point - <span class="number">1</span>,</span><br><span class="line">            last_update_ts: activePointCalculate.last_update_ts,</span><br><span class="line">            server_ts: now,</span><br><span class="line">          &#125;)</span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 서버에서 충전한 시간 또는 클라에서 사용한 시간을 이용하여 충전해줘야 할 행동력을 계산</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>active_point 보유한 행동력</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>last_update_ts 사용했었던 시간 또는 충전해줬었던 시간 (=단위는 ms)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">activePointMiddleWare</span>(<span class="params">active_point, last_update_ts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">  <span class="keyword">const</span> results = &#123;</span><br><span class="line">    active_point,</span><br><span class="line">    last_update_ts,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> chargeActionCount = <span class="built_in">Math</span>.floor(</span><br><span class="line">    (now - results.last_update_ts) / CHARGE_TIME</span><br><span class="line">  ); <span class="comment">// 충전 해줘야 하는 행동력 개수</span></span><br><span class="line">  <span class="keyword">if</span> (chargeActionCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    results.active_point += chargeActionCount;</span><br><span class="line">    results.last_update_ts += chargeActionCount * CHARGE_TIME;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (chargeActionCount &gt; <span class="number">0</span> &amp;&amp; results.active_point &gt;= MAX_ACTIVE_POINT) &#123;</span><br><span class="line">    <span class="comment">// 충전했을 시 최대 개수가 넘으면</span></span><br><span class="line">    results.active_point = MAX_ACTIVE_POINT;</span><br><span class="line">    results.last_update_ts = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log(&quot;results&quot;, results);</span></span><br><span class="line">  <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;서버 동작중&quot;</span>));</span><br></pre></td></tr></table></figure><h2 id="클라이언트"><a href="#클라이언트" class="headerlink" title="클라이언트"></a>클라이언트</h2><p>이전에 구현을 했을 때 게임 클라이언트 프로그래머가 어떻게 구현했는지는 잘 모르겠으나</p><p>나는 유니티는 모르니.. 일단 생각 해본대로 HTML에서 구현을 해 보았다 😨</p><ol><li><p>서버에 현재 유저가 보유한 행동력, 클라에서 소모한 시간 또는 서버에서 충전한 시간을 받는다.</p></li><li><p>화면에 그리고 받은 시간을 기반으로 분, 초로 변환한 다음에 loop를 통해 시간을 계속 -</p></li><li><p>한 개의 충전 시간이 지나면 화면에서만 행동력을 + 해준다.</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>행동력 구현 페이지<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/milligram/1.3.0/milligram.min.css&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>유저 ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>행동력 개수<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>남은 충전 시간<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;userId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;actionCount&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">id</span>=<span class="string">&quot;lastUpdateTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button button-outline&quot;</span> <span class="attr">id</span>=<span class="string">&quot;use&quot;</span>&gt;</span>소모<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> min = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> sec = <span class="number">60</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> maxActionCount = <span class="number">5</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> charge_time = <span class="number">60</span> * <span class="number">1000</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> userId = <span class="string">&quot;1q2w3e&quot;</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> intervalVar;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 진입 시 서버에서 현재 보유한 행동력과 서버에서 충전한 시간(또는 클라에서 소모한 시간)을 가지고 옴.</span></span></span><br><span class="line"><span class="javascript">          url: <span class="string">&quot;http://localhost:3000&quot;</span>,</span></span><br><span class="line"><span class="javascript">          type: <span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="javascript">          success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">            data = <span class="built_in">JSON</span>.parse(data);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#userId&quot;</span>).html(userId);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#actionCount&quot;</span>).html(data.active_point);</span></span><br><span class="line">            if (data.last_update_ts === 0) &#123;</span><br><span class="line"><span class="javascript">              <span class="comment">// 0인 경우 풀 행동력이라 X</span></span></span><br><span class="line"><span class="javascript">              $(<span class="string">&quot;#lastUpdateTime&quot;</span>).html(<span class="string">&quot;0:00&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">              init(data.server_ts, data.last_update_ts, <span class="function"><span class="keyword">function</span> (<span class="params">isRun</span>) </span>&#123;</span></span><br><span class="line">                if (isRun) actionCoolTimeLoop();</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line"><span class="javascript">          error: <span class="function"><span class="keyword">function</span> (<span class="params">request, status, error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(</span></span><br><span class="line"><span class="javascript">              <span class="string">&quot;code:&quot;</span> +</span></span><br><span class="line">                request.status +</span><br><span class="line"><span class="javascript">                <span class="string">&quot;\n&quot;</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;message:&quot;</span> +</span></span><br><span class="line">                request.responseText +</span><br><span class="line"><span class="javascript">                <span class="string">&quot;\n&quot;</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">&quot;error:&quot;</span> +</span></span><br><span class="line">                error</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#use&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">          e.preventDefault();</span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="built_in">parseInt</span>($(<span class="string">&quot;#actionCount&quot;</span>).html()) &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;행동력을 모두 소진하였습니다!&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">              url: <span class="string">&quot;http://localhost:3000/use&quot;</span>,</span></span><br><span class="line"><span class="javascript">              type: <span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="javascript">              success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;data&quot;</span>, data);</span></span><br><span class="line"><span class="javascript">                data = <span class="built_in">JSON</span>.parse(data);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#actionCount&quot;</span>).html(data.active_point);</span></span><br><span class="line">                stopInterval();</span><br><span class="line">                actionCoolTimeLoop();</span><br><span class="line">              &#125;,</span><br><span class="line"><span class="javascript">              error: <span class="function"><span class="keyword">function</span> (<span class="params">request, status, error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(</span></span><br><span class="line"><span class="javascript">                  <span class="string">&quot;code:&quot;</span> +</span></span><br><span class="line">                    request.status +</span><br><span class="line"><span class="javascript">                    <span class="string">&quot;\n&quot;</span> +</span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;message:&quot;</span> +</span></span><br><span class="line">                    request.responseText +</span><br><span class="line"><span class="javascript">                    <span class="string">&quot;\n&quot;</span> +</span></span><br><span class="line"><span class="javascript">                    <span class="string">&quot;error:&quot;</span> +</span></span><br><span class="line">                    error</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      /**</span><br><span class="line">       * 실행 초기 함수</span><br><span class="line"><span class="javascript">       * @param &#123;<span class="built_in">Number</span>&#125; serverTime 서버에서 주는 현재 시간</span></span><br><span class="line"><span class="javascript">       * @param &#123;<span class="built_in">Number</span>&#125; lastUpdateTime 서버에서 충전한 시간 또는 클라에서 소모했었던 시간(단위는 ms)</span></span><br><span class="line">       */</span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">serverTime, lastUpdateTime, callback</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> remainMs = lastUpdateTime + charge_time - serverTime; <span class="comment">// 남은 시간</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (remainMs &lt; <span class="number">0</span>) <span class="keyword">return</span> callback(<span class="literal">false</span>);</span></span><br><span class="line">        if (remainMs &gt; 0) &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// ms to min, sec 계산법은 스택오브플로우에서 참고함</span></span></span><br><span class="line"><span class="javascript">          min = <span class="built_in">Math</span>.floor(remainMs / <span class="number">60000</span>);</span></span><br><span class="line">          sec = ((remainMs % 60000) / 1000).toFixed(0);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> result;</span></span><br><span class="line">        if (sec === 60) &#123;</span><br><span class="line"><span class="javascript">          result = min + <span class="string">&quot;:&quot;</span> + <span class="string">&quot;00&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          result = min + <span class="string">&quot;:&quot;</span> + (sec &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> : <span class="string">&quot;&quot;</span>) + sec;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#lastUpdateTime&quot;</span>).html(result);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> callback(<span class="literal">true</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">actionCoolTimeLoop</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        intervalVar = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">          loop();</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        sec--;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> result;</span></span><br><span class="line">        if (sec === 0 &amp;&amp; min &gt; 0) &#123;</span><br><span class="line">          min = min - 1;</span><br><span class="line">          sec = 60;</span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span></span><br><span class="line">          sec === 0 &amp;&amp;</span><br><span class="line">          min === 0 &amp;&amp;</span><br><span class="line"><span class="javascript">          maxActionCount !== <span class="built_in">parseInt</span>($(<span class="string">&quot;#actionCount&quot;</span>).html())</span></span><br><span class="line">        ) &#123;</span><br><span class="line"><span class="javascript">          $(<span class="string">&quot;#actionCount&quot;</span>).html(<span class="built_in">parseInt</span>($(<span class="string">&quot;#actionCount&quot;</span>).html()) + <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (maxActionCount === <span class="built_in">parseInt</span>($(<span class="string">&quot;#actionCount&quot;</span>).html())) &#123;</span></span><br><span class="line">            sec = 0;</span><br><span class="line">            min = 0;</span><br><span class="line">            stopInterval();</span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">            sec = 60;</span><br><span class="line">            min = 0;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (sec === 60 &amp;&amp; min === 0) &#123;</span><br><span class="line"><span class="javascript">          result = <span class="number">1</span> + <span class="string">&quot;:&quot;</span> + <span class="string">&quot;00&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sec === <span class="number">60</span> &amp;&amp; min === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">          result = <span class="number">1</span> + <span class="string">&quot;:&quot;</span> + <span class="string">&quot;00&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sec === <span class="number">60</span> &amp;&amp; min &gt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">          result = min + <span class="number">1</span> + <span class="string">&quot;:&quot;</span> + <span class="string">&quot;00&quot;</span>;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          result = min + <span class="string">&quot;:&quot;</span> + (sec &lt; <span class="number">10</span> ? <span class="string">&quot;0&quot;</span> : <span class="string">&quot;&quot;</span>) + sec;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        $(<span class="string">&quot;#lastUpdateTime&quot;</span>).html(result);</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">stopInterval</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">clearInterval</span>(intervalVar);</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>일단 충전 쿨타임을 1분으로 주고 몇 번 돌려봤을 때 시간이 뭔가 어긋나거나 그러진 않았다.</p><p>서버쪽은 이전에 몇 번 해봤었던 작업인데 막상 다시 짜볼라니 생각이 좀 많이 안 들었고..</p><p>클라이언트쪽은 쿨타임 남은 시간이 뭔가 계속 안 맞아서 삽질을 좀 한 거 같다.</p><p>역시 뭔가를 했을 때 기록을 해둬야 하는걸 또 한 번 느끼는 하루였다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js luxon 모듈 사용 해보기</title>
      <link href="/2020/10/05/nodejs-luxon/"/>
      <url>/2020/10/05/nodejs-luxon/</url>
      
        <content type="html"><![CDATA[<p>이전에 페이스북 그룹에서 Moment 프로젝트가 더 이상 유지 보수를 하지 않는다는 글을 봤었다.</p><p>실제 프로젝트 상태에 적혀 있었고 신규 프로젝트에서 대체할 모듈을 제시를 하는데 나는 그 중에</p><p>맨 처음에 적혀있는 luxon을 사용해보기로 했다.</p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i luxon -S</span><br></pre></td></tr></table></figure><h2 id="mt와-비교"><a href="#mt와-비교" class="headerlink" title="mt와 비교"></a>mt와 비교</h2><p>가장 큰 차이점은 Moment의 경우 처음 객체를 생성 하고 이후에 추가적인 연산 등의 행위를</p><p>하였을 때 원본 객체도 바뀌기 때문에 별도로 clone을 해서 사용을 해야 되는데 인지를 못 해서</p><p>실수를 했던 경험이 있는데 luxon의 경우 생성 객체가 불변이기 때문에 별도 작업이 필요가 없다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; DateTime &#125; = <span class="built_in">require</span>(<span class="string">&quot;luxon&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MomentTimezone = <span class="built_in">require</span>(<span class="string">&quot;moment-timezone&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date = &#123;</span><br><span class="line">  mt: MomentTimezone().tz(<span class="string">&quot;America/New_York&quot;</span>),</span><br><span class="line">  luxon: DateTime.fromObject(&#123; <span class="attr">zone</span>: <span class="string">&quot;America/New_York&quot;</span> &#125;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mt1 = date.mt.format(<span class="string">&quot;YYYY-MM-DD&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mt2 = date.mt.add(<span class="number">1</span>, <span class="string">&quot;days&quot;</span>).format(<span class="string">&quot;YYYY-MM-DD&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="string">`mt: <span class="subst">$&#123;mt1&#125;</span>`</span>,</span><br><span class="line">  <span class="string">`mt2: <span class="subst">$&#123;mt2&#125;</span>`</span>,</span><br><span class="line">  <span class="string">`원본: <span class="subst">$&#123;date.mt.format(<span class="string">&quot;YYYY-MM-DD&quot;</span>)&#125;</span>`</span></span><br><span class="line">); <span class="comment">// mt: 2020-10-05 mt2: 2020-10-06 원본: 2020-10-06</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luxon1 = date.luxon.toFormat(<span class="string">&quot;yyyy-LL-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luxon2 = date.luxon.plus(&#123; <span class="attr">days</span>: <span class="number">1</span> &#125;).toFormat(<span class="string">&quot;yyyy-LL-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="string">`luxon1: <span class="subst">$&#123;luxon1&#125;</span>`</span>,</span><br><span class="line">  <span class="string">`luxon2: <span class="subst">$&#123;luxon2&#125;</span>`</span>,</span><br><span class="line">  <span class="string">`원본: <span class="subst">$&#123;date.luxon.toFormat(<span class="string">&quot;yyyy-LL-dd&quot;</span>)&#125;</span>`</span></span><br><span class="line">); <span class="comment">// luxon1: 2020-10-05 luxon2: 2020-10-06 원본: 2020-10-05</span></span><br></pre></td></tr></table></figure><h2 id="기존에-써-봤던-mt-대체-실습"><a href="#기존에-써-봤던-mt-대체-실습" class="headerlink" title="기존에 써 봤던 mt 대체 실습"></a>기존에 써 봤던 mt 대체 실습</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; DateTime &#125; = <span class="built_in">require</span>(<span class="string">&quot;luxon&quot;</span>); <span class="comment">// luxon load</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MomentTimezone = <span class="built_in">require</span>(<span class="string">&quot;moment-timezone&quot;</span>); <span class="comment">// moment-timezone load</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date = &#123;</span><br><span class="line">  mt: MomentTimezone().tz(<span class="string">&quot;America/New_York&quot;</span>),</span><br><span class="line">  luxon: DateTime.fromObject(&#123; <span class="attr">zone</span>: <span class="string">&quot;America/New_York&quot;</span> &#125;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`mt를 통한 뉴욕 시간: <span class="subst">$&#123;date.mt.format(<span class="string">&quot;YYYY-MM-DD HH:mm&quot;</span>)&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// mt를 통한 뉴욕 시간: 2020-10-05 10:10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  <span class="string">`luxon을 통한 뉴욕 시간: <span class="subst">$&#123;date.luxon.toFormat(<span class="string">&quot;yyyy-LL-dd HH:mm&quot;</span>)&#125;</span>`</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// luxon을 통한 뉴욕 시간: 2020-10-05 10:10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`mt로 보는 주차(년 기준): <span class="subst">$&#123;date.mt.week()&#125;</span>`</span>); <span class="comment">// 41</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`luxon으로 보는 주차(년 기준): <span class="subst">$&#123;date.luxon.weekNumber&#125;</span>`</span>); <span class="comment">// 41</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> weekOfMonth = &#123;</span><br><span class="line">  mt:</span><br><span class="line">    MomentTimezone().tz(<span class="string">&quot;America/New_York&quot;</span>).week() -</span><br><span class="line">    MomentTimezone().tz(<span class="string">&quot;America/New_York&quot;</span>).startOf(<span class="string">&quot;month&quot;</span>).week() +</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">  luxon: date.luxon.weekNumber - date.luxon.startOf(<span class="string">&quot;month&quot;</span>).weekNumber + <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`mt로 보는 주차(월 기준): <span class="subst">$&#123;weekOfMonth.mt&#125;</span>`</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`luxon으로 보는 주차(월 기준): <span class="subst">$&#123;weekOfMonth.luxon&#125;</span>`</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> diff = &#123;</span><br><span class="line">  mt: MomentTimezone.tz(<span class="string">&quot;Asia/Seoul&quot;</span>).diff(</span><br><span class="line">    MomentTimezone(<span class="string">&quot;2020-10-05 00:00:00&quot;</span>).tz(<span class="string">&quot;Asia/Seoul&quot;</span>)</span><br><span class="line">  ),</span><br><span class="line">  luxon: DateTime.fromObject(&#123; <span class="attr">zone</span>: <span class="string">&quot;Asia/Seoul&quot;</span> &#125;).diff(</span><br><span class="line">    DateTime.fromObject(&#123;</span><br><span class="line">      zone: <span class="string">&quot;Asia/Seoul&quot;</span>,</span><br><span class="line">      year: <span class="number">2020</span>,</span><br><span class="line">      month: <span class="number">10</span>,</span><br><span class="line">      day: <span class="number">5</span>,</span><br><span class="line">      hour: <span class="number">0</span>,</span><br><span class="line">      minute: <span class="number">0</span>,</span><br><span class="line">      second: <span class="number">0</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ).toObject(),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`mt로 보는 현재 - 지정된 날 = ts: <span class="subst">$&#123;diff.mt&#125;</span>`</span>); <span class="comment">// 87448000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`luxon으로 보는 현재 - 지정된 날 = ts: <span class="subst">$&#123;diff.luxon.milliseconds&#125;</span>`</span>); <span class="comment">// 87448004</span></span><br></pre></td></tr></table></figure><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://momentjs.com/docs/?fbclid=IwAR18PnJT5jAcBBeQZwHgaKVdyR_tba3WCzoo2oXzXrJb2vNY-xxV2iedB1c#/-project-status/">Moment 프로젝트 상태</a></li><li><a href="https://moment.github.io/luxon/docs/identifiers.html">luxon 문서</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Date </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue에서 서버 사이드 렌더링 알아보기</title>
      <link href="/2020/09/17/nodejs-vue-ssr/"/>
      <url>/2020/09/17/nodejs-vue-ssr/</url>
      
        <content type="html"><![CDATA[<h2 id="서버사이드렌더링-SSR-이란"><a href="#서버사이드렌더링-SSR-이란" class="headerlink" title="서버사이드렌더링(SSR)이란"></a>서버사이드렌더링(SSR)이란</h2><p>Vue 컴포넌트를 서버에서 HTML 문자열로 브라우저에 전송을 하는 방식</p><h2 id="사용-시-장점"><a href="#사용-시-장점" class="headerlink" title="사용 시 장점"></a>사용 시 장점</h2><ul><li>검색 엔진 크롤러가 완성된 페이지를 볼 수 있으므로 SEO 향상</li><li>클라이언트에서 화면을 그리는 작업이 줄어드므로 로딩 속도 향상</li></ul><h2 id="사용-시-주의점"><a href="#사용-시-주의점" class="headerlink" title="사용 시 주의점"></a>사용 시 주의점</h2><ul><li>서버에서 받아와야 하니까 서버가 꼭 필요 (정적 파일 -&gt; index.html 불가)</li><li>서버와의 통신이 자주 일어난다고 하니 주의</li></ul><p>예로 문서에서는 사내 대시보드 이런 거 만들 때는 SSR은 오바라고 함.</p><h2 id="사용법"><a href="#사용법" class="headerlink" title="사용법"></a>사용법</h2><p>문서에는 Express로 이용하는 방법과 <a href="https://ko.nuxtjs.org/">Nuxt.js</a>라는 프레임워크를 쓰라고 제시 한다.</p><p>Express 가이드를 보고 코드를 작성해 보았다. </p><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express vue vue-server-renderer -S</span><br></pre></td></tr></table></figure><p>렌더링 관련 모듈을 제공을 한다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Vue = <span class="built_in">require</span>(<span class="string">&quot;vue&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">&quot;vue-server-renderer&quot;</span>).createRenderer(); <span class="comment">// init</span></span><br><span class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>)();</span><br><span class="line"></span><br><span class="line">server.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123; <span class="comment">// 뷰 인스턴스 생성</span></span><br><span class="line">    data: &#123; <span class="comment">// 데이터</span></span><br><span class="line">      year: date.getFullYear(),</span><br><span class="line">      month: date.getMonth() + <span class="number">1</span>,</span><br><span class="line">      day: date.getDate(),</span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">`&lt;div&gt;오늘은 &#123;&#123; year &#125;&#125;년 &#123;&#123; month &#125;&#125;월 &#123;&#123; day &#125;&#125;일 입니다.&lt;/div&gt;`</span>,</span><br><span class="line">  &#125;); <span class="comment">// Vue 인스턴스</span></span><br><span class="line">  renderer.renderToString(app, <span class="function">(<span class="params">err, html</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> res.status(<span class="number">500</span>).end(err);</span><br><span class="line">    <span class="keyword">return</span> res.end(<span class="string">`</span></span><br><span class="line"><span class="string">      &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">      &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;head&gt;&lt;title&gt;Hello&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">        &lt;body&gt;<span class="subst">$&#123;html&#125;</span>&lt;/body&gt;</span></span><br><span class="line"><span class="string">      &lt;/html&gt;</span></span><br><span class="line"><span class="string">    `</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;express is running&quot;</span>));</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1600326954/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-09-17_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.12.07_cdprkl.png"></p><p>소스 보기로 보니 특이점은 data-server-rendered라는 항목이 생겼다 신기 하다.</p><p>보통은 Nuxt.js 프레임워크를 쓰는 거 같은데 나도 써 보면서 공부를 해봐야 겠다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://ssr.vuejs.org/#what-is-server-side-rendering-ssr">Vue SSR 가이드</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex 정리</title>
      <link href="/2020/09/14/nodejs-vue-vuex-study/"/>
      <url>/2020/09/14/nodejs-vue-vuex-study/</url>
      
        <content type="html"><![CDATA[<h2 id="Vuex란"><a href="#Vuex란" class="headerlink" title="Vuex란"></a>Vuex란</h2><p>Vuex는 전역 저장소(data)를 사용하여 상태 관리를 하는 라이브러리</p><h2 id="사용-이유"><a href="#사용-이유" class="headerlink" title="사용 이유"></a>사용 이유</h2><p>규모가 있는 app에서 같은 상태를 가진 여러 컴포넌트(부모/자식 또는 같은 레벨)끼리</p><p>데이터를 관리 를 하게 될 때 기존의 props나 $emit으로 하게 되면 코드가 복잡해져서</p><p>유지 보수 하기가 힘들어 지기 때문에 사용 한다고 한다.</p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vuex -S</span><br></pre></td></tr></table></figure><h2 id="저장소"><a href="#저장소" class="headerlink" title="저장소"></a>저장소</h2><p>시작은 src/store</p><p><strong>MyStore.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>; <span class="comment">// vuex import</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex); <span class="comment">// vuex 사용</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="comment">// 데이터</span></span><br><span class="line">  msg: <span class="string">&quot;Hello! Vuex&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="comment">// 데이터를 조작할 함수</span></span><br><span class="line">  changeMessage(state, msg) &#123;</span><br><span class="line">    state.msg = msg;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h2><p>webpack-simple 버전으로 만들어서 실습을 해 본다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack-simple vuex_study</span><br></pre></td></tr></table></figure><p><strong>Message.vue</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 데이터 표시 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    computed: &#123;</span><br><span class="line">      msg() &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.msg; <span class="comment">// this.$store.@@으로 저장소 데이터 접근</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Input.vue</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup</span>=<span class="string">&quot;changeMsg&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 키보드 누를때마다 이벤트 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      changeMsg(event) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$store.commit(<span class="string">&quot;changeMessage&quot;</span>, event.target.value); <span class="comment">// this.$store.commit(&quot;작성한 데이터 조작 함수&quot;, 값)</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>App.vue</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MessageComponent</span>&gt;</span><span class="tag">&lt;/<span class="name">MessageComponent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">InputComponent</span>&gt;</span><span class="tag">&lt;/<span class="name">InputComponent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> MessageComponent <span class="keyword">from</span> <span class="string">&quot;./components/Message&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> InputComponent <span class="keyword">from</span> <span class="string">&quot;./components/Input&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Store <span class="keyword">from</span> <span class="string">&quot;./store/MyStore&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;app&quot;</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">      MessageComponent,</span><br><span class="line">      InputComponent,</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    store: Store, <span class="comment">// store init</span></span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h3><p>여러 컴포넌트에서 똑같은 방식으로 데이터를 조작해야할 경우 copy/paste해도 되지만 유지</p><p>관리할 때 골치 아프므로 이러한 케이스를 위해 Getter를 지원을 한다.</p><p><strong>MyStore.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  lowerCase(state) &#123;</span><br><span class="line">    <span class="keyword">return</span> state.msg.toLowerCase(); <span class="comment">// 데이터를 모두 소문자로 바꿈</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  getters,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    computed: &#123;</span><br><span class="line">      msg() &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// return this.$store.state.msg;</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.$store.getters.lowerCase; <span class="comment">// getter 호출</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>또는</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&quot;vuex&quot;</span>; <span class="comment">// helper, 내가 만든 getter 들을 가져올 수 있다.</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    computed: &#123;</span><br><span class="line">      ...mapGetters(&#123;</span><br><span class="line"><span class="javascript">        msg: <span class="string">&quot;lowerCase&quot;</span>,</span></span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이러면 input에 대문자로 입력해도 자동으로 소문자로 바뀌어서 볼 수 있다.</p><p>작은 규모라도 기존에 알고 있는 props, $emit 보다 Vuex가 더 깔끔한 느낌이 든다.</p><p>다음 연습 프로젝트에서는 써봐야겠다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://vuex.vuejs.org/kr/">Vuex 문서</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue로 나만의 캘린더 만들어보기 - 3</title>
      <link href="/2020/09/11/nodejs-vue-study-4/"/>
      <url>/2020/09/11/nodejs-vue-study-4/</url>
      
        <content type="html"><![CDATA[<h2 id="내가-등록한-일정-리스트-만들기"><a href="#내가-등록한-일정-리스트-만들기" class="headerlink" title="내가 등록한 일정 리스트 만들기"></a>내가 등록한 일정 리스트 만들기</h2><p><strong>Main.vue</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">├── Calendar.vue</span><br><span class="line">│   ├── Modal.Vue</span><br><span class="line">├── TodoList.vue</span><br></pre></td></tr></table></figure><p>TodoList 컴포넌트를 생성 하였고 이 컴포넌트에서 서버에 저장된 일정을 가지고 오려고</p><p>하였으나 검색할 조건의 데이터(년,월)를 가지고 있지 않아서 검색을 할 수가 없었다.</p><p>그래서 년,월의 데이터를 Calendar -&gt; Main -&gt; TodoList의 방식으로 진행을 하였는데</p><p>Main에서는 mounted 단계에서 $emit한 데이터에 접근이 가능 했지만 TodoList에서는</p><p>props에 데이터가 들어오는 걸 뷰 개발자 도구를 통해 확인 했지만 mounted 이전에 데이터 접근</p><p>이 안 되는 걸 알았고 Main에서 서버에 데이터를 요청한 다음 TodoList에 줘야 된다고 느꼈다.</p><p>예상한대로 Main에서 $emit을 받아오는 부분에 axios로 서버 데이터를 받아 오니 뷰 반응성도</p><p>적용 되고 원하는 그림으로 데이터가 출력이 되었다.</p><h3 id="글-등록-시-TodoList에-출력"><a href="#글-등록-시-TodoList에-출력" class="headerlink" title="글 등록 시 TodoList에 출력"></a>글 등록 시 TodoList에 출력</h3><p>Modal창에서 글을 등록 시 서버에 전송을 하면서 화면에 바로 그리려면 Main 컴포넌트에</p><p>데이터를 전송 해야 하는데 Modal은 최하위 컴포넌트여서 거쳐 가기엔 불편 하므로 이러한 방법을</p><p>해결 하기 위해서 별개의 컴포넌트 to 컴포넌트로 통신이 가능한 이벤트 버스를 이용 해봤다.</p><p><strong>middleware/eventbus.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> eventBus = <span class="keyword">new</span> Vue();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> eventBus;</span><br></pre></td></tr></table></figure><p><strong>modal.vue</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> eventBus <span class="keyword">from</span> <span class="string">&quot;../../middleware/eventbus&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// ...</span></span></span><br><span class="line">    methods: &#123;</span><br><span class="line">      save() &#123;</span><br><span class="line"><span class="javascript">        <span class="comment">// ...  서버에 전송 후</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> data = &#123;</span></span><br><span class="line"><span class="javascript">          year: <span class="built_in">this</span>.year,</span></span><br><span class="line"><span class="javascript">          month: <span class="built_in">this</span>.month,</span></span><br><span class="line"><span class="javascript">          day: <span class="built_in">this</span>.clickDay,</span></span><br><span class="line"><span class="javascript">          message: <span class="built_in">this</span>.message,</span></span><br><span class="line">        &#125;;</span><br><span class="line"><span class="javascript">        eventBus.$emit(<span class="string">&quot;addList&quot;</span>, data);</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Main.vue</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// ...</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> eventBus <span class="keyword">from</span> <span class="string">&quot;../../middleware/eventbus&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// ...</span></span></span><br><span class="line">    created() &#123;</span><br><span class="line"><span class="javascript">      eventBus.$on(<span class="string">&quot;addList&quot;</span>, <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">this</span>.list.length === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.list.push([payload]);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.list[<span class="built_in">this</span>.list.length - <span class="number">1</span>].length &gt; <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.list.push([payload]);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.list[<span class="built_in">this</span>.list.length - <span class="number">1</span>].push(payload);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>이벤트버스를 통해 Modal에서 Main에 데이터를 전송하여 일정 리스트가 바뀌므로 반응성으로 인해</p><p>하위 컴포넌트 TodoList에 잘 노출이 되었다.</p><h2 id="일정-삭제"><a href="#일정-삭제" class="headerlink" title="일정 삭제"></a>일정 삭제</h2><p>마지막으로 지난 일정을 삭제할 수 있는 기능을 추가하려고 한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;columns&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(items, idx) in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;idx&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;column&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, subIdx) in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;subIdx&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;card-header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;card-header-title&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123; item.year &#125;&#125;년 &#123;&#123; item.month &#125;&#125;월 &#123;&#123; item.day &#125;&#125;일</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>&#123;&#123; item.message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;card-footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;card-footer-item button is-primary is-light&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">click</span>=<span class="string">&quot;removeItem(idx, subIdx)&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          삭제</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> eventBus <span class="keyword">from</span> <span class="string">&quot;../../middleware/eventbus&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;TodoList&quot;</span>,</span></span><br><span class="line"><span class="javascript">    props: [<span class="string">&quot;year&quot;</span>, <span class="string">&quot;month&quot;</span>, <span class="string">&quot;list&quot;</span>],</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        title: <span class="string">&quot;내가 등록한 일정 리스트&quot;</span>,</span></span><br><span class="line"><span class="javascript">        datas: <span class="literal">null</span>,</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      removeItem(idx, subIdx) &#123;</span><br><span class="line">        axios</span><br><span class="line"><span class="javascript">          .delete(<span class="string">&quot;http://localhost:3000/remove&quot;</span>, &#123;</span></span><br><span class="line">            data: &#123;</span><br><span class="line"><span class="javascript">              <span class="comment">// eslint-disable-next-line no-underscore-dangle</span></span></span><br><span class="line"><span class="javascript">              id: <span class="built_in">this</span>.list[idx][subIdx]._id,</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;)</span><br><span class="line"><span class="javascript">          .then(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            eventBus.$emit(<span class="string">&quot;removeList&quot;</span>, &#123; idx, subIdx &#125;);</span></span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>먼저 서버에 삭제를 요청한 다음 완료가 되면 이벤트 버스로 리스트를 보관하고 있는 Main에</p><p>통신을 하여 해당 위치의 값을 배열에서 삭제를 해주었더니 화면에 적용이 잘 되었다.</p><p>이로서 Vue 찍먹? 해 본 느낌인데 아직은 jQuery나 EJS에 비해 익숙하지 않다 보니.. 😓</p><p>다음 프로젝트에서 Vue-Router &amp; Vuex를 공부해서 연습 해봐야겠다!</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://webruden.tistory.com/109">vue.js Event Bus를 통해 컴포넌트간 통신하기 - 베이스캠프</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue로 나만의 캘린더 만들어보기 - 2</title>
      <link href="/2020/09/04/nodejs-vue-study-3/"/>
      <url>/2020/09/04/nodejs-vue-study-3/</url>
      
        <content type="html"><![CDATA[<h2 id="일정-등록"><a href="#일정-등록" class="headerlink" title="일정 등록"></a>일정 등록</h2><p>일정 등록은 달력의 날짜를 클릭 시 modal창이 나와서 입력을 하게끔 만들고 싶어졌다.</p><p>css 프레임워크에 modal example이 나와 있는데 class의 값만 주면 되는 상황 이였다.</p><p><strong>Model.vue</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-background&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-card&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;modal-card-head&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;modal-card-title&quot;</span>&gt;</span>날짜<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;close&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;modal-card-body&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">&quot;textarea&quot;</span> <span class="attr">:placeholder</span>=<span class="string">&quot;placeholder&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;modal-card-foot&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-success&quot;</span>&gt;</span>&#123;&#123; buttonMessage[0] &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span>&#123;&#123; buttonMessage[1] &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        placeholder: <span class="string">&quot;오늘 할 일을 적어주세요&quot;</span>,</span></span><br><span class="line"><span class="javascript">        buttonMessage: [<span class="string">&quot;저장&quot;</span>, <span class="string">&quot;취소&quot;</span>],</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>어제 작성 했었던 Calendar.vue에 Modal.vue를 import 시켜서 Modal.vue는 하위 컴포넌트가 되었으므로</p><p>상위 컴포넌트(Calendar.vue)에서 modal의 오픈 상태를 가지고 있어야 했으며, modal을 열기 위해</p><p>하위 컴포넌트(Modal.vue)에 데이터를 보낼려면 props를 이용 해야 했고, 그 반대로 하위 컴포넌트에서</p><p>modal 창을 닫으면 상위 컴포넌트에 modal이 닫혔다로 상태를 변경을 해주기 위해서 $emit을 사용 했다.</p><p><strong>Calendar.vue</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">&quot;(day, secondIdx) in date&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">&quot;secondIdx&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                &#x27;has-text-grey&#x27;: idx === 0 &amp;&amp; day &gt;= lastMonthStart,</span></span></span><br><span class="line"><span class="tag"><span class="string">                &#x27;has-text-danger&#x27;:</span></span></span><br><span class="line"><span class="tag"><span class="string">                  dates.length - 1 === idx &amp;&amp; nextMonthStart &gt; day,</span></span></span><br><span class="line"><span class="tag"><span class="string">                &#x27;has-text-primary&#x27;:</span></span></span><br><span class="line"><span class="tag"><span class="string">                  day === today &amp;&amp;</span></span></span><br><span class="line"><span class="tag"><span class="string">                  month === currentMonth &amp;&amp;</span></span></span><br><span class="line"><span class="tag"><span class="string">                  year === currentYear,</span></span></span><br><span class="line"><span class="tag"><span class="string">              &#125;&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;showModal&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    &#123;&#123; day &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">Modal</span> <span class="attr">v-bind:modalOpen</span>=<span class="string">&quot;modalOpen&quot;</span> <span class="attr">v-on:closeModal</span>=<span class="string">&quot;closeModal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Modal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Modal <span class="keyword">from</span> <span class="string">&#x27;./Modal&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    components: &#123;</span><br><span class="line">      Modal,</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      ...</span><br><span class="line"><span class="javascript">      modalOpen: <span class="literal">false</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      ...</span><br><span class="line">      showModal() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.modalOpen = <span class="literal">true</span>;</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      closeModal(event) &#123; <span class="comment">// event는 $emit의 value</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.modalOpen = event;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Modal.vue</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;is-active&#x27;: modalOpen&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-background&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;closeModal&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;Modal&quot;</span>,</span></span><br><span class="line"><span class="javascript">    props: [<span class="string">&quot;modalOpen&quot;</span>],</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        placeholder: <span class="string">&quot;오늘 할 일을 적어주세요&quot;</span>,</span></span><br><span class="line"><span class="javascript">        buttonMessage: [<span class="string">&quot;저장&quot;</span>, <span class="string">&quot;취소&quot;</span>],</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      closeModal() &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$emit(<span class="string">&quot;closeModal&quot;</span>, <span class="literal">false</span>); <span class="comment">// $emit(&#x27;이벤트명&#x27;, value)</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="글-등록"><a href="#글-등록" class="headerlink" title="글 등록"></a>글 등록</h2><p>v-model 지시자를 써서 글을 작성 해봤으나 한글은 끝 단어 바인딩이 정상적으로 되질 않아서</p><p>검색을 해 봤더니 Vue 공식문서에도 나와 있는 사양이라고 한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;modal-card-body&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;textarea&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:placeholder</span>=<span class="string">&quot;placeholder&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">input</span>=<span class="string">&quot;typing&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:value</span>=<span class="string">&quot;message&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-input(@input), v-bind(:) 지시자를 통해 가능 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    methods: &#123;</span><br><span class="line">      typing(event) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.message = event.target.value;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>작성한 글을 서버에 보내서 DB에 저장을 하려고 하면 통신을 보내야 하는데</p><p>Vue에서는 axios를 쓴다고 하길래 나는 기존에도 자주 사용하던 HTTP 클라이언트라 좋았다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">&quot;modal-card-foot&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;save&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 저장 클릭 이벤트 --&gt;</span></span><br><span class="line">      &#123;&#123; buttonMessage[0] &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;closeModal&quot;</span>&gt;</span>&#123;&#123; buttonMessage[1] &#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">     methods: &#123;</span><br><span class="line">      ...</span><br><span class="line">      save() &#123;</span><br><span class="line"><span class="javascript">        axios.post(<span class="string">&#x27;http://localhost:3000/save&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">          message: <span class="built_in">this</span>.message,</span></span><br><span class="line"><span class="javascript">          date: <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.year&#125;</span>-<span class="subst">$&#123;<span class="built_in">this</span>.month&#125;</span>-<span class="subst">$&#123;<span class="built_in">this</span>.clickDay&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">        &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;result&#x27;</span>, result.data);</span></span><br><span class="line"><span class="javascript">        &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">&#x27;e&#x27;</span>, e);</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>다음에는 저장된 일정을 볼 수 있는 리스트를 만들어야겠다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://medium.com/js-dojo/how-to-build-a-reusable-vuejs-modal-component-fc8d7f3b4735">How to build a Reusable Vuejs modal component</a></li><li><a href="https://solcode.tistory.com/31">vue.js - v-model의 한글 사용 문제를 v-on을 사용한 해결법</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue로 나만의 캘린더 만들어보기 - 1</title>
      <link href="/2020/09/03/nodejs-vue-study-2/"/>
      <url>/2020/09/03/nodejs-vue-study-2/</url>
      
        <content type="html"><![CDATA[<h2 id="Project-생성"><a href="#Project-생성" class="headerlink" title="Project 생성"></a>Project 생성</h2><p>책에서 보고 설치 했었던 CLI가 현재 버전보다 꽤 많이 낮아서 새로운 버전으로 교체를 하였다.</p><p>새 버전은 vue create로 프로젝트를 만들 수 있었는데 아직 이전 버전도 안 써봤으므로</p><p>이전 버전에서 제공하는 걸로 진행을 했다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall vue-cli -g</span><br><span class="line">npm i @vue/cli -g</span><br><span class="line">npm i @vue/cli-init <span class="comment"># 이전 2.x 템플릿을 가져오기 위함</span></span><br><span class="line">vue init webpack my_calendar_app</span><br></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>CSS 프레임워크를 쓰고 싶어서 <a href="https://bulma.io/">bulma</a>를 설치 했다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i bulma -S</span><br></pre></td></tr></table></figure><p>글로벌 CSS는 src/App.vue에 import를 하면 되었다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> <span class="string">&quot;bulma/css/bulma.css&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="prettierrc-js"><a href="#prettierrc-js" class="headerlink" title=".prettierrc.js"></a>.prettierrc.js</h2><p>자동 줄맞춤으로 prettier를 쓰고 있는데 줄맞춤할 때마다 script에 ‘가 “로 변환 되고</p><p>마지막 ,가 사라져서 lint에 걸려 가지고 고통 받다가 검색을 통해 해결법을 찾음</p><p><strong>.prettierrc.js</strong> 생성</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  singleQuote: <span class="literal">true</span>,</span><br><span class="line">  trailingComma: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="달력-만들기"><a href="#달력-만들기" class="headerlink" title="달력 만들기"></a>달력 만들기</h2><p>이전에 date-picker등은 자주 써봤으나 달력 구현은 이번이 처음이였다.</p><p>먼저 요일을 고정이니 반복문이 필요 했는데 v-for 지시자를 통해 테이블의 헤더에 삽입 하였다.</p><p>책에서 학습 할 때는 v-for만 적었었는데 key라는 속성을 안 넣어주면 lint 오류가 떴었다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table has-text-centered is-fullwidth&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">v-for</span>=<span class="string">&quot;day in days&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;day&quot;</span>&gt;</span>&#123;&#123; day &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      days: [</span><br><span class="line"><span class="javascript">        <span class="string">&#x27;일요일&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;월요일&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;화요일&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;수요일&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;목요일&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;금요일&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;토요일&#x27;</span>,</span></span><br><span class="line">      ],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>달력의 날짜들을 어떻게 구할지 고민을 하다가 이차원 배열에 1차 배열은 주로 잡고 2차 배열은</p><p>날짜들을 담으면 되겠다는 생각이 들었고 다른 캘린더를 보니 테이블에 그릴 때 1일이 </p><p>어느 요일에서 시작 하는지 알아야 했으며 그 전에 남은 셀이 있다면 저번 달의 날짜들을 </p><p>채웠어야 했고 마지막 주에 남은 셀이 있으면 다음 달의 날짜를 채웠어야 했다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;subtitle has-text-centered&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123; year &#125;&#125;년 &#123;&#123; month &#125;&#125;월 <span class="comment">&lt;!-- 현재 달력의 년, 월 표시 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table has-text-centered is-fullwidth&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span> <span class="attr">v-for</span>=<span class="string">&quot;day in days&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;day&quot;</span>&gt;</span>&#123;&#123; day &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(date, idx) in dates&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;idx&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span></span></span><br><span class="line"><span class="tag">              <span class="attr">v-for</span>=<span class="string">&quot;(day, secondIdx) in date&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;secondIdx&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span></span><br><span class="line">              &#123;&#123; day &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      days: [</span><br><span class="line"><span class="javascript">        <span class="string">&#x27;일요일&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;월요일&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;화요일&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;수요일&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;목요일&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;금요일&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;토요일&#x27;</span>,</span></span><br><span class="line">      ],</span><br><span class="line">      dates: [],</span><br><span class="line">      currentYear: 0,</span><br><span class="line">      currentMonth: 0,</span><br><span class="line">      year: 0,</span><br><span class="line">      month: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  created() &#123; <span class="comment">// 데이터에 접근이 가능한 첫 번째 라이프 사이클</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.year = date.getFullYear();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.month = date.getMonth() + <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.calendarData();</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    calendarData() &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> [</span></span><br><span class="line">        monthFirstDay,</span><br><span class="line">        monthLastDate,</span><br><span class="line">        lastMonthLastDate,</span><br><span class="line"><span class="javascript">      ] = <span class="built_in">this</span>.getFirstDayLastDate(<span class="built_in">this</span>.year, <span class="built_in">this</span>.month);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.dates = <span class="built_in">this</span>.getMonthOfDays(</span></span><br><span class="line">        monthFirstDay,</span><br><span class="line">        monthLastDate,</span><br><span class="line">        lastMonthLastDate,</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">    getFirstDayLastDate(year, month) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> firstDay = <span class="keyword">new</span> <span class="built_in">Date</span>(year, month - <span class="number">1</span>, <span class="number">1</span>).getDay(); <span class="comment">// 이번 달 시작 요일</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> lastDate = <span class="keyword">new</span> <span class="built_in">Date</span>(year, month, <span class="number">0</span>).getDate(); <span class="comment">// 이번 달 마지막 날짜</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> lastYear = year;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> lastMonth = month - <span class="number">1</span>;</span></span><br><span class="line">      if (month === 1) &#123;</span><br><span class="line">        lastMonth = 12;</span><br><span class="line">        lastYear -= 1;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> prevLastDate = <span class="keyword">new</span> <span class="built_in">Date</span>(lastYear, lastMonth, <span class="number">0</span>).getDate(); <span class="comment">// 지난 달 마지막 날짜</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> [firstDay, lastDate, prevLastDate];</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getMonthOfDays(</span><br><span class="line">      monthFirstDay,</span><br><span class="line">      monthLastDate,</span><br><span class="line">      prevMonthLastDate,</span><br><span class="line">    ) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> day = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> prevDay = (prevMonthLastDate - monthFirstDay) + <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> dates = [];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> weekOfDays = [];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">while</span> (day &lt;= monthLastDate) &#123;</span></span><br><span class="line">        if (day === 1) &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// 1일이 어느 요일인지에 따라 테이블에 그리기 위한 지난 셀의 날짜들을 구할 필요가 있다.</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; monthFirstDay; j += <span class="number">1</span>) &#123;</span></span><br><span class="line">            weekOfDays.push(prevDay);</span><br><span class="line">            prevDay += 1;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        weekOfDays.push(day);</span><br><span class="line">        if (weekOfDays.length === 7) &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// 일주일 채우면</span></span></span><br><span class="line">          dates.push(weekOfDays);</span><br><span class="line"><span class="javascript">          weekOfDays = []; <span class="comment">// 초기화</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        day += 1;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> len = weekOfDays.length;</span></span><br><span class="line">      if (len &gt; 0 &amp;&amp; len &lt; 7) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">1</span>; k &lt;= <span class="number">7</span> - len; k += <span class="number">1</span>) &#123;</span></span><br><span class="line">          weekOfDays.push(k);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (weekOfDays.length &gt; <span class="number">0</span>) dates.push(weekOfDays); <span class="comment">// 남은 날짜 추가</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> dates;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>특별할 거 없이 여전히 v-for만을 이용해서 달력을 그리기까지 완성 하였다.</p><p>이후에는 버튼을 통해 이전 달, 다음 달의 캘린더, 그리고 현재 달력의 오늘 날짜, 지난 달의</p><p>날짜, 다음 달의 날짜들은 색깔을 주고 싶어서 시도를 해 보았다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;section&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;subtitle has-text-centered&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-small is-primary is-outlined mr-5&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">&quot;calendarData(-1)&quot;</span>&gt;</span><span class="symbol">&amp;lt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        &#123;&#123; year &#125;&#125;년 &#123;&#123; month &#125;&#125;월</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-small is-primary is-outlined ml-5&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">&quot;calendarData(1)&quot;</span>&gt;</span><span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table has-text-centered is-fullwidth&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span> <span class="attr">v-for</span>=<span class="string">&quot;day in days&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;day&quot;</span>&gt;</span>&#123;&#123; day &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(date, idx) in dates&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;idx&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span></span></span><br><span class="line"><span class="tag">              <span class="attr">v-for</span>=<span class="string">&quot;(day, secondIdx) in date&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:key</span>=<span class="string">&quot;secondIdx&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:class</span>=<span class="string">&quot;&#123; &#x27;has-text-info-dark&#x27;: idx === 0 &amp;&amp; day &gt;= lastMonthStart,</span></span></span><br><span class="line"><span class="tag"><span class="string">              &#x27;has-text-danger&#x27;: dates.length - 1 === idx &amp;&amp; nextMonthStart &gt; day,</span></span></span><br><span class="line"><span class="tag"><span class="string">              &#x27;has-text-primary&#x27;: day === today &amp;&amp; month === currentMonth &amp;&amp; year === currentYear</span></span></span><br><span class="line"><span class="tag"><span class="string">              &#125;&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span></span><br><span class="line">              &#123;&#123; day &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      days: [</span><br><span class="line"><span class="javascript">        <span class="string">&#x27;일요일&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;월요일&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;화요일&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;수요일&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;목요일&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;금요일&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&#x27;토요일&#x27;</span>,</span></span><br><span class="line">      ],</span><br><span class="line">      dates: [],</span><br><span class="line">      currentYear: 0,</span><br><span class="line">      currentMonth: 0,</span><br><span class="line">      year: 0,</span><br><span class="line">      month: 0,</span><br><span class="line">      lastMonthStart: 0,</span><br><span class="line">      nextMonthStart: 0,</span><br><span class="line">      today: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  created() &#123; <span class="comment">// 데이터에 접근이 가능한 첫 번째 라이프 사이클</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.currentYear = date.getFullYear(); <span class="comment">// 이하 현재 년, 월 가지고 있기</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.currentMonth = date.getMonth() + <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.year = <span class="built_in">this</span>.currentYear;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.month = <span class="built_in">this</span>.currentMonth;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.today = date.getDate(); <span class="comment">// 오늘 날짜</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.calendarData();</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    calendarData(arg) &#123; <span class="comment">// 인자를 추가</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (arg &lt; <span class="number">0</span>) &#123; <span class="comment">// -1이 들어오면 지난 달 달력으로 이동</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.month -= <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arg === <span class="number">1</span>) &#123; <span class="comment">// 1이 들어오면 다음 달 달력으로 이동</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.month += <span class="number">1</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">this</span>.month === <span class="number">0</span>) &#123; <span class="comment">// 작년 12월</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.year -= <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.month = <span class="number">12</span>;</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.month &gt; <span class="number">12</span>) &#123; <span class="comment">// 내년 1월</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.year += <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.month = <span class="number">1</span>;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> [</span></span><br><span class="line">        monthFirstDay,</span><br><span class="line">        monthLastDate,</span><br><span class="line">        lastMonthLastDate,</span><br><span class="line"><span class="javascript">      ] = <span class="built_in">this</span>.getFirstDayLastDate(<span class="built_in">this</span>.year, <span class="built_in">this</span>.month);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.dates = <span class="built_in">this</span>.getMonthOfDays(</span></span><br><span class="line">        monthFirstDay,</span><br><span class="line">        monthLastDate,</span><br><span class="line">        lastMonthLastDate,</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">    getFirstDayLastDate(year, month) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> firstDay = <span class="keyword">new</span> <span class="built_in">Date</span>(year, month - <span class="number">1</span>, <span class="number">1</span>).getDay(); <span class="comment">// 이번 달 시작 요일</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> lastDate = <span class="keyword">new</span> <span class="built_in">Date</span>(year, month, <span class="number">0</span>).getDate(); <span class="comment">// 이번 달 마지막 날짜</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> lastYear = year;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> lastMonth = month - <span class="number">1</span>;</span></span><br><span class="line">      if (month === 1) &#123;</span><br><span class="line">        lastMonth = 12;</span><br><span class="line">        lastYear -= 1;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> prevLastDate = <span class="keyword">new</span> <span class="built_in">Date</span>(lastYear, lastMonth, <span class="number">0</span>).getDate(); <span class="comment">// 지난 달 마지막 날짜</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> [firstDay, lastDate, prevLastDate];</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getMonthOfDays(</span><br><span class="line">      monthFirstDay,</span><br><span class="line">      monthLastDate,</span><br><span class="line">      prevMonthLastDate,</span><br><span class="line">    ) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> day = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> prevDay = (prevMonthLastDate - monthFirstDay) + <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> dates = [];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> weekOfDays = [];</span></span><br><span class="line"><span class="javascript">      <span class="keyword">while</span> (day &lt;= monthLastDate) &#123;</span></span><br><span class="line">        if (day === 1) &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// 1일이 어느 요일인지에 따라 테이블에 그리기 위한 지난 셀의 날짜들을 구할 필요가 있다.</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; monthFirstDay; j += <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (j === <span class="number">0</span>) <span class="built_in">this</span>.lastMonthStart = prevDay; <span class="comment">// 지난 달에서 제일 작은 날짜</span></span></span><br><span class="line">            weekOfDays.push(prevDay);</span><br><span class="line">            prevDay += 1;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        weekOfDays.push(day);</span><br><span class="line">        if (weekOfDays.length === 7) &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// 일주일 채우면</span></span></span><br><span class="line">          dates.push(weekOfDays);</span><br><span class="line"><span class="javascript">          weekOfDays = []; <span class="comment">// 초기화</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        day += 1;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> len = weekOfDays.length;</span></span><br><span class="line">      if (len &gt; 0 &amp;&amp; len &lt; 7) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">1</span>; k &lt;= <span class="number">7</span> - len; k += <span class="number">1</span>) &#123;</span></span><br><span class="line">          weekOfDays.push(k);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (weekOfDays.length &gt; <span class="number">0</span>) dates.push(weekOfDays); <span class="comment">// 남은 날짜 추가</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.nextMonthStart = weekOfDays[<span class="number">0</span>]; <span class="comment">// 이번 달 마지막 주에서 제일 작은 날짜</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> dates;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>클래스를 제어하기 위해서는 :class 지시자를 사용 했다.</p><p>오늘 날짜는 별도로 가지고 있다가 해당 조건일 때만 색을 변경 하였고, 현재 달력에서 지난 달의</p><p>날짜는 첫 주에서만 가지고 있으니 첫 주의 제일 작은 수를 가지고 있다가 그 수보다 큰 경우에만</p><p>색을 변경해 주었고 마찬가지로 현재 달력에서 다음 달의 날짜는 마지막 주에서 0번째의 날짜를</p><p>가지고 있다가 그 수보다 작은 경우에만 색을 변경해 주었다.</p><p>다음 목표로는 일정을 추가 하고 볼 수 있게 만들어 봐야 겠다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><p><a href="https://kdydesign.github.io/2019/04/22/vue-cli3-tutorial/">[Vue.JS] Vue-CLI 3 시작하기</a><br><a href="https://github.com/vuejs/vetur/issues/986">Single quotes are being replaced with double quotes</a></p><pre><code></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue.js 기본 개념 정리</title>
      <link href="/2020/09/01/nodejs-vue-study-1/"/>
      <url>/2020/09/01/nodejs-vue-study-1/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.easyspub.co.kr/20_Menu/BookView/PUB/185/PUB">Do it! Vue.js 입문</a>을 읽어보면서 정리한 글</p><h2 id="Vue-js란"><a href="#Vue-js란" class="headerlink" title="Vue.js란"></a>Vue.js란</h2><p>웹 페이지 화면을 개발하기 위한 프론트엔드 프레임워크</p><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>프론트엔드의 화면 동작과 관련된 로직과 백엔드의 데이터 처리 로직을 분리하여</p><p>개발하는 소프트웨어 디자인 패턴</p><p>MVVM은 Model, View, ViewModel로 구성 되어 있다.</p><ul><li>Model은 서버에서 가지고 온 데이터를 보관</li><li>View는 사용자에게 보이는 화면</li><li>ViewModel은 데이터 바인딩(View에 표시할 내용과 Model의 데이터를 동기화), 돔 리스너(View의 변경 내역에 반응하여 특정 로직 수행)의 역할을 하며 Vue 같은 프레임워크가 맡는 역할</li></ul><h2 id="뷰-인스턴스"><a href="#뷰-인스턴스" class="headerlink" title="뷰 인스턴스"></a>뷰 인스턴스</h2><p>Vue로 화면을 개발하기 위해 필수적으로 생성해야 하는 기본 단위</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123; <span class="comment">// &lt;- 인스턴스</span></span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>, <span class="comment">// 인스턴스 범위 지정</span></span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="인스턴스-라이프-사이클"><a href="#인스턴스-라이프-사이클" class="headerlink" title="인스턴스 라이프 사이클"></a>인스턴스 라이프 사이클</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">├── 인스턴스 생성</span><br><span class="line">|──── 이벤트 및 라이프 사이클 초기화</span><br><span class="line">├──────── beforeCreate</span><br><span class="line">|──── 화면에 반응성 주입</span><br><span class="line">|──────── created</span><br><span class="line">|──── el, template 속성 확인</span><br><span class="line">|──── template 속성 내용을 render()로 변환</span><br><span class="line">|──────── beforeMount</span><br><span class="line">|──── $el 생성 후 el 속성 값을 대입</span><br><span class="line">|──────── mounted</span><br><span class="line">|── 인스턴스를 화면에 부착</span><br><span class="line">|──── 인스턴스의 데이터 변경 (여기부터는 데이터가 변경되는 경우에만)</span><br><span class="line">|──────── beforeUpdate</span><br><span class="line">|──── 화면 재 렌더링 및 데이터 갱신</span><br><span class="line">|──────── updated (여기까지)</span><br><span class="line">├── 인스턴스 내용 갱신</span><br><span class="line">|──── 인스턴스 접근 가능</span><br><span class="line">|──────── beforeDestroy</span><br><span class="line">|──── 컴포넌트, 인스턴스, 디렉티브등 모두 해제</span><br><span class="line">|──────── destroyed</span><br><span class="line">├── 인스턴스 소멸</span><br></pre></td></tr></table></figure><h3 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a>beforeCreate</h3><p>가정 처음 실행되는 라이프 사이클 단계이며 인스턴스의 속성과 화면 요소에 접근 불가</p><h3 id="created"><a href="#created" class="headerlink" title="created"></a>created</h3><p>인스턴스의 속성에는 접근이 가능하나, 화면 요소에는 접근 불가</p><p>서버에서 데이터를 요청할 때 사용</p><h3 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a>beforeMount</h3><p>인스턴스가 화면에 부착하기 전 단계이며 render함수(자바스크립트로 화면의 dom을 그리는)</p><p>호출되기 직전의 로직 처리 용도로 사용</p><h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a>mounted</h3><p>화면 요소에 인스턴스가 부착되고 나면 호출되는 단계로 </p><p>화면 요소를 제어하는 로직을 사용할 때 사용</p><h3 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a>beforeUpdate</h3><p>관찰하고 있는 데이터가 변경 되면 가상 돔으로 화면을 다시 그리기 전에 호출되는 단계</p><p>변경 예정인 새 데이터에 접근할 수 있어서 관련된 로직을 처리하는데 사용</p><h3 id="updated"><a href="#updated" class="headerlink" title="updated"></a>updated</h3><p>데이터가 변경되고 나서 가상 돔으로 화면을 그리고나면 실행하는 단계</p><p>변경 데이터의 화면 요소와 관련된 로직을 추가하는데 사용</p><h3 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a>beforeDestroy</h3><p>뷰 인스턴스가 파괴되기 전에 호출되는 단계로 인스턴스의 데이터를 삭제하기 좋은 단계</p><h3 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a>destroyed</h3><p>뷰 인스턴스가 파괴되고 나서 호출되는 단계</p><h2 id="컴포넌트"><a href="#컴포넌트" class="headerlink" title="컴포넌트"></a>컴포넌트</h2><p>컴포넌트란 조합하여 화면을 구성할 수 있는 블록(화면의 특정 영역)을 의미 한다.</p><h3 id="컴포넌트-종류"><a href="#컴포넌트-종류" class="headerlink" title="컴포넌트 종류"></a>컴포넌트 종류</h3><p>전역 컴포넌트와 지역 컴포넌트 두 가지 방식으로 선언을 할 수 있는데 </p><p>말 그대로 전자는 어디서나 사용할 수 있거나 후자는 지정된 범위에서만 사용 한다.</p><h3 id="컴포넌트-통신"><a href="#컴포넌트-통신" class="headerlink" title="컴포넌트 통신"></a>컴포넌트 통신</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">├── 뷰 인스턴스 (최상위 컴포넌트)</span><br><span class="line">|──── 첫 번째로 호출된 컴포넌트(뷰 인스턴스의 하위 컴포넌트, 두 번째 컴포넌트의 상위)</span><br><span class="line">├──────── 두 번째로 호출된 컴포넌트(위의 컴포넌트들의 하위 컴포넌트)</span><br></pre></td></tr></table></figure><p>상위 컴포넌트에서 하위 컴포넌트 간의 데이터 전달은 props를 통해 가능 하고</p><p>하위 컴포넌트에서 상위 컴포넌트 간의 데이터 전달은 $emit을 통해 가능 하다.</p><h2 id="뷰-라우터"><a href="#뷰-라우터" class="headerlink" title="뷰 라우터"></a>뷰 라우터</h2><p>뷰에서 라우팅을 구현할 수 있도록 지원하는 공식 라이브러리</p><p>라우팅이란 웹 페이지 간의 이동 방법을 뜻 하며 SPA(싱글 페이지 어플리케이션)에 </p><p>주로 사용되며 장점은 깜빡거림(새로고침 같은?)이 없어져서 사용자 경험이 향상 된다.</p><h3 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h3><p>페이지 이동 시 서버에 요청하여 새로 페이지를 갱신하는 게 아니고 미리 해당 페이지 데이터를</p><p>받아서 이동 시 클라이언트 라우팅을 이용하여 화면을 갱신하는 패턴을 적용한 어플리케이션</p><h2 id="프로젝트-생성"><a href="#프로젝트-생성" class="headerlink" title="프로젝트 생성"></a>프로젝트 생성</h2><p>Vue CLI를 통해 프로젝트를 생성할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-cli -g <span class="comment"># vue cli 전역 설치</span></span><br><span class="line">mkdir 프로젝트폴더</span><br><span class="line"><span class="built_in">cd</span> 프로젝트폴더</span><br><span class="line">vue init webpack-simple <span class="comment"># 여기에 설치할 것인가, 이름 등등 원하는대로 설정</span></span><br><span class="line">npm i <span class="comment"># 의존성 모듈 다운로드</span></span><br><span class="line">npm run dev <span class="comment"># 실행</span></span><br></pre></td></tr></table></figure><ul><li>simple은 웹팩 최소 기능을 활용한 프로젝트 구성 방식, 프로토타입용</li><li>vue init webpack으로 하면 웹팩의 고급 기능을 활용한 프로젝트 구성</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js app log를 Fluentd에 저장하기</title>
      <link href="/2020/05/09/etc-fluentd-2/"/>
      <url>/2020/05/09/etc-fluentd-2/</url>
      
        <content type="html"><![CDATA[<h2 id="설정"><a href="#설정" class="headerlink" title="설정"></a>설정</h2><p>예제 가이드대로 td-agent.conf를 바꿔본다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;match fluentd.test.**&gt;</span><br><span class="line">  @type stdout</span><br><span class="line">&lt;&#x2F;match&gt;</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1589013864/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-05-09_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_5.43.33_mklnlf.png" alt="설정추가"></p><p>그리고 나서 td-agent를 종료 후 다시 켜 주면 된다. 근데 match랑 source가 뭔지 보고 가자.</p><h2 id="match"><a href="#match" class="headerlink" title="match"></a>match</h2><blockquote><p>“match” 지시문은 일치하는 태그가 있는 이벤트를 찾아서 처리합니다, 일치하는 태그가 있는 이벤트를 찾아서 처리합니다</p></blockquote><p>공홈의 내용을 번역기로 돌렸더니 아 뭔가 카테고리나 네임스페이스인가? 라는 생각이 들었다.</p><h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><blockquote><p>입력 소스는 소스 지시문을 사용하여 원하는 입력 플러그인을 선택하고 구성하여 활성화됩니다.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;source&gt;</span><br><span class="line">  @type forward</span><br><span class="line">  @id input_forward</span><br><span class="line">&lt;&#x2F;source&gt;</span><br><span class="line">&lt;source&gt;</span><br><span class="line">  @type http</span><br><span class="line">  @id input_http</span><br><span class="line">  port 8888</span><br><span class="line">&lt;&#x2F;source&gt;</span><br></pre></td></tr></table></figure><p>아 여기로 로그를 보내는건가 보군! 이란 생각이 들었음. 여러 개 추가 된다고 한다.</p><h2 id="전송하기"><a href="#전송하기" class="headerlink" title="전송하기"></a>전송하기</h2><p>예제 코드를 따라가 보며 해 본다.</p><h3 id="패키지-설치"><a href="#패키지-설치" class="headerlink" title="패키지 설치"></a>패키지 설치</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i fluent-logger -S</span><br></pre></td></tr></table></figure><h3 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">&#x27;fluent-logger&#x27;</span>);</span><br><span class="line"></span><br><span class="line">logger.configure(<span class="string">&#x27;fluentd.test&#x27;</span>, &#123; <span class="comment">// <span class="doctag">NOTE:</span> tag</span></span><br><span class="line">  host: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  port: <span class="number">24224</span>, <span class="comment">// <span class="doctag">NOTE:</span> td-agent 실행 시 log에 port 24224로 뜸.</span></span><br><span class="line">  timeout: <span class="number">3.0</span>,</span><br><span class="line">  reconnectInterval: <span class="number">600000</span>, <span class="comment">// 10 minutes, <span class="doctag">NOTE:</span> 연결 실패 시 재연결 쿨 타임</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">logger.emit(<span class="string">&#x27;join&#x27;</span>, &#123;<span class="attr">id</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;delryn&#x27;</span>, <span class="attr">age</span>: <span class="number">32</span>&#125;);</span><br></pre></td></tr></table></figure><p>실행 결과는 아래 명령어를 쳐 보면 나온다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tail -n 1 /var/<span class="built_in">log</span>/td-agent/td-agent.log</span><br><span class="line">2020-05-09 17:45:47.000000000 +0900 fluentd.test.join: &#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;a&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;delryn&quot;</span>,<span class="string">&quot;age&quot;</span>:32&#125;</span><br></pre></td></tr></table></figure><p>어플리케이션 -&gt; agent 연결된 상태이기 때문에 agent를 종료하면 연결이 끊기는 메세지를 볼수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Fluentd error &#123; Error: connect ECONNREFUSED 127.0.0.1:24224</span><br><span class="line">    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1106:14)</span><br><span class="line">  errno: <span class="string">&#x27;ECONNREFUSED&#x27;</span>,</span><br><span class="line">  code: <span class="string">&#x27;ECONNREFUSED&#x27;</span>,</span><br><span class="line">  syscall: <span class="string">&#x27;connect&#x27;</span>,</span><br><span class="line">  address: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">  port: 24224 &#125;</span><br><span class="line">Fluentd will reconnect after 600 seconds</span><br></pre></td></tr></table></figure><h2 id="winston-morgan으로-연동"><a href="#winston-morgan으로-연동" class="headerlink" title="winston, morgan으로 연동"></a>winston, morgan으로 연동</h2><p>이전에 해본 winston + morgan 로그를 fluentd로 보내서 파일을 생성하게 해 보자.</p><h3 id="설정-추가"><a href="#설정-추가" class="headerlink" title="설정 추가"></a>설정 추가</h3><p>기존 conf를 참조해서 한번 추가 해보았다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;match myproject.app.**&gt;</span><br><span class="line"> @type file</span><br><span class="line"> path &#x2F;var&#x2F;log&#x2F;td-agent&#x2F;myproject&#x2F;app</span><br><span class="line">&lt;&#x2F;match&gt;</span><br><span class="line"></span><br><span class="line">&lt;match myproject.http.**&gt;</span><br><span class="line"> @type file</span><br><span class="line"> path &#x2F;var&#x2F;log&#x2F;td-agent&#x2F;myproject&#x2F;http</span><br><span class="line">&lt;&#x2F;match&gt;</span><br></pre></td></tr></table></figure><h3 id="코드-작성"><a href="#코드-작성" class="headerlink" title="코드 작성"></a>코드 작성</h3><p><a href="https://github.com/hidelryn/morgan-winston-example">이전</a>에 작성한 코드에 추가 해 본다.</p><h4 id="logger-js"><a href="#logger-js" class="headerlink" title="logger.js"></a><strong><code>logger.js</code></strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createLogger, format, transports &#125; = <span class="built_in">require</span>(<span class="string">&#x27;winston&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fluentTransport = <span class="built_in">require</span>(<span class="string">&#x27;fluent-logger&#x27;</span>).support.winstonTransport();</span><br><span class="line"><span class="keyword">const</span> mt = <span class="built_in">require</span>(<span class="string">&#x27;moment-timezone&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; combine, label, printf &#125; = format;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date = mt().tz(<span class="string">&#x27;Asia/Seoul&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> myFormat = printf(<span class="function"><span class="params">info</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;info.timestamp&#125;</span> [<span class="subst">$&#123;info.level&#125;</span>]: <span class="subst">$&#123;info.label&#125;</span> - <span class="subst">$&#123;info.message&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">const</span> koreaTime = format(<span class="function">(<span class="params">info</span>) =&gt;</span> &#123;</span><br><span class="line">  info.timestamp = date.format();</span><br><span class="line">  <span class="keyword">return</span> info;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fluentConfig = &#123;</span><br><span class="line">  host: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  port: <span class="number">24224</span>,</span><br><span class="line">  timeout: <span class="number">3.0</span>,</span><br><span class="line">  requireAckResponse: <span class="literal">false</span>, <span class="comment">// <span class="doctag">NOTE:</span> true로 설졍하면 fluentd의 응답을 기다린다라고 번역기로 나오는데 난 false로 해봤다.</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fluentInit = <span class="function">(<span class="params">tag</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> init = <span class="keyword">new</span> fluentTransport(tag, fluentConfig);</span><br><span class="line">  <span class="keyword">return</span> init;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> appLogger = <span class="function">(<span class="params">category</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> init = createLogger(&#123;</span><br><span class="line">    format: combine(</span><br><span class="line">      label(&#123; <span class="attr">label</span>: category &#125;),</span><br><span class="line">      koreaTime(),</span><br><span class="line">      myFormat,</span><br><span class="line">    ),</span><br><span class="line">    transports: [fluentInit(<span class="string">&#x27;myproject.app&#x27;</span>)],</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> init;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> httpLogger = createLogger(&#123;</span><br><span class="line">  format: combine(</span><br><span class="line">    label(&#123; <span class="attr">label</span>: <span class="string">&#x27;http&#x27;</span> &#125;),</span><br><span class="line">    koreaTime(),</span><br><span class="line">    myFormat,</span><br><span class="line">  ),</span><br><span class="line">  transports: [fluentInit(<span class="string">&#x27;myproject.http&#x27;</span>)],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> httpLogStream = &#123;</span><br><span class="line">  write: <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">    httpLogger.log(&#123;</span><br><span class="line">      level: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">      message: message,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.appLogger = appLogger;</span><br><span class="line"><span class="built_in">exports</span>.httpLogStream = httpLogStream;</span><br></pre></td></tr></table></figure><h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a><strong><code>index.js</code></strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> morgan = <span class="built_in">require</span>(<span class="string">&quot;morgan&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">&#x27;./logger&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> morganFormat = process.env.NODE_ENV !== <span class="string">&quot;production&quot;</span> ? <span class="string">&quot;dev&quot;</span> : <span class="string">&quot;combined&quot;</span>;</span><br><span class="line"></span><br><span class="line">app.use(morgan(morganFormat, &#123; <span class="attr">stream</span>: logger.httpLogStream &#125;));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;hihi&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/set-item&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; id, name, item_id &#125; = req.query;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">&#x27;undefined&#x27;</span> || <span class="keyword">typeof</span> name === <span class="string">&#x27;undefined&#x27;</span> || <span class="keyword">typeof</span> item_id === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    logger.appLogger(<span class="string">&#x27;spend_item&#x27;</span>).log(&#123;</span><br><span class="line">      level: <span class="string">&#x27;warn&#x27;</span>,</span><br><span class="line">      message: <span class="string">&#x27;파라미터 누락&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> res.status(<span class="number">200</span>).json(&#123; <span class="attr">statusCode</span>: <span class="number">403</span>, <span class="attr">message</span>: <span class="string">&#x27;파라미터 누락&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> item_id !== <span class="string">&#x27;string&#x27;</span> || !item_id.includes(<span class="string">&#x27;item_&#x27;</span>)) &#123;</span><br><span class="line">    logger.appLogger(<span class="string">&#x27;spend_item&#x27;</span>).log(&#123;</span><br><span class="line">      level: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      message: <span class="string">&#x27;잘못된 아이템 타입&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> res.status(<span class="number">200</span>).json(&#123; <span class="attr">statusCode</span>: <span class="number">500</span>, <span class="attr">message</span>: <span class="string">&#x27;잘못된 아이템 타입&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  logger.appLogger(<span class="string">&#x27;spend_item&#x27;</span>).log(&#123;</span><br><span class="line">    level: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">    message: <span class="string">`user_id: <span class="subst">$&#123;id&#125;</span>, name: <span class="subst">$&#123;name&#125;</span>, 획득 아이템: <span class="subst">$&#123;item_id&#125;</span>`</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res.status(<span class="number">200</span>).json(&#123; <span class="attr">statusCode</span>: <span class="number">200</span>, <span class="attr">message</span>: <span class="string">&#x27;처리 성공&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(PORT, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`app listening on port <span class="subst">$&#123;PORT&#125;</span>`</span>));</span><br></pre></td></tr></table></figure><p>실행을 해서 테스트를 하고 내가 설정한 경로에서 로그를 찾아보면 기록이 남아 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-05-09T19:35:19+09:00       myproject.app   &#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;user_id: abc, name: 123, 획득 아이템: item_123&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;spend_item&quot;</span>,<span class="string">&quot;timestamp&quot;</span>:<span class="string">&quot;2020-05-09T19:35:17+09:00&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">2020-05-09T19:35:19+09:00       myproject.http  &#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;message&quot;</span>:<span class="string">&quot;\u001B[0mGET /set-item?id=abc&amp;name=123&amp;item_id=item_123 \u001B[32m200\u001B[0m 8.309 ms - 44\u001B[0m\n&quot;</span>,<span class="string">&quot;label&quot;</span>:<span class="string">&quot;http&quot;</span>,<span class="string">&quot;timestamp&quot;</span>:<span class="string">&quot;2020-05-09T19:35:17+09:00&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="s3-연동"><a href="#s3-연동" class="headerlink" title="s3 연동"></a>s3 연동</h2><p>로컬 파일이 아닌 s3에 파일을 업로드하도록 바꿔보자</p><h3 id="설정-변경"><a href="#설정-변경" class="headerlink" title="설정 변경"></a>설정 변경</h3><p>이전 설정은 주석으로 해두고 새 설정을 추가 하자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;match myproject.app.**&gt;</span><br><span class="line">  @type s3</span><br><span class="line"></span><br><span class="line">  aws_key_id AWS 키</span><br><span class="line">  aws_sec_key AWS 시크릿 키</span><br><span class="line">  s3_bucket s3 버켓명</span><br><span class="line">  s3_region 리전</span><br><span class="line">  path logs&#x2F;$&#123;tag&#125;&#x2F;%Y&#x2F;%m&#x2F;%d&#x2F; # 저장할 s3 디렉토리</span><br><span class="line">  &lt;buffer tag,time&gt;</span><br><span class="line">    @type file</span><br><span class="line">    path &#x2F;var&#x2F;log&#x2F;fluent&#x2F;s3&#x2F;app # 버퍼로 갖고 있을 디텍토리 설정</span><br><span class="line">    timekey 0 # timekey는 시간</span><br><span class="line">    timekey_wait 10s # timekey_wait는 초 또는 분 (s, m)</span><br><span class="line">    timekey_use_utc true # use utc</span><br><span class="line">    chunk_limit_size 256m # 버퍼 파일 크기 지정</span><br><span class="line">  &lt;&#x2F;buffer&gt;</span><br><span class="line">&lt;&#x2F;match&gt;</span><br><span class="line"></span><br><span class="line">&lt;match myproject.http.**&gt;</span><br><span class="line">  @type s3</span><br><span class="line"></span><br><span class="line">  aws_key_id AWS 키</span><br><span class="line">  aws_sec_key AWS 시크릿 키</span><br><span class="line">  s3_bucket s3 버켓명</span><br><span class="line">  s3_region 리전</span><br><span class="line">  path logs&#x2F;$&#123;tag&#125;&#x2F;%Y&#x2F;%m&#x2F;%d&#x2F;</span><br><span class="line">  &lt;buffer tag,time&gt;</span><br><span class="line">    @type file</span><br><span class="line">    path &#x2F;var&#x2F;log&#x2F;fluent&#x2F;s3&#x2F;http</span><br><span class="line">    timekey 0</span><br><span class="line">    timekey_wait 10s</span><br><span class="line">    timekey_use_utc true</span><br><span class="line">    chunk_limit_size 256m </span><br><span class="line">  &lt;&#x2F;buffer&gt;</span><br><span class="line">&lt;&#x2F;match&gt;</span><br></pre></td></tr></table></figure><p>timekey, timekey_wait에 설정한 시간단위 별로 버퍼에 담아둔 로그를 s3에 업로드한다.</p><p>지금은 10초마다 업로드해놓게끔 해놨고 실제 어플리케이션에서 테스트를 해봤을 시</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1589191562/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-05-11_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_7.05.35_nkj3cy.png" alt="s3업로드"></p><p>gzip으로 압축 되서 올라 간다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Fluentd </tag>
            
            <tag> Log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fluentd 설치해보기</title>
      <link href="/2020/05/08/etc-fluentd-1/"/>
      <url>/2020/05/08/etc-fluentd-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Fluentd란"><a href="#Fluentd란" class="headerlink" title="Fluentd란?"></a>Fluentd란?</h2><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1589008820/fluentd-architecture_xltsg7.png" alt="아키텍처"></p><blockquote><p>Fluentd는 통합 로깅 계층을 위한 오픈 소스 데이터 수집기입니다. Fluentd를 사용하면 데이터를 보다 잘 사용하고 이해하기 위해 데이터 수집 및 소비를 통합 할 수 있습니다.</p></blockquote><p>공홈에 있는 설명 글을 번역기로 돌려보니 대충 뭔 말인지 이해함.</p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><p>로컬에서 학습을 할꺼니 OS에 맞는 버전을 공홈에서 다운 받는다. (현재는 mac이므로 dmg)</p><p>dmg를 열어서 실행을 해보면 td-agent라는 걸 설치를 한다 일단 하자.</p><p>공홈 가이드대로 터미널에서 실행을 해본다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl load /Library/LaunchDaemons/td-agent.plist <span class="comment"># 실행 명령어, 아무 반응이 없음, 백그라운드로 계속 실행이 된다.</span></span><br><span class="line">less /var/<span class="built_in">log</span>/td-agent/td-agent.log <span class="comment"># td-agent 실행 로그, 밑으로 내리면 나옴.</span></span><br><span class="line">sudo launchctl unload /Library/LaunchDaemons/td-agent.plist <span class="comment"># 종료 명령어, 실행과 마찬가지로 아무 반응이 없음.</span></span><br></pre></td></tr></table></figure><p>출력된 td-agent 실행, 종료의 로그</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1588933829/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-05-08_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_7.29.39_j57zdq.png" alt="실행, 종료의 로그 이미지"></p><h2 id="설정-파일"><a href="#설정-파일" class="headerlink" title="설정 파일"></a>설정 파일</h2><p>리눅스나 맥에서는 다음의 명령어로 설정 파일에 들어갈 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/td-agent/td-agent.conf</span><br></pre></td></tr></table></figure><p>현재는 내용을 모르므로 들어가는 법만 알아두고 추후에 <a href="https://docs.fluentd.org/configuration/config-file">링크</a>를 보자.</p><h2 id="라이브-서비스-시-해야하는-설정"><a href="#라이브-서비스-시-해야하는-설정" class="headerlink" title="라이브 서비스 시 해야하는 설정"></a>라이브 서비스 시 해야하는 설정</h2><p><a href="https://docs.fluentd.org/installation/before-install">링크</a>에서 보자.</p><p>나중에 AWS에서 할 때 해봐야 겠다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Fluentd </tag>
            
            <tag> Log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js Mocha 사용해보기</title>
      <link href="/2020/05/01/nodejs-mocha/"/>
      <url>/2020/05/01/nodejs-mocha/</url>
      
        <content type="html"><![CDATA[<h2 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h2><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1588304659/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-05-01_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_12.43.52_anr1ua.png" alt="구조"></p><p>보통 개발 버전에서만 사용하므로 다음과 같이 설치</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mocha -D</span><br></pre></td></tr></table></figure><p>테스트할 클래스를 간단하게 작성을 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">const</span> year = date.getFullYear();</span><br><span class="line"><span class="keyword">const</span> month = <span class="string">`<span class="subst">$&#123;date.getMonth() + <span class="number">1</span>&#125;</span>`</span>.padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> day = <span class="string">`<span class="subst">$&#123;date.getDate()&#125;</span>`</span>.padStart(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> today = <span class="string">`<span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;month&#125;</span>-<span class="subst">$&#123;day&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(id) &#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">    <span class="built_in">this</span>.loginDate = today;</span><br><span class="line">    <span class="built_in">this</span>.loginCount = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title">setLoginDate</span>(<span class="params">loginDate</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.loginDate = loginDate;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title">getLoginDate</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.loginDate;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title">setLoginCount</span>(<span class="params">count</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.loginCount += count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title">getLoginCount</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.loginCount;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = User;</span><br></pre></td></tr></table></figure><p>테스트를 하기 위한 코드, test란 폴더에 작성을 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">&#x27;assert&#x27;</span>); <span class="comment">// nodejs 내장 모듈 </span></span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">&#x27;../user&#x27;</span>);</span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;User&#x27;</span>, <span class="function">() =&gt;</span> &#123; <span class="comment">// <span class="doctag">NOTE:</span> description</span></span><br><span class="line">  it(<span class="string">&#x27;#init&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">new</span> User(<span class="string">&#x27;abc&#x27;</span>);</span><br><span class="line">    assert.equal(user.getLoginDate, <span class="string">&#x27;2020-03-21&#x27;</span>, <span class="string">&#x27;날짜가 다르네?&#x27;</span>); <span class="comment">// <span class="doctag">NOTE:</span> 첫 인자와 두번째 인자 비교, 틀리면 세번쨰 메세지 출력.</span></span><br><span class="line">  &#125;);</span><br><span class="line">  it(<span class="string">&#x27;#setLoginCount&#x27;</span>, <span class="function">(<span class="params">done</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.timeout(<span class="number">3000</span>);  <span class="comment">// <span class="doctag">NOTE:</span> 시간 제한 설정.</span></span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">new</span> User(<span class="string">&#x27;qwe&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> rnd = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">    user.setLoginCount = rnd;</span><br><span class="line">    <span class="keyword">if</span> (user.getLoginCount &gt;= <span class="number">1</span> &amp;&amp; user.getLoginCount &lt;= <span class="number">50</span>) <span class="keyword">return</span> done(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;범위보다 크다.&#x27;</span>));</span><br><span class="line">    <span class="keyword">return</span> done();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>실행은 package.json에서 script -&gt;test 키워드에 mocha로 작성해두면 </p><p>test 폴더 안에 있는 파일 전부를 실행 한다.</p><p>개별로 실행을 하기 위해서는 test 폴더에서 아래와 같은 명령어로 실행을 하면 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../node_modules/.bin/mocha 파일명.js</span><br></pre></td></tr></table></figure><p>결과는 아래와 같다.</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1588305203/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-05-01_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_12.53.02_by7dw9.png" alt="결과"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS SES 사용해보기</title>
      <link href="/2020/04/26/etc-aws-ses/"/>
      <url>/2020/04/26/etc-aws-ses/</url>
      
        <content type="html"><![CDATA[<h2 id="SES란"><a href="#SES란" class="headerlink" title="SES란?"></a>SES란?</h2><p>이메일을 보낼 수 있는 서비스</p><h2 id="사용하면서-느낀-장점"><a href="#사용하면서-느낀-장점" class="headerlink" title="사용하면서 느낀 장점"></a>사용하면서 느낀 장점</h2><ul><li>뭔가를 설치하거나 복잡한 설정이 필요 없이 쉽게 이메일 전송할 수 있다.</li><li>사용한만큼 요금 부과</li></ul><h2 id="사용하면서-느낀-단점"><a href="#사용하면서-느낀-단점" class="headerlink" title="사용하면서 느낀 단점"></a>사용하면서 느낀 단점</h2><ul><li>실 사용을 할려면 별도로 신청을 해야 하는데 1~2일 기간이 소요 된다.</li><li>서울 리전에서는 서비스를 하지 않으므로 지원하는 리전에서만 사용 가능</li></ul><h2 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h2><p>테스트를 하기 위해서는 발송할 이메일, 수신할 이메일을 등록을 해야 한다.</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1587883505/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-04-26_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.24.05_gubhva.png" alt="테스터 등록"></p><p>코드는 간단 하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;&#x27;</span>, <span class="comment">// ses 만든 region</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;&#x27;</span>, <span class="comment">// IAM</span></span><br><span class="line">  secretAccessKey: <span class="string">&#x27;&#x27;</span>, <span class="comment">// IAM</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ses = <span class="keyword">new</span> AWS.SESV2();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> html = <span class="string">&#x27;&lt;h1 style=&quot;color:aqua;&quot;&gt;반갑습니다&lt;/h1&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> text = <span class="string">&#x27;안녕하세요?&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  Content: &#123;</span><br><span class="line">    Simple: &#123;</span><br><span class="line">      Body: &#123; <span class="comment">// <span class="doctag">NOTE:</span> 메일 본문</span></span><br><span class="line">        <span class="comment">// Html: &#123; // <span class="doctag">NOTE:</span> HTML인 경우</span></span><br><span class="line">        <span class="comment">//   Data: html,</span></span><br><span class="line">        <span class="comment">//   Charset: &#x27;utf-8&#x27;, // 인코딩</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        Text: &#123; <span class="comment">// <span class="doctag">NOTE:</span> 일반 텍스트의 경우</span></span><br><span class="line">          Data: text,</span><br><span class="line">          Charset: <span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      Subject: &#123; <span class="comment">// <span class="doctag">NOTE:</span> 메일 제목</span></span><br><span class="line">        Data: <span class="string">&#x27;기획안 전달 드립니다.&#x27;</span>,</span><br><span class="line">        Charset: <span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  Destination: &#123;</span><br><span class="line">    BccAddresses: [], <span class="comment">// <span class="doctag">NOTE:</span> 숨은 참조 리스트</span></span><br><span class="line">    CcAddresses: [], <span class="comment">// <span class="doctag">NOTE:</span> 참조 리스트</span></span><br><span class="line">    ToAddresses: [<span class="string">&#x27;delryn@naver.com&#x27;</span>], <span class="comment">// <span class="doctag">NOTE:</span> 수신 할 메일 주소 리스트</span></span><br><span class="line">  &#125;,</span><br><span class="line">  FromEmailAddress: <span class="string">&#x27;&quot;delryn&quot; &lt;hidelryn@gmail.com&gt;&#x27;</span>, <span class="comment">// <span class="doctag">NOTE:</span> 발송 하는 메일 주소</span></span><br><span class="line">  ReplyToAddresses: [], <span class="comment">// 답장 받을 이메일 주소</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ses.sendEmail(params, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, err);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;메일 전송 성공!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="실행-결과"><a href="#실행-결과" class="headerlink" title="실행 결과"></a>실행 결과</h3><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1587883589/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-04-26_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.33.50_vikyqt.png" alt="html"></p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1587883592/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-04-26_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.34.20_dorhdw.png" alt="text"></p><h2 id="실서비스"><a href="#실서비스" class="headerlink" title="실서비스"></a>실서비스</h2><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1587883639/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-04-26_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.24.14_u0pyl7.png" alt="도메인등록"></p><p>도메인을 등록해줘야 발송자를 멍멍@도메인으로 보낼 수 있다.</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1587883719/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-04-26_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.24.27_gwwurq.png" alt="신청"></p><p>파랑색 리퀘스트 버튼을 누르면 AWS 서포트 페이지로 이동하는 데 거기서 해당 질문에 각각</p><p>답변을 작성을 해야 수락이 되야 실제 서비스로 쓸 수 있다 기간은 1~2일 소요</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SESV2.html#sendEmail-property">aws 문서</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js Morgan, Winston 사용해보기</title>
      <link href="/2020/04/12/nodejs-morgan-winston-example/"/>
      <url>/2020/04/12/nodejs-morgan-winston-example/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/winston">winston</a>을 조금만 설정 하면 express 내 로그를 편하게 남길 수 있다.</p><h2 id="로그-작성"><a href="#로그-작성" class="headerlink" title="로그 작성"></a>로그 작성</h2><p>app, http 로그를 처리하기 위한 모듈로 logger라는 파일을 생성 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createLogger, format, transports &#125; = <span class="built_in">require</span>(<span class="string">&#x27;winston&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; combine, label, printf &#125; = format;</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mt = <span class="built_in">require</span>(<span class="string">&#x27;moment-timezone&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> date = mt().tz(<span class="string">&#x27;Asia/Seoul&#x27;</span>); <span class="comment">// <span class="doctag">NOTE:</span> 날짜는 한국 시간으로 하고 싶다.</span></span><br><span class="line"><span class="keyword">const</span> myFormat = printf(<span class="function"><span class="params">info</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;info.timestamp&#125;</span> [<span class="subst">$&#123;info.level&#125;</span>]: <span class="subst">$&#123;info.label&#125;</span> - <span class="subst">$&#123;info.message&#125;</span>`</span>); <span class="comment">// <span class="doctag">NOTE:</span> 로그 형식 설정</span></span><br><span class="line"><span class="keyword">const</span> koreaTime = format(<span class="function">(<span class="params">info</span>) =&gt;</span> &#123; <span class="comment">// <span class="doctag">NOTE:</span> 한국 시간으로 하기 위해.. 설정을 안 할 시 에는 UTC 0이 default다.</span></span><br><span class="line">  info.timestamp = date.format();</span><br><span class="line">  <span class="keyword">return</span> info;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logType = &#123; <span class="comment">// 걍 만들어본 서비스 enum</span></span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;join&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">&#x27;spend_item&#x27;</span>,</span><br><span class="line">  <span class="number">4</span>: <span class="string">&#x27;system&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> appLogger = <span class="function">(<span class="params">type</span>) =&gt;</span> &#123; <span class="comment">// <span class="doctag">NOTE:</span> application log를 남기기 위함.</span></span><br><span class="line">  <span class="keyword">const</span> init = createLogger(&#123;</span><br><span class="line">    format: combine(</span><br><span class="line">      label(&#123; <span class="attr">label</span>: logType[type] &#125;), <span class="comment">// <span class="doctag">NOTE:</span> 어떤 서비스인지 알기 위함</span></span><br><span class="line">      koreaTime(),</span><br><span class="line">      myFormat,</span><br><span class="line">    ),</span><br><span class="line">    transports: [</span><br><span class="line">      <span class="keyword">new</span> transports.File(&#123; <span class="attr">filename</span>: path.join(__dirname, <span class="string">&#x27;logs&#x27;</span>, <span class="string">&#x27;app-error.log&#x27;</span>), <span class="attr">level</span>: <span class="string">&#x27;error&#x27;</span> &#125;), <span class="comment">// <span class="doctag">NOTE:</span> 에러는 별도로 보기 위함</span></span><br><span class="line">      <span class="keyword">new</span> transports.File(&#123; <span class="attr">filename</span>: path.join(__dirname, <span class="string">`logs`</span>, date.format(<span class="string">&#x27;YYYY-MM-DD&#x27;</span>), <span class="string">&#x27;app.log&#x27;</span>) &#125;), <span class="comment">// <span class="doctag">NOTE:</span> 모든 로그 (에러 포함)</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span>) &#123; <span class="comment">// <span class="doctag">NOTE:</span> 실제 서비스 환경이 아닐 시에는 출력을 해야 바로 바로 보기 편함.</span></span><br><span class="line">    init.add(<span class="keyword">new</span> transports.Console());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> init;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> httpLogger = createLogger(&#123; <span class="comment">// <span class="doctag">NOTE:</span> http status 로그를 남기기 위함.</span></span><br><span class="line">  format: combine(</span><br><span class="line">    label(&#123; <span class="attr">label</span>: <span class="string">&#x27;http&#x27;</span> &#125;),</span><br><span class="line">    koreaTime(),</span><br><span class="line">    myFormat,</span><br><span class="line">  ),</span><br><span class="line">  transports: [</span><br><span class="line">    <span class="keyword">new</span> transports.File(&#123; <span class="attr">filename</span>: path.join(__dirname, <span class="string">&#x27;logs&#x27;</span>, date.format(<span class="string">&#x27;YYYY-MM-DD&#x27;</span>), <span class="string">&#x27;http.log&#x27;</span>) &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> httpLogStream = &#123;</span><br><span class="line">  write: <span class="function">(<span class="params">message</span>) =&gt;</span> &#123; <span class="comment">// <span class="doctag">NOTE:</span> morgan에서 쓰기 위해 이 형태로 fix 되야함.</span></span><br><span class="line">    httpLogger.log(&#123;</span><br><span class="line">      level: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">      message: message,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.appLogger = appLogger;</span><br><span class="line"><span class="built_in">exports</span>.httpLogStream = httpLogStream;</span><br></pre></td></tr></table></figure><h2 id="express-테스트"><a href="#express-테스트" class="headerlink" title="express 테스트"></a>express 테스트</h2><p>예제 express를 만든다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> morgan = <span class="built_in">require</span>(<span class="string">&quot;morgan&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">&#x27;./logger&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> morganFormat = process.env.NODE_ENV !== <span class="string">&quot;production&quot;</span> ? <span class="string">&quot;dev&quot;</span> : <span class="string">&quot;combined&quot;</span>; <span class="comment">// <span class="doctag">NOTE:</span> morgan 출력 형태</span></span><br><span class="line"></span><br><span class="line">app.use(morgan(morganFormat, &#123; <span class="attr">stream</span>: logger.httpLogStream &#125;)); <span class="comment">// <span class="doctag">NOTE:</span> http request 로그 남기기</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;hihi&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/set-item&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; id, name, item_id &#125; = req.query;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">&#x27;undefined&#x27;</span> || <span class="keyword">typeof</span> name === <span class="string">&#x27;undefined&#x27;</span> || <span class="keyword">typeof</span> item_id === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    logger.appLogger(<span class="number">3</span>).log(&#123;</span><br><span class="line">      level: <span class="string">&#x27;warn&#x27;</span>,</span><br><span class="line">      message: <span class="string">&#x27;파라미터 누락&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> res.status(<span class="number">200</span>).json(&#123; <span class="attr">statusCode</span>: <span class="number">403</span>, <span class="attr">message</span>: <span class="string">&#x27;파라미터 누락&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> item_id !== <span class="string">&#x27;string&#x27;</span> || !item_id.includes(<span class="string">&#x27;item_&#x27;</span>)) &#123;</span><br><span class="line">    logger.appLogger(<span class="number">3</span>).log(&#123;</span><br><span class="line">      level: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      message: <span class="string">&#x27;잘못된 아이템 타입&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> res.status(<span class="number">200</span>).json(&#123; <span class="attr">statusCode</span>: <span class="number">500</span>, <span class="attr">message</span>: <span class="string">&#x27;잘못된 아이템 타입&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  logger.appLogger(<span class="number">3</span>).log(&#123;</span><br><span class="line">    level: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">    message: <span class="string">`user_id: <span class="subst">$&#123;id&#125;</span>, name: <span class="subst">$&#123;name&#125;</span>, 획득 아이템: <span class="subst">$&#123;item_id&#125;</span>`</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res.status(<span class="number">200</span>).json(&#123; <span class="attr">statusCode</span>: <span class="number">200</span>, <span class="attr">message</span>: <span class="string">&#x27;처리 성공&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  logger.appLogger(<span class="number">4</span>).log(&#123;</span><br><span class="line">    level: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">    message: err.stack,</span><br><span class="line">  &#125;);</span><br><span class="line">  res.status(<span class="number">500</span>).json(&#123; <span class="attr">statusCode</span>: <span class="number">500</span>, <span class="attr">message</span>: err.message &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(PORT, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`app listening on port <span class="subst">$&#123;PORT&#125;</span>`</span>));</span><br></pre></td></tr></table></figure><p>http request의 상태를 알기 위해선 <a href="https://www.npmjs.com/package/morgan">morgan</a> 라이브러리를 이용 한다.</p><p>앱의 로그는 간단하다. 로깅 레벨을 적어주고 출력할 메세지를 작성하면 된다.</p><p>로깅의 레벨은 error, warn, info, debug, verbose, silly가 잇는데 상황에 맞게 쓰자.</p><h2 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h2><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1586684513/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-04-12_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_6.40.34_g1wwbm.png" alt="생성 폴더 리스트"></p><p>실행 후 테스트를 해 보면 위와 같은 폴더가 생긴다 아래는 파일의 내용.</p><p>app.log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-04-12T17:47:41+09:00 [warn]: spend_item - 파라미터 누락</span><br><span class="line">2020-04-12T17:47:41+09:00 [error]: spend_item - 잘못된 아이템 타입</span><br><span class="line">2020-04-12T17:47:41+09:00 [info]: spend_item - user_id: abc, name: 123, 획득 아이템: item_123</span><br></pre></td></tr></table></figure><p>http.log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2020-04-12T17:47:41+09:00 [info]: http - [0mGET &#x2F;eqwe [33m404[0m 5.140 ms - 143[0m</span><br><span class="line"></span><br><span class="line">2020-04-12T17:47:41+09:00 [info]: http - [0mGET &#x2F;set-item?id&#x3D;abc&amp;name&#x3D;123 [32m200[0m 541.433 ms - 50[0m</span><br><span class="line"></span><br><span class="line">2020-04-12T17:47:41+09:00 [info]: http - [0mGET &#x2F;set-item?id&#x3D;abc&amp;name&#x3D;123&amp;item_id&#x3D;123 [32m200[0m 4.376 ms - 57[0m</span><br><span class="line"></span><br><span class="line">2020-04-12T17:47:41+09:00 [info]: http - [0mGET &#x2F;set-item?id&#x3D;abc&amp;name&#x3D;123&amp;item_id&#x3D;item_123 [36m304[0m 2.525 ms - -[0m</span><br></pre></td></tr></table></figure><p>app-error.log</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-04-12T17:47:41+09:00 [error]: spend_item - 잘못된 아이템 타입</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Log </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS SQS 사용해보기</title>
      <link href="/2020/03/04/etc-aws-sqs/"/>
      <url>/2020/03/04/etc-aws-sqs/</url>
      
        <content type="html"><![CDATA[<h2 id="SQS란"><a href="#SQS란" class="headerlink" title="SQS란?"></a>SQS란?</h2><p>서버들끼리 사용할 수 있는 완전관리형 Message Queue 서비스</p><h3 id="Message-Queue란"><a href="#Message-Queue란" class="headerlink" title="Message Queue란?"></a>Message Queue란?</h3><p>메시지를 이용하여 여러 서버를 연결해주는 역할이라 생각 한다.</p><p>방식은 sender가 데이터를 Queue에 적재했다가 receiver가 꺼내서 처리 한다.</p><h3 id="목적"><a href="#목적" class="headerlink" title="목적"></a>목적</h3><p><a href="https://www.icelancer.com/2016/12/message-queue.html">Message Queue는 왜 사용해야 하는가?</a></p><h2 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h2><p>SQS는 표준, FIFO 두 가지를 지원 한다.</p><h3 id="표준"><a href="#표준" class="headerlink" title="표준"></a>표준</h3><p>express(sender)에서 SQS(Queue)에 메세지를 적재 하고 Lambda(receiver)에서</p><p>꺼낸 다음에 DynamoDB에 저장을 실습으로 해보겠다.</p><h4 id="생성"><a href="#생성" class="headerlink" title="생성"></a>생성</h4><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1564911596/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-04_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.03.26_eqtwnv.png" alt="생성"></p><p>표준으로 하면 메세지가 중복으로 올 수 있다는건데 어플리케이션에서 처리를 해야 할 꺼 같다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1564912059/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-04_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_6.43.43_y1gobg.png" alt="생성결과"></p><h4 id="sender"><a href="#sender" class="headerlink" title="sender"></a>sender</h4><p>API 호출 시 SQS에 메세지를 전송하게끔 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">  extended: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;&#x27;</span>, <span class="comment">// IAM</span></span><br><span class="line">  secretAccessKey: <span class="string">&#x27;&#x27;</span> <span class="comment">// IAM</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sqs = <span class="keyword">new</span> AWS.SQS(&#123; <span class="attr">apiVersion</span>: <span class="string">&#x27;2012-11-05&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">app.listen(PORT, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;server is listening&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;hihi&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendMessage</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> params = &#123;</span><br><span class="line">    QueueUrl: <span class="string">&#x27;생성한 SQS URL&#x27;</span>,</span><br><span class="line">    MessageBody: <span class="built_in">JSON</span>.stringify(message),</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    sqs.sendMessage(params).promise().then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> id = req.body.id;</span><br><span class="line">  <span class="keyword">const</span> log = &#123; id, <span class="attr">dtm</span>: <span class="built_in">Date</span>.now(), <span class="attr">action</span>: <span class="string">&#x27;login&#x27;</span> &#125;;</span><br><span class="line">  sendMessage(log).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    res.json(&#123; <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">message</span>: <span class="string">&#x27;success&#x27;</span> &#125;);</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    res.json(&#123; <span class="attr">code</span>: <span class="number">500</span>, <span class="attr">message</span>: e &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/purchase&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; id, item &#125; = req.body;</span><br><span class="line">  <span class="keyword">const</span> log = &#123; id, item, <span class="attr">dtm</span>: <span class="built_in">Date</span>.now(), <span class="attr">action</span>: <span class="string">&#x27;purchase&#x27;</span> &#125;;</span><br><span class="line">  sendMessage(log).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    res.json(&#123; <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">message</span>: <span class="string">&#x27;success&#x27;</span> &#125;);</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.json(&#123; <span class="attr">code</span>: <span class="number">500</span>, <span class="attr">message</span>: e &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/search&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; id, word &#125; = req.body.id;</span><br><span class="line">  <span class="keyword">const</span> log = &#123; id, word, <span class="attr">dtm</span>: <span class="built_in">Date</span>.now(), <span class="attr">action</span>: <span class="string">&#x27;search&#x27;</span> &#125;;</span><br><span class="line">  sendMessage(log).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    res.json(&#123; <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">message</span>: <span class="string">&#x27;success&#x27;</span> &#125;);</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    res.json(&#123; <span class="attr">code</span>: <span class="number">500</span>, <span class="attr">message</span>: e &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="receiver"><a href="#receiver" class="headerlink" title="receiver"></a>receiver</h4><p>Lambda를 receiver로 쓸 껀데 해당 하는 IAM 역할을 생성을 미리 해야 한다.</p><h5 id="권한-생성"><a href="#권한-생성" class="headerlink" title="권한 생성"></a>권한 생성</h5><ol><li>역핢 만들기를 누른다.</li><li>사용 사례는 lambda로</li><li>SQS 검색해서 추가</li><li>로그를 보기 위해 CloudWatch도 추가</li><li>태그는 대충..</li><li>마지막으로 확인 후 생성</li></ol><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1564912498/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-04_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.38.44_lct92b.png" alt="권한 - 1"></p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1564912540/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-04_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.38.56_v6dtw7.png" alt="권한 - 2"></p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1564912589/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-04_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.39.09_v6vw41.png" alt="권한 - 3"></p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1564912658/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-04_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.39.29_y0lhjm.png" alt="권한 - 4"></p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1564912715/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-04_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.39.45_jtepdo.png" alt="권한 - 5"></p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1564912754/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-04_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.40.11_rdb3ou.png" alt="권한 - 6"></p><h5 id="Lambda-생성"><a href="#Lambda-생성" class="headerlink" title="Lambda 생성"></a>Lambda 생성</h5><ol><li>위에서 만든 권한을 연결</li><li>코드를 작성 해서 Lambda에 업로드</li></ol><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1564912834/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-04_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.40.59_q8qvy2.png" alt="권한연결"></p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1564912900/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-04_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.41.50_ichu61.png" alt="결과"></p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1564912947/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-04_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.42.06_spxuby.png" alt="트리거추가"></p><p>아래의 코드는 대기열이 만든 메세지 ID를 기반으로 dynamodb에서 체크를 한 다음에 넣는다.</p><p>실무에서 안 써 봤기에 AWS 커뮤니티에 질문한 결과 이런 식으로 하는 게 맞다고 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;&#x27;</span>, <span class="comment">// IAM</span></span><br><span class="line">  secretAccessKey: <span class="string">&#x27;&#x27;</span> <span class="comment">// IAM</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sqs = <span class="keyword">new</span> AWS.SQS(&#123; <span class="attr">apiVersion</span>: <span class="string">&#x27;2012-11-05&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamo = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient();</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.handler = <span class="keyword">async</span> (event) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * body: 내가 보낸 메세지</span></span><br><span class="line"><span class="comment">   * messageId: unique인진 모르겠지만 메세지 아디가 존재</span></span><br><span class="line"><span class="comment">   * receiptHandle: 메세지를 큐에서 지우기 위한 파라미터</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> &#123; body, messageId, receiptHandle &#125; = event.Records[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> message = <span class="built_in">JSON</span>.parse(body);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> haveData;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> params = &#123;</span><br><span class="line">      TableName: <span class="string">&#x27;테이블명&#x27;</span>,</span><br><span class="line">      Key: &#123;</span><br><span class="line">        messageId: messageId,</span><br><span class="line">        dtm: <span class="built_in">Number</span>(message.dtm),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    haveData = <span class="keyword">await</span> dynamo.get(params).promise();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;sqs worker err&#x27;</span>, e);</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">statusCode</span>: <span class="number">500</span>, <span class="attr">message</span>: <span class="string">&#x27;sqs worker err&#x27;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> haveData !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> putParams = &#123;</span><br><span class="line">        TableName: <span class="string">&#x27;테이블명&#x27;</span>,</span><br><span class="line">        Item: &#123;</span><br><span class="line">          messageId: messageId,</span><br><span class="line">          dtm: <span class="built_in">Number</span>(message.dtm),</span><br><span class="line">          action: message.action</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">if</span> (message.action === <span class="string">&#x27;purchase&#x27;</span>) params.Item.item = message.item;</span><br><span class="line">      <span class="keyword">if</span> (message.action === <span class="string">&#x27;search&#x27;</span>) params.Item.search = message.word;</span><br><span class="line">      <span class="keyword">const</span> removeParams = &#123; <span class="attr">QueueUrl</span>: <span class="string">&#x27;SQS URL&#x27;</span>, ReceiptHandle &#125;;</span><br><span class="line">      <span class="keyword">await</span> <span class="built_in">Promise</span>.all([</span><br><span class="line">        dynamo.put(putParams).promise(),</span><br><span class="line">        sqs.deleteMessage(removeParams).promise(),</span><br><span class="line">      ]);</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">statusCode</span>: <span class="number">200</span>, <span class="attr">message</span>: <span class="string">&#x27;sqs worker success&#x27;</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;sqs worker err&#x27;</span>, e);</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">statusCode</span>: <span class="number">500</span>, <span class="attr">message</span>: <span class="string">&#x27;sqs worker err&#x27;</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h4><p>코드를 실행 하기 전에 DynamoDB를 생성 한다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1564913031/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-04_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_5.44.24_r35cg0.png" alt="dynamodb"></p><p>요청 결과는 다음과 같다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1564913314/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-04_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_7.08.22_nhela2.png" alt="request"></p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1564913351/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-04_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_6.17.38_il4lgl.png" alt="response"></p><h3 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h3><h4 id="sqs-생성"><a href="#sqs-생성" class="headerlink" title="sqs 생성"></a>sqs 생성</h4><p>fifo 방식은 대기열 이름 뒤에 .fifo를 붙여야 한다.</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1586187582/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-04-06_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_11.55.41_ymmkdq.png" alt="SQS 생성"></p><p>아래에 대기열 생성 파랑 버튼 클릭</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1586188170/eqweqwe_ynydaf.png" alt="SQS 생성 완료"></p><p>생성 완료 시 아래의 URL은 나중에 필요.</p><h4 id="sender-1"><a href="#sender-1" class="headerlink" title="sender"></a>sender</h4><p>로컬에서 테스트를 해 본다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;&#x27;</span>, <span class="comment">// IAM</span></span><br><span class="line">  secretAccessKey: <span class="string">&#x27;&#x27;</span> <span class="comment">// IAM</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sqs = <span class="keyword">new</span> AWS.SQS(&#123; <span class="attr">apiVersion</span>: <span class="string">&#x27;2012-11-05&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> randomStr = <span class="function">(<span class="params">len</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> characters = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> charactersLength = characters.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    result += characters.charAt(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * charactersLength));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sendMessage = <span class="function">(<span class="params">type, id, body</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> params = &#123;</span><br><span class="line">    QueueUrl: <span class="string">&#x27;SQS에서 발급한 URL&#x27;</span>,</span><br><span class="line">    MessageBody: <span class="built_in">JSON</span>.stringify(body), <span class="comment">// <span class="doctag">NOTE:</span> 보낼 메세지</span></span><br><span class="line">    MessageGroupId: type, <span class="comment">// <span class="doctag">NOTE:</span> 메시지 그룹 ID 특정 메시지 그룹에 속한 메시지를 지정하는 태그. 동일한 메시지 그룹에 속한 메시지는 메시지 그룹에 따라 엄격한 순서로 항상 하나씩 처리됩니다</span></span><br><span class="line">    MessageDeduplicationId: <span class="string">`<span class="subst">$&#123;id&#125;</span>:<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;</span>:<span class="subst">$&#123;randomStr(<span class="number">5</span>)&#125;</span>`</span>, <span class="comment">// <span class="doctag">NOTE:</span> 메시지 중복 제거 ID 전송된 메시지의 중복 제거에 사용되는 토큰. 특정 메시지 중복 제거 ID가 있는 메시지를 성공적으로 전송한 경우, 메시지 중복 제거 ID가 동일한 모든 메시지는 성공적으로 수신되지만 중복 제거 간격인 5분 동안은 전달되지 않습니다.</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = sqs.sendMessage(params).promise();</span><br><span class="line">    result.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;성공한 메세지&#x27;</span>, <span class="built_in">JSON</span>.stringify((data)));</span><br><span class="line">      resolve(data);</span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;실패한 메세지&#x27;</span>, <span class="built_in">JSON</span>.stringify(params));</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sendMessage(<span class="string">&#x27;join&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, &#123;<span class="attr">id</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">ts</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(), <span class="attr">message</span>: <span class="string">&#x27;hihi&#x27;</span>&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;a - send success&#x27;</span>);</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;e&#x27;</span>, e);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  sendMessage(<span class="string">&#x27;join&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, &#123;<span class="attr">id</span>: <span class="string">&#x27;b&#x27;</span>, <span class="attr">ts</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(), <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span>&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;b - send success&#x27;</span>);</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;e&#x27;</span>, e);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  sendMessage(<span class="string">&#x27;join&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, &#123;<span class="attr">id</span>: <span class="string">&#x27;c&#x27;</span>, <span class="attr">ts</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(), <span class="attr">message</span>: <span class="string">&#x27;나비보벳따우&#x27;</span>&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;c - send success&#x27;</span>);</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;e&#x27;</span>, e);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br></pre></td></tr></table></figure><p>전송 순서는 a -&gt; c -&gt; b다.</p><h4 id="receiver-1"><a href="#receiver-1" class="headerlink" title="receiver"></a>receiver</h4><h5 id="권한-생성-1"><a href="#권한-생성-1" class="headerlink" title="권한 생성"></a>권한 생성</h5><p>위에서 만든 표준 SQS 역할과 같다.</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1586188248/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-04-07_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_12.03.26_j5igud.png" alt="IAM 생성"></p><h5 id="Lambda-생성-1"><a href="#Lambda-생성-1" class="headerlink" title="Lambda 생성"></a>Lambda 생성</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;&#x27;</span>, <span class="comment">// IAM</span></span><br><span class="line">  secretAccessKey: <span class="string">&#x27;&#x27;</span> <span class="comment">// IAM</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ddb = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient(&#123; <span class="attr">apiVersion</span>: <span class="string">&#x27;2012-08-10&#x27;</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> sqs = <span class="keyword">new</span> AWS.SQS(&#123; <span class="attr">apiVersion</span>: <span class="string">&#x27;2012-11-05&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.handler = <span class="keyword">async</span> (event) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> body = <span class="built_in">JSON</span>.parse(event.Records[<span class="number">0</span>].body);</span><br><span class="line">  <span class="keyword">const</span> receiptHandle = event.Records[<span class="number">0</span>].receiptHandle;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;body&#x27;</span>, body);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;receiptHandle&#x27;</span>, receiptHandle);</span><br><span class="line">  <span class="keyword">const</span> putParams = &#123;</span><br><span class="line">    TableName: <span class="string">&#x27;receive&#x27;</span>,</span><br><span class="line">    Item: &#123;</span><br><span class="line">      id: body.id,</span><br><span class="line">      timestamp: body.ts,</span><br><span class="line">      message: body.message,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> sqsParams = &#123;</span><br><span class="line">    QueueUrl: <span class="string">&#x27;SQS에서 발급하는 URL&#x27;</span>,</span><br><span class="line">    ReceiptHandle: receiptHandle, <span class="comment">// <span class="doctag">NOTE:</span> 해당 메세지의 UUID라 생각하면 될듯.</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">Promise</span>.all([</span><br><span class="line">      ddb.put(putParams).promise(), <span class="comment">// <span class="doctag">NOTE:</span> dynamodb에 저장</span></span><br><span class="line">      sqs.deleteMessage(sqsParams).promise(), <span class="comment">// <span class="doctag">NOTE:</span> 수신한 메세지는 삭제</span></span><br><span class="line">    ]);</span><br><span class="line">    <span class="keyword">const</span> response = &#123;</span><br><span class="line">      statusCode: <span class="number">200</span>,</span><br><span class="line">      body: <span class="built_in">JSON</span>.stringify(<span class="string">&#x27;receive success&#x27;</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;e&#x27;</span>, e);</span><br><span class="line">    <span class="keyword">const</span> response = &#123;</span><br><span class="line">      statusCode: <span class="number">500</span>,</span><br><span class="line">      body: <span class="built_in">JSON</span>.stringify(<span class="string">&#x27;receive err&#x27;</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="Lambda-트리거-설정"><a href="#Lambda-트리거-설정" class="headerlink" title="Lambda 트리거 설정"></a>Lambda 트리거 설정</h5><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1586188519/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-04-07_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_12.16.55_hvzumg.png" alt="lambda 트리거 설정"></p><h5 id="테스트-1"><a href="#테스트-1" class="headerlink" title="테스트"></a>테스트</h5><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1586188696/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-04-07_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_12.56.55_ntkiob.png" alt="cloudwatch 결과"></p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1586188637/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-04-07_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_12.56.35_hamng2.png" alt="dynamodb 결과"></p><p>허용되는 범위의 메세지의 수로 테스트를 해봐야 정확하나 우선은 의도한대로 프로세스는 작동 했다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://sarc.io/index.php/miscellaneous/1615-message-queue-mq">Message Queue (MQ) 란 무엇일까</a></li><li><a href="https://docs.aws.amazon.com/ko_kr/sdk-for-javascript/v2/developer-guide/sqs-examples-send-receive-messages.html">Amazon SQS Node.js 예제</a></li><li><a href="https://docs.aws.amazon.com/ko_kr/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagegroupid-property.html">Amazon SQS 메시지 그룹 ID 사용</a></li><li><a href="https://docs.aws.amazon.com/ko_kr/AWSSimpleQueueService/latest/SQSDeveloperGuide/using-messagededuplicationid-property.html">Amazon SQS 메시지 중복 제거 ID 사용</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express에서 Swagger를 이용한 API DOC 만들기</title>
      <link href="/2020/01/12/nodejs-express-swagger/"/>
      <url>/2020/01/12/nodejs-express-swagger/</url>
      
        <content type="html"><![CDATA[<p>팀원에 의해 알게 된 swagger! 궁금해서 한 번 도전해봣다.</p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add swagger-ui-express</span><br></pre></td></tr></table></figure><h2 id="swagger-document-작성"><a href="#swagger-document-작성" class="headerlink" title="swagger document 작성"></a>swagger document 작성</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  openapi: <span class="string">&#x27;3.0.1&#x27;</span>,</span><br><span class="line">  info: &#123;</span><br><span class="line">    version: <span class="string">&#x27;0.0.1&#x27;</span>,</span><br><span class="line">    title: <span class="string">&#x27;swagger 적용해보기.&#x27;</span>,</span><br><span class="line">    description: <span class="string">&#x27;example API&#x27;</span>,</span><br><span class="line">    termsOfService: <span class="string">&#x27;http://api_url/terms/&#x27;</span>,</span><br><span class="line">    contact: &#123;</span><br><span class="line">      name: <span class="string">&#x27;delryn&#x27;</span>,</span><br><span class="line">      email: <span class="string">&#x27;hidelryn@gmail.com&#x27;</span>,</span><br><span class="line">      url: <span class="string">&#x27;https://hidelryn@github.io&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    license: &#123;</span><br><span class="line">      name: <span class="string">&#x27;Apache 2.0&#x27;</span>,</span><br><span class="line">      url: <span class="string">&#x27;https://www.apache.org/licenses/LICENSE-2.0.html&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  servers: [</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">&#x27;http://localhost:3000/&#x27;</span>,</span><br><span class="line">      description: <span class="string">&#x27;Local server&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">&#x27;https://api_url_testing&#x27;</span>,</span><br><span class="line">      description: <span class="string">&#x27;Testing server&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      url: <span class="string">&#x27;https://api_url_production&#x27;</span>,</span><br><span class="line">      description: <span class="string">&#x27;Production server&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  security: [</span><br><span class="line">    &#123;</span><br><span class="line">      ApiKeyAuth: []</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  tags: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&#x27;test operations&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  paths: &#123;</span><br><span class="line">    <span class="string">&#x27;/getUser&#x27;</span>: &#123;</span><br><span class="line">      get: &#123;</span><br><span class="line">        tags: [<span class="string">&#x27;test operations&#x27;</span>],</span><br><span class="line">        description: <span class="string">&#x27;유저 데이터 불러오기&#x27;</span>,</span><br><span class="line">        operationId: <span class="string">&#x27;getUser&#x27;</span>,</span><br><span class="line">        parameters: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">            <span class="keyword">in</span>: <span class="string">&#x27;query&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;schema&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;$ref&quot;</span>: <span class="string">&quot;#/components/schemas/userid&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            required: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        responses: &#123;</span><br><span class="line">          <span class="string">&#x27;200&#x27;</span>: &#123;</span><br><span class="line">            description: <span class="string">&#x27;유저 데이터 불러오기&#x27;</span>,</span><br><span class="line">            content: &#123;</span><br><span class="line">              <span class="string">&#x27;application/json&#x27;</span>: &#123;</span><br><span class="line">                schema: &#123;</span><br><span class="line">                  $ref: <span class="string">&#x27;#/components/schemas/User&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&#x27;400&#x27;</span>: &#123;</span><br><span class="line">            description: <span class="string">&#x27;파라미터가 생략 돠었음&#x27;</span>,</span><br><span class="line">            content: &#123;</span><br><span class="line">              <span class="string">&#x27;application/json&#x27;</span>: &#123;</span><br><span class="line">                schema: &#123;</span><br><span class="line">                  $ref: <span class="string">&#x27;#/components/schemas/Error&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                example: &#123;</span><br><span class="line">                  message: <span class="string">&#x27;id가 생략 되었음&#x27;</span>,</span><br><span class="line">                  internal_code: <span class="string">&#x27;missing_parameters&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;/createUser&quot;</span>: &#123;</span><br><span class="line">      post: &#123;</span><br><span class="line">        tags: [<span class="string">&#x27;test operations&#x27;</span>],</span><br><span class="line">        description: <span class="string">&#x27;유저 데이터 생성&#x27;</span>,</span><br><span class="line">        operationId: <span class="string">&#x27;createUser&#x27;</span>,</span><br><span class="line">        parameters: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;name&quot;</span>,</span><br><span class="line">            <span class="string">&quot;in&quot;</span>: <span class="string">&quot;body&quot;</span>,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: <span class="string">&quot;유저 이름&quot;</span>,</span><br><span class="line">            <span class="string">&quot;schema&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;$ref&quot;</span>: <span class="string">&quot;#/components/schemas/username&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            required: <span class="literal">true</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;age&quot;</span>,</span><br><span class="line">            <span class="string">&quot;in&quot;</span>: <span class="string">&quot;body&quot;</span>,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: <span class="string">&quot;유저 나이&quot;</span>,</span><br><span class="line">            <span class="string">&quot;schema&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;$ref&quot;</span>: <span class="string">&quot;#/components/schemas/userage&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            required: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        requestBody: &#123;</span><br><span class="line">          content: &#123;</span><br><span class="line">            <span class="string">&#x27;application/json&#x27;</span>: &#123;</span><br><span class="line">              schema: &#123;</span><br><span class="line">                $ref: <span class="string">&#x27;#/components/schemas/reqUser&#x27;</span></span><br><span class="line">              &#125;,</span><br><span class="line">              required: <span class="literal">true</span>,</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        responses: &#123;</span><br><span class="line">          <span class="string">&#x27;200&#x27;</span>: &#123;</span><br><span class="line">            description: <span class="string">&#x27;유저 생성 완료&#x27;</span>,</span><br><span class="line">            content: &#123;</span><br><span class="line">              <span class="string">&#x27;application/json&#x27;</span>: &#123;</span><br><span class="line">                schema: &#123;</span><br><span class="line">                  $ref: <span class="string">&#x27;#/components/schemas/User&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">&#x27;400&#x27;</span>: &#123;</span><br><span class="line">            description: <span class="string">&#x27;파라미터가 생략 되었음&#x27;</span>,</span><br><span class="line">            content: &#123;</span><br><span class="line">              <span class="string">&#x27;application/json&#x27;</span>: &#123;</span><br><span class="line">                schema: &#123;</span><br><span class="line">                  $ref: <span class="string">&#x27;#/components/schemas/Error&#x27;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                example: &#123;</span><br><span class="line">                  message: <span class="string">&#x27;이름 또는 나이가 생략 되었다&#x27;</span>,</span><br><span class="line">                  internal_code: <span class="string">&#x27;invalid_parameters&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    schemas: &#123;</span><br><span class="line">      userid: &#123;</span><br><span class="line">        type: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">        description: <span class="string">&#x27;유저 고유 아이디&#x27;</span>,</span><br><span class="line">        example: <span class="string">&#x27;qjrkqnek23nvie&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      username: &#123;</span><br><span class="line">        type: <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">        description: <span class="string">&#x27;유저 이름&#x27;</span>,</span><br><span class="line">        example: <span class="string">&#x27;delryn&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      userage: &#123;</span><br><span class="line">        type: <span class="string">&#x27;integer&#x27;</span>,</span><br><span class="line">        description: <span class="string">&#x27;유저 나이&#x27;</span>,</span><br><span class="line">        example: <span class="number">33</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      reqUser: &#123;</span><br><span class="line">        type: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">        properties: &#123;</span><br><span class="line">          name: &#123;</span><br><span class="line">            $ref: <span class="string">&#x27;#/components/schemas/username&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          age: &#123;</span><br><span class="line">            $ref: <span class="string">&#x27;#/components/schemas/userage&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      User: &#123;</span><br><span class="line">        type: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">        properties: &#123;</span><br><span class="line">          id: &#123;</span><br><span class="line">            $ref: <span class="string">&#x27;#/components/schemas/userid&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          name: &#123;</span><br><span class="line">            $ref: <span class="string">&#x27;#/components/schemas/username&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          age: &#123;</span><br><span class="line">            $ref: <span class="string">&#x27;#/components/schemas/userage&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// Users: &#123;</span></span><br><span class="line">      <span class="comment">//   type: &#x27;object&#x27;,</span></span><br><span class="line">      <span class="comment">//   properties: &#123;</span></span><br><span class="line">      <span class="comment">//     users: &#123;</span></span><br><span class="line">      <span class="comment">//       type: &#x27;array&#x27;,</span></span><br><span class="line">      <span class="comment">//       items: &#123;</span></span><br><span class="line">      <span class="comment">//         $ref: &#x27;#/components/schemas/User&#x27;</span></span><br><span class="line">      <span class="comment">//       &#125;</span></span><br><span class="line">      <span class="comment">//     &#125;</span></span><br><span class="line">      <span class="comment">//   &#125;</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">      <span class="built_in">Error</span>: &#123;</span><br><span class="line">        type: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">        properties: &#123;</span><br><span class="line">          message: &#123;</span><br><span class="line">            type: <span class="string">&#x27;string&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          internal_code: &#123;</span><br><span class="line">            type: <span class="string">&#x27;string&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>코드로 api 문서를 정의한다고 생각하면 됨.</p><h2 id="어플리케이션-적용"><a href="#어플리케이션-적용" class="headerlink" title="어플리케이션 적용"></a>어플리케이션 적용</h2><p>간단한 api 어플리케이션을 작성 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">&#x27;redis&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> nanoid = <span class="built_in">require</span>(<span class="string">&#x27;nanoid&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> swaggerUi = <span class="built_in">require</span>(<span class="string">&#x27;swagger-ui-express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> swaggerDocument = <span class="built_in">require</span>(<span class="string">&#x27;./swagger.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> redisClient = redis.createClient();</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">  extended: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line">app.use(<span class="string">&#x27;/api-docs&#x27;</span>, swaggerUi.serve, swaggerUi.setup(swaggerDocument));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/getUser&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> userId = req.query.id;</span><br><span class="line">  <span class="keyword">if</span> (!userId) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.json(&#123; <span class="attr">code</span>: <span class="number">400</span>, <span class="attr">message</span>: <span class="string">&#x27;Missing parameters&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  redisClient.hget(<span class="string">&#x27;swaggerUser&#x27;</span>, userId, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> res.json(&#123; <span class="attr">code</span>: <span class="number">500</span>, <span class="attr">message</span>: <span class="string">&#x27;System error&#x27;</span> &#125;);</span><br><span class="line">    <span class="keyword">if</span> (!data) <span class="keyword">return</span> res.json(&#123; <span class="attr">code</span>: <span class="number">403</span>, <span class="attr">message</span>: <span class="string">&#x27;None user&#x27;</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> parse = <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">    <span class="keyword">return</span> res.json(&#123; <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">data</span>: parse &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/createUser&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, age &#125; = req.body;</span><br><span class="line">  <span class="keyword">if</span> (!age || !name) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.json(&#123; <span class="attr">code</span>: <span class="number">500</span>, <span class="attr">message</span>: <span class="string">&#x27;Missing parameters&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> id = nanoid();</span><br><span class="line">  <span class="keyword">const</span> data = &#123;id, name, age&#125;;</span><br><span class="line">  redisClient.hset(<span class="string">&#x27;swaggerUser&#x27;</span>, id, <span class="built_in">JSON</span>.stringify(data), <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> res.json(&#123; <span class="attr">code</span>: <span class="number">500</span>, <span class="attr">message</span>: <span class="string">&#x27;System error&#x27;</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> res.json(&#123; <span class="attr">code</span>: <span class="number">200</span>, data &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(PORT, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;server is listening&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>실제 swagger 적용한 코드는 이러하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> swaggerUi = <span class="built_in">require</span>(<span class="string">&#x27;swagger-ui-express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> swaggerDocument = <span class="built_in">require</span>(<span class="string">&#x27;./swagger.js&#x27;</span>);</span><br><span class="line">app.use(<span class="string">&#x27;/api-docs&#x27;</span>, swaggerUi.serve, swaggerUi.setup(swaggerDocument));</span><br></pre></td></tr></table></figure><p>어플리케이션을 기동 시 localhost:3000/api-doc로 접속을 하게 되면 적용된 화면이 나옴.</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1578828733/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-01-12_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_8.31.50_fw12ci.png" alt="결과"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Express </tag>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring에서 json 다루기</title>
      <link href="/2020/01/05/etc-spring-jackson/"/>
      <url>/2020/01/05/etc-spring-jackson/</url>
      
        <content type="html"><![CDATA[<h2 id="의존성"><a href="#의존성" class="headerlink" title="의존성"></a>의존성</h2><p>pom.xml(maven)에 jackson을 추가 한다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;userId&quot;</span>: <span class="string">&quot;hidelryn&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;12345q&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;gameData&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;gameId&quot;</span>: <span class="string">&quot;a1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;sessionKey&quot;</span>: <span class="string">&quot;qrkqkej2l31qeqk&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;userLocale&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;locale&quot;</span>: <span class="string">&quot;ko_KR&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;createAt&quot;</span>: <span class="number">1578220139</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;delryn&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;scores&quot;</span>: [</span><br><span class="line">      <span class="number">100</span>,</span><br><span class="line">      <span class="number">30</span>,</span><br><span class="line">      <span class="number">60</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;item&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;itemId&quot;</span>: <span class="string">&quot;0_id&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;itemAmount&quot;</span>: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;itemId&quot;</span>: <span class="string">&quot;1_id&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;itemAmount&quot;</span>: <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;itemId&quot;</span>: <span class="string">&quot;2_id&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;itemAmount&quot;</span>: <span class="number">2</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;itemId&quot;</span>: <span class="string">&quot;3_id&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;itemAmount&quot;</span>: <span class="number">3</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;itemId&quot;</span>: <span class="string">&quot;4_id&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;itemAmount&quot;</span>: <span class="number">4</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;itemId&quot;</span>: <span class="string">&quot;5_id&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;itemAmount&quot;</span>: <span class="number">5</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같은 json을 다루기 위해서 형태?에 맞는 데이터 클래스를 작성해줘야 한다.</p><p>getter/setter가 하나 라도 생략 시 jackson 오류가 나므로 체크를 잘 하자.</p><p>예시로 User라는 클래스를 작성해본다. 솔직히 자바스크립트에 비해 좀 귀찬다..</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.delryn.helloworld.model;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String userId;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> GameData gameData;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserId</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userId = userId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> GameData <span class="title">getGameData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gameData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGameData</span><span class="params">(GameData gameData)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.gameData = gameData;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GameData 클래스.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.delryn.helloworld.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameData</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> List&lt;Item&gt; items;</span><br><span class="line"><span class="keyword">private</span> String gameId;</span><br><span class="line"><span class="keyword">private</span> String sessionKey;</span><br><span class="line"><span class="keyword">private</span> UserLocale userLocale;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> List&lt;Integer&gt; scores;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">getItem</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> items;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItem</span><span class="params">(List&lt;Item&gt; item)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.items = item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getGameId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gameId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGameId</span><span class="params">(String gameId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.gameId = gameId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSessionKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> sessionKey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSessionKey</span><span class="params">(String sessionKey)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.sessionKey = sessionKey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserLocale <span class="title">getUserLocale</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userLocale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserLocale</span><span class="params">(UserLocale userLocale)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userLocale = userLocale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getScores</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> scores;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScores</span><span class="params">(List&lt;Integer&gt; scores)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.scores = scores;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserLocale 클래스</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.delryn.helloworld.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserLocale</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Locale locale;</span><br><span class="line"><span class="keyword">private</span> Long createAt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Locale <span class="title">getLocale</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> locale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(Locale locale)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.locale = locale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Long <span class="title">getCreateAt</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> createAt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateAt</span><span class="params">(Long createAt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.createAt = createAt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>데이터 모델 클래스가 완료되었으니 컨트롤러에서 써보자.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.delryn.helloworld.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.delryn.helloworld.model.GameData;</span><br><span class="line"><span class="keyword">import</span> com.delryn.helloworld.model.Item;</span><br><span class="line"><span class="keyword">import</span> com.delryn.helloworld.model.User;</span><br><span class="line"><span class="keyword">import</span> com.delryn.helloworld.model.UserLocale;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handles requests for the application home page.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(HomeController.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/resjson&quot;, method = RequestMethod.GET, produces = &quot;application/json&quot;)</span> <span class="comment">// produces = &quot;application/json&quot;을 해줘야 응답 Content-type이 application/json이 됨.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">resJson</span><span class="params">(Locale locale)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> unixTime = System.currentTimeMillis() / <span class="number">1000L</span>;</span><br><span class="line"></span><br><span class="line">UserLocale userLocale = <span class="keyword">new</span> UserLocale();</span><br><span class="line">userLocale.setLocale(locale);</span><br><span class="line">userLocale.setCreateAt(unixTime);</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; scores = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">scores.add(<span class="number">100</span>);</span><br><span class="line">scores.add(<span class="number">30</span>);</span><br><span class="line">scores.add(<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Item&gt; items = <span class="keyword">new</span> ArrayList&lt;Item&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">Item item = <span class="keyword">new</span> Item();</span><br><span class="line">item.setItemId(i + <span class="string">&quot;_id&quot;</span>);</span><br><span class="line">item.setItemAmount(i);</span><br><span class="line">items.add(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GameData gameData = <span class="keyword">new</span> GameData();</span><br><span class="line">gameData.setGameId(<span class="string">&quot;a1&quot;</span>);</span><br><span class="line">gameData.setItem(items);</span><br><span class="line">gameData.setSessionKey(<span class="string">&quot;qrkqkej2l31qeqk&quot;</span>);</span><br><span class="line">gameData.setUserLocale(userLocale);</span><br><span class="line">gameData.setName(<span class="string">&quot;delryn&quot;</span>);</span><br><span class="line">gameData.setScores(scores);</span><br><span class="line"></span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setUserId(<span class="string">&quot;hidelryn&quot;</span>);</span><br><span class="line">user.setPassword(<span class="string">&quot;12345q&quot;</span>);</span><br><span class="line">user.setGameData(gameData);</span><br><span class="line"></span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">String result = mapper.writeValueAsString(user);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1578220977/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-01-05_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_7.42.33_oukrmv.png" alt="응답"></p><p>의도한 대로 나온다. 이제 GET, POST로 오는 데이터를 처리 해보자.</p><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><p>get인 경우 쿼리스트링의 데이터를 받아야 하는데 당연히 스트링이므로 json 파싱을 해줘야 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/reqjson&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reqJson</span><span class="params">(<span class="meta">@RequestParam(value=&quot;data&quot;, required=false)</span> String data)</span> <span class="keyword">throws</span> IOException </span>&#123; <span class="comment">// @RequestParam을 통해 파라미터를 받을 수 있다.</span></span><br><span class="line">ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">User user = objectMapper.readValue(data, User.class);</span><br><span class="line">logger.info(<span class="string">&quot;userId is &#123;&#125;.&quot;</span>, user.getUserId());</span><br><span class="line">logger.info(<span class="string">&quot;password is &#123;&#125;.&quot;</span>, user.getPassword());</span><br><span class="line">logger.info(<span class="string">&quot;gameData - sessionKey is &#123;&#125;.&quot;</span>, user.getGameData().getSessionKey());</span><br><span class="line"><span class="keyword">for</span> (Integer i : user.getGameData().getScores()) &#123;</span><br><span class="line">logger.info(<span class="string">&quot;score is &#123;&#125;.&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Item item : user.getGameData().getItem()) &#123;</span><br><span class="line">logger.info(<span class="string">&quot;itemId is &#123;&#125;, &#123;&#125;. &quot;</span>, item.getItemId(), item.getItemAmount());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>데이터 클래스에 넣어주기만 하면 된다.</p><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><p>post는 파라미터 받는 곳에 데이터 클래스를 적어주니 알아서 들어옴.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/reqjson2&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reqJson2</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> <span class="keyword">throws</span> IOException </span>&#123; <span class="comment">// @RequestBody라는 어노테이션을 적어줘야 함.</span></span><br><span class="line">logger.info(<span class="string">&quot;userId is &#123;&#125;.&quot;</span>, user.getUserId());</span><br><span class="line">logger.info(<span class="string">&quot;password is &#123;&#125;.&quot;</span>, user.getPassword());</span><br><span class="line">logger.info(<span class="string">&quot;gameData - sessionKey is &#123;&#125;.&quot;</span>, user.getGameData().getSessionKey());</span><br><span class="line"><span class="keyword">for</span> (Integer i : user.getGameData().getScores()) &#123;</span><br><span class="line">logger.info(<span class="string">&quot;score is &#123;&#125;.&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Item item : user.getGameData().getItem()) &#123;</span><br><span class="line">logger.info(<span class="string">&quot;itemId is &#123;&#125;, &#123;&#125;. &quot;</span>, item.getItemId(), item.getItemAmount());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 사용해보기</title>
      <link href="/2019/12/20/db-redis/"/>
      <url>/2019/12/20/db-redis/</url>
      
        <content type="html"><![CDATA[<h2 id="redis란"><a href="#redis란" class="headerlink" title="redis란?"></a>redis란?</h2><ul><li>key-value 형식의 NoSQL 데이터 베이스</li><li>일반적인 DB는 디스크에 저장을 하는데 redis는 메모리에 저장을 한다.</li></ul><h2 id="사용하면서-느꼈었던-점"><a href="#사용하면서-느꼈었던-점" class="headerlink" title="사용하면서 느꼈었던 점"></a>사용하면서 느꼈었던 점</h2><ul><li>데이터베이스를 다양하게 다뤄보진 않았지만 내가 다뤄본 거 중에는 읽고/쓰기가 제일 빨랐음</li><li>다양한 데이터 타입이 존재 한다.</li></ul><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><p>Mac의 경우 brew를 통해 설치</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew install redis</span><br><span class="line">brew services start redis</span><br><span class="line">redis-server -v <span class="comment"># 버전 확인</span></span><br></pre></td></tr></table></figure><p>실행할 폴더에서 터미널을 열고 다음의 명령어를 입력 한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm i redis -S <span class="comment"># node.js redis client</span></span><br></pre></td></tr></table></figure><h2 id="redis-데이터-타입"><a href="#redis-데이터-타입" class="headerlink" title="redis 데이터 타입"></a>redis 데이터 타입</h2><p>데이터 타입의 명령어들이 엄청 많기 때문에 전부 쓰기는 불가능 해서 최대한 써 본 위주로 작성</p><h3 id="공통"><a href="#공통" class="headerlink" title="공통"></a>공통</h3><p>redis에 연결하기 위한 코드</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">&#x27;redis&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> redisClient = redis.createClient(<span class="number">6379</span>, <span class="string">&#x27;localhost&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h3><p>key - value를 저장할 수 있는 데이터 타입이다.</p><p>모든 데이터(숫자, 문자, JSON, 기타 등등)를 쓸 수 있으나 읽을 때는 데이터 타입이</p><p>string으로 되어 있다 그래서 타입 이름이 string인가..? 크기는 512MB까지 가능</p><h4 id="set-mset"><a href="#set-mset" class="headerlink" title="set, mset"></a>set, mset</h4><ul><li>set은 하나의 key와 value를 저장을 한다.</li><li>mset은 여러 개의 key, value를 저장할 때 쓴다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redisClient.set(<span class="string">&#x27;key&#x27;</span>, <span class="number">1</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// OK</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">redisClient.mset([<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>], <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123; <span class="comment">// 열 안에 [key, value ...]</span></span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// OK</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="get-mget"><a href="#get-mget" class="headerlink" title="get, mget"></a>get, mget</h4><ul><li>get은 key를 통해 value를 읽는다.</li><li>mget은 여러 개의 key로 value를 읽을 때 사용 한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redisClient.get(<span class="string">&#x27;key&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result, <span class="keyword">typeof</span> result); <span class="comment">// value, string</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">redisClient.mget([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>], <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// [&#x27;1&#x27;, &#x27;2&#x27;]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="del"><a href="#del" class="headerlink" title="del"></a>del</h4><p>key를 삭제 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redisClient.del(<span class="string">&#x27;key&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// 1</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="incrby"><a href="#incrby" class="headerlink" title="incrby"></a>incrby</h4><p>해당 숫자 만큼 증,감소가 진행 된다 이 녀석은 원자성을 지원 한다.</p><p>예로 0인 상태에서 A에서는 숫자를 2를 증가 시키고 B에서는 4를 증가 하라는 게 비슷한 시기에 </p><p>일어났을 때 덮어쓰지 않고 하나 하나씩 처리하여 총 6이 된다.</p><p>그리고 이런 증,감소는 리턴 타입은 숫자로 받는다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redisClient.incrby(<span class="string">&#x27;key&#x27;</span>, <span class="number">2</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result, <span class="keyword">typeof</span> result); <span class="comment">// 2, number</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="setex"><a href="#setex" class="headerlink" title="setex"></a>setex</h4><p>지정한 시간이 지나면 key가 삭제 된다 만료가 필요한 캐시나 세션에 좋은 타입이다.</p><p>단위는 초</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redisClient.setex(<span class="string">&#x27;Session:UserA&#x27;</span>, <span class="number">10</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// OK</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="lists"><a href="#lists" class="headerlink" title="lists"></a>lists</h3><p>list는 자료구조에 나오는 스택, 큐와 같다고 생각 하면 된다.</p><p>리스트에 데이터가 하나도 없을 시 자동으로 삭제가 되고 리스트가 보유할 수 있는 데이터의 개수는</p><p>최대 2<sup>32</sup> - 1 이다.</p><h4 id="lpush"><a href="#lpush" class="headerlink" title="lpush"></a>lpush</h4><p>스택, 큐 처럼 마지막에 삽입 되고 돌아오는 결과 값은 현재 리스트에 포함된 값의 개수</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redisClient.lpush(<span class="string">&#x27;MyList&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// 1</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">redisClient.lpush(<span class="string">&#x27;MyList&#x27;</span>, [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>], <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result);  <span class="comment">// 3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="rpop"><a href="#rpop" class="headerlink" title="rpop"></a>rpop</h4><p>먼저 들어온 데이터를 꺼내고 삭제, 큐를 생각하면 되겠다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redisClient.rpop(<span class="string">&#x27;MyList&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// &#x27;a&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="lpop"><a href="#lpop" class="headerlink" title="lpop"></a>lpop</h4><p>마지막에 들어온 데이터를 꺼내고 삭제, 스택을 생각하면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redisClient.lpop(<span class="string">&#x27;MyList&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// &#x27;d&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="lrange"><a href="#lrange" class="headerlink" title="lrange"></a>lrange</h4><p>인덱스로 범위를 지정해서 리스트를 조회 할 수 있다.</p><p>0, -1로 하면 전체 조회를 하고 인덱스는 제일 마지막 데이터가 0부터 시작 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redisClient.lrange(<span class="string">&#x27;MyList&#x27;</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// &#x27;c&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="sets"><a href="#sets" class="headerlink" title="sets"></a>sets</h3><p>sets은 순서가 없고 똑같은 데이터가 없는 구조이며 하나의 set이 가질 수 있는 데이터의</p><p>최대 개수는 2<sup>32</sup> - 1 이다.</p><h4 id="sadd"><a href="#sadd" class="headerlink" title="sadd"></a>sadd</h4><p>하나 또는 여러 개의 데이터를 삽입할 수 있고 성공 시 리턴은 삽입한 개수다. </p><p>중복된 데이터가 있는 경우에는 0을 받는다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">redisClient.sadd(<span class="string">&#x27;MySet&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// 1</span></span><br><span class="line">  redisClient.sadd(<span class="string">&#x27;MySet&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">// 0</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">redisClient.sadd(<span class="string">&#x27;MySet&#x27;</span>, [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>], <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// 3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="srem"><a href="#srem" class="headerlink" title="srem"></a>srem</h4><p>하나 또는 여러 개의 데이터를 삭제할 수 있고 성공 시 삭제된 개수를 리턴 받는다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redisClient.srem(<span class="string">&#x27;MySet&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// 1</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">redisClient.srem(<span class="string">&#x27;MySet&#x27;</span>, [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// 2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="smembers"><a href="#smembers" class="headerlink" title="smembers"></a>smembers</h4><p>sets에 속한 데이터들을 모두 볼 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redisClient.smembers(<span class="string">&#x27;MySet&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// [&#x27;d&#x27;]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="sunion"><a href="#sunion" class="headerlink" title="sunion"></a>sunion</h4><p>합집합 처럼 여러 sets들의 데이터들을 합쳐서 볼 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redisClient.sunion([<span class="string">&#x27;MySet&#x27;</span>, <span class="string">&#x27;MySet2&#x27;</span>], <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">      &#x27;1&#x27;, &#x27;b&#x27;, &#x27;2&#x27;,</span></span><br><span class="line"><span class="comment">      &#x27;c&#x27;, &#x27;d&#x27;, &#x27;4&#x27;,</span></span><br><span class="line"><span class="comment">      &#x27;3&#x27;</span></span><br><span class="line"><span class="comment">    ]</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="srandmember"><a href="#srandmember" class="headerlink" title="srandmember"></a>srandmember</h4><p>sets의 데이터들 중 랜덤으로 하나 가지고 온다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redisClient.srandmember(<span class="string">&#x27;MySet2&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// 1, 2, 3, 4 중 아무거나 </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="sscan"><a href="#sscan" class="headerlink" title="sscan"></a>sscan</h4><p>데이터가 엄청 큰 sets에서 smembers를 호출 하는 경우 처리 하는 동안 다른 요청에 응답 하질</p><p>않으므로 그럴 경우 sscan을 사용하면 된다고 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sscan = <span class="function">(<span class="params">cursor, arr, cb</span>) =&gt;</span> &#123;</span><br><span class="line">  redisClient.sscan(<span class="string">&#x27;MySet3&#x27;</span>, cursor, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> nextCursor = <span class="built_in">Number</span>(data[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">const</span> result = arr.concat(data[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (nextCursor === <span class="number">0</span>) <span class="keyword">return</span> cb(<span class="literal">null</span>, result);</span><br><span class="line">    <span class="keyword">return</span> sscan(nextCursor, result);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>1000000건이 있는 sets에 재귀로 짜서 돌려봤는데 겁나 느리네…</p><h3 id="sorted-sets"><a href="#sorted-sets" class="headerlink" title="sorted sets"></a>sorted sets</h3><p>정렬된 sets는 점수로 정렬된, 똑같은 데이터가 없는 구조이다.</p><p>쉽게 이해 하자면 하나의 테이블(=key)에 key(=member), value(=score)가 세트로 </p><p>저장이 되는데 value는 숫자만 되고 정렬을 할 수 있다는 의미 한 가지 유의할 점은 정렬 시</p><p>같은 score가 있는 경우에는 이름순으로 정렬 된다.</p><h4 id="zadd"><a href="#zadd" class="headerlink" title="zadd"></a>zadd</h4><p>하나의 member, score를 저장을 하고 성공 시 1을 리턴 하고 중복된 데이터는 0을 리턴 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redisClient.zadd(<span class="string">&#x27;MySt&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;a&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="zincrby"><a href="#zincrby" class="headerlink" title="zincrby"></a>zincrby</h4><p>하나의 member의 score를 원하는 값만큼 증,감소 할 수 있고 리턴은 증,감소된 값이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redisClient.zincrby(<span class="string">&#x27;MySt&#x27;</span>, <span class="number">30</span>, <span class="string">&#x27;a&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// 130</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="zrange-zrevrange"><a href="#zrange-zrevrange" class="headerlink" title="zrange, zrevrange"></a>zrange, zrevrange</h4><p>zrange는 지정한 index의 범위만큼 score가 낮은 순으로 정렬된 member들을 </p><p>조회 할 수 있고 0, -1은 모두 조회이다.</p><p>zrevrange는 zrange와 반대로 score가 높은 순으로 정렬된 member들을 조회 할 수 있다.</p><p>withscores를 추가하면 score도 결과에 나온다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redisClient.zrange(<span class="string">&#x27;MySt&#x27;</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// [a, b]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">redisClient.zrevrange(<span class="string">&#x27;MySt&#x27;</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="string">&#x27;withscores&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// [ &#x27;b&#x27;, &#x27;200&#x27;, &#x27;a&#x27;, &#x27;130&#x27; ]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="zrank-zrevrank"><a href="#zrank-zrevrank" class="headerlink" title="zrank, zrevrank"></a>zrank, zrevrank</h4><p>둘 다 member의 index를 리턴 한다.</p><p>차이점은 zrank는 score가 작은 순으로 0, zrevrank는 score가 큰 순으로 0</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redisClient.zrank(<span class="string">&#x27;MySt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// 0</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">redisClient.zrevrank(<span class="string">&#x27;MySt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// 1</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="zscore"><a href="#zscore" class="headerlink" title="zscore"></a>zscore</h4><p>member의 score를 리턴 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redisClient.zscore(<span class="string">&#x27;MySt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// 130, 타입은 문자형이다 숫자 아님..</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="zrem"><a href="#zrem" class="headerlink" title="zrem"></a>zrem</h4><p>데이터를 삭제 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redisClient.zrem(<span class="string">&#x27;MySt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// 1</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="zscan"><a href="#zscan" class="headerlink" title="zscan"></a>zscan</h4><p>zscan도 sscan과 비슷한 용도</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redisClient.zscan(<span class="string">&#x27;MySt&#x27;</span>, <span class="number">0</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="hashes"><a href="#hashes" class="headerlink" title="hashes"></a>hashes</h3><p>hashes는 하나의 key에 여러개 field, value를 저장 할 수 있는 구조</p><h4 id="hset-hmset"><a href="#hset-hmset" class="headerlink" title="hset, hmset"></a>hset, hmset</h4><ul><li>hset은 하나의 field, value를 삽입</li><li>hmset은 여러개의 field, value를 삽입</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redisClient.hset(<span class="string">&#x27;MyHash&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// 1</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">redisClient.hmset(<span class="string">&#x27;MyHash&#x27;</span>, [<span class="string">&#x27;b&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;c&#x27;</span>, <span class="number">2</span>], <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// OK</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="hget-hmget"><a href="#hget-hmget" class="headerlink" title="hget, hmget"></a>hget, hmget</h4><ul><li>hget은 하나의 field로 조회 해서 value를 가지고 온다.</li><li>hmget은 여러 개의 field로 조회를 해서 여러 value를 가지고 온다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redisClient.hget(<span class="string">&#x27;MyHash&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// 1</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">redisClient.hmget(<span class="string">&#x27;MyHash&#x27;</span>, [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>], <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// [&#x27;1&#x27;, &#x27;2&#x27;]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="hdel"><a href="#hdel" class="headerlink" title="hdel"></a>hdel</h4><p>필드를 삭제 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redisClient.hdel(<span class="string">&#x27;MyHash&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// 1</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="hgetall"><a href="#hgetall" class="headerlink" title="hgetall"></a>hgetall</h4><p>해당 key의 모든 field, value를 가지고 온다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redisClient.hgetall(<span class="string">&#x27;MyHash&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// &#123; a: &#x27;1&#x27;, b: &#x27;1&#x27; &#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="hscan"><a href="#hscan" class="headerlink" title="hscan"></a>hscan</h4><p>scan 시리즈들은 모두 동일</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redisClient.hscan(<span class="string">&#x27;MyHash&#x27;</span>, <span class="number">0</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// [ &#x27;0&#x27;, [ &#x27;a&#x27;, &#x27;1&#x27;, &#x27;b&#x27;, &#x27;1&#x27; ] ]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="hyperloglog"><a href="#hyperloglog" class="headerlink" title="hyperloglog"></a>hyperloglog</h3><p>hyperloglog는 해당 key의 데이터 개수를 구하기 위한 처음 보는 구조다.</p><p>장점은 하나의 key당 아주 작은 메모리(최대12KB)를 사용하고 단점은 이게 100% 정확도를</p><p>보장하지 않는다고 한다 표준오차는 0.81%인데(그럼 99%는 맞는다는 소리네..) 사용 예는</p><p>해당 사이트나 게임에 고유 방문자 수 같은 케이스</p><h4 id="pfadd"><a href="#pfadd" class="headerlink" title="pfadd"></a>pfadd</h4><p>키에 하나의 데이터 또는 여러 데이터를 삽입할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redisClient.pfadd(<span class="string">&#x27;visit:2020-01-01&#x27;</span>, [<span class="string">&#x27;user1&#x27;</span>, <span class="string">&#x27;user2&#x27;</span>, <span class="string">&#x27;user3&#x27;</span>, <span class="string">&#x27;user4&#x27;</span>], <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">redisClient.pfadd(<span class="string">&#x27;visit:2020-01-02&#x27;</span>, <span class="string">&#x27;user4&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="pfcount"><a href="#pfcount" class="headerlink" title="pfcount"></a>pfcount</h4><p>하나의 키 또는 여러 키의 개수를 받을 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redisClient.pfcount(<span class="string">&#x27;visit:2020-01-02&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// 4</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">redisClient.pfcount([<span class="string">&#x27;visit:2020-01-02&#x27;</span>, <span class="string">&#x27;visit:2020-01-01&#x27;</span>], <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// user4가 공통으로 들어가있기 때문에 4</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="그-외-커맨드"><a href="#그-외-커맨드" class="headerlink" title="그 외 커맨드"></a>그 외 커맨드</h2><h3 id="pub-sub"><a href="#pub-sub" class="headerlink" title="pub/sub"></a>pub/sub</h3><p>publish(발송) / subscribe(구독)의 약자</p><p>메세지를 주고 받는 기능, 주의해야 할 점은 구독중인 경우 다른 redis의 명령어를 사용 불가</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// publish.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">&#x27;redis&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> redisClient = redis.createClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> channel = <span class="string">&#x27;MyChannel&#x27;</span>;</span><br><span class="line"></span><br><span class="line">redisClient.publish(channel, <span class="string">&#x27;Hi!&#x27;</span>, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// subscribe.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">&#x27;redis&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> redisClient = redis.createClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> channel = <span class="string">&#x27;MyChannel&#x27;</span>;</span><br><span class="line"></span><br><span class="line">redisClient.subscribe(channel);</span><br><span class="line"></span><br><span class="line">redisClient.on(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">channel, message</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;channel&#x27;</span>, channel, <span class="string">&#x27;message&#x27;</span>, message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// redisClient.get(&#x27;qewqw&#x27;, (e, d) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(e); // 구독중이므로 에러가 뜬다.</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br></pre></td></tr></table></figure><p>subscribe.js를 실행을 하면 채널(MyChannel)을 구독 중이고  </p><p>publish.js를 실행을 하게 되면 내가 작성한 메세지가 채널(MyChannel)에 보내게 되고</p><p>subscribe.js는 구독중이므로 publish.js에서 보낸 메세지를 계속 출력을 한다.</p><h3 id="트랜잭션"><a href="#트랜잭션" class="headerlink" title="트랜잭션"></a>트랜잭션</h3><p>redis에서 순차적 실행할 수 있는 커맨드를 지원을 한다.</p><p>그러나 중간에 에러가 나도 롤백이 안 되고 다음으로 넘어감…</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multi = redisClient.multi();</span><br><span class="line"></span><br><span class="line">multi.set(<span class="string">&#x27;tr&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">multi.setbit(<span class="string">&#x27;bbb&#x27;</span>, <span class="string">&#x27;bb&#x27;</span>, <span class="number">2</span>); <span class="comment">// 에러 나는 부분</span></span><br><span class="line">multi.incrby(<span class="string">&#x27;tr&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">multi.exec(<span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="built_in">console</span>.log(err); <span class="comment">// 에러가 찍힘</span></span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>그러나 실제로 들어 가서 보면 tr이 3이 되어 있음</p><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><p>watch를 선언한 key를 트랜잭션을 쓸려고 했을 때 외부에서 값을 변경하게 되는 경우</p><p>트랜잭션을 실행하지 않는다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redisClient.watch(<span class="string">&#x27;tt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> multi = redisClient.multi();</span><br><span class="line"></span><br><span class="line">multi.incrby(<span class="string">&#x27;tt&#x27;</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">redisClient.incrby(<span class="string">&#x27;tt&#x27;</span>, <span class="number">10</span>); <span class="comment">// multi를 실행 하기 전에 10을 올림</span></span><br><span class="line"></span><br><span class="line">multi.exec(<span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>실제 tt의 value를 보면 10으로 되어 있다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="http://www.acornpub.co.kr/book/redis-essentials">Redis 핵심 정리</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS DynamoDB 사용해보기</title>
      <link href="/2019/12/17/db-aws-dynamodb/"/>
      <url>/2019/12/17/db-aws-dynamodb/</url>
      
        <content type="html"><![CDATA[<h2 id="DynamoDB란"><a href="#DynamoDB란" class="headerlink" title="DynamoDB란?"></a>DynamoDB란?</h2><p>AWS에서 개발한 key-value형 NoSQL 데이터베이스</p><h2 id="사용하면서-느꼈었던-장점"><a href="#사용하면서-느꼈었던-장점" class="headerlink" title="사용하면서 느꼈었던 장점"></a>사용하면서 느꼈었던 장점</h2><ul><li>별도로 설치나 버전 관리 등을 할 일이 없어서 편리 했었다.</li><li>저장 공간 용량이 제한이 없기 때문에 신경 안 썼었다.</li><li>사용량 만큼 요금이 부과 된다.</li></ul><h2 id="사용하면서-느꼈었던-단점"><a href="#사용하면서-느꼈었던-단점" class="headerlink" title="사용하면서 느꼈었던 단점"></a>사용하면서 느꼈었던 단점</h2><ul><li>여러 데이터를 삽입할 때 (bulk insert) 개수 제한이 있어서 조금 불편 했었다.</li><li>보조 인덱스 생성 시 데이터 수가 많지 않은데 꽤 느린 편이다.</li></ul><h2 id="테이블"><a href="#테이블" class="headerlink" title="테이블"></a>테이블</h2><p>DynamoDB를 사용 하기전에 테이블이 존재 하기 때문에 생성을 해 줘야 한다.</p><p>웹 콘솔 기준 테이블 작성 시 나오는 항목을 아는 대로 정리를 해 본다.</p><p>테이블은 한 번 만들면 수정이 안 되므로 어떤 데이터를 다룰지에 따라 구성이 다르기 때문에</p><p>신중히 생각을 한 다음 만들어야 한다.</p><h3 id="테이블-이름"><a href="#테이블-이름" class="headerlink" title="테이블 이름"></a>테이블 이름</h3><p>말 그대로 해당 테이블의 이름을 작성 해야 한다.</p><p>테이블명은 해당 리전에서는 중복된 이름으로는 만들 수 없기 때문에 고유해야 한다.</p><p>예료 서울 리전에서 users란 테이블을 생성 시 서울에서는 user란 테이블을 새로 못 만든다.</p><p>서울 리전에서 users가 있지만 다른 리전(도쿄)같은 경우에는 users 테이블 생성 가능</p><h3 id="기본-키-파티션-키"><a href="#기본-키-파티션-키" class="headerlink" title="기본 키 (파티션 키)"></a>기본 키 (파티션 키)</h3><p>DynamoDB는 key-value의 구조다.</p><p>기본 키는 key에 해당 하기 때문에 고유한 데이터가 들어올 항목으로 만들어야 한다.</p><p>데이터를 삽입 할 때 필수적으로 들어 가야 한다.</p><p>예로 이전에 쓰던 서비스에서는 유저 테이블을 생성 시 기본 키는 user_id로 만들었었다.</p><h3 id="정렬-키"><a href="#정렬-키" class="headerlink" title="정렬 키"></a>정렬 키</h3><p>정렬 키는 어떠한 데이터를 다룰 지에 따라 선택 / 미선택을 하면 된다.</p><p>내가 느끼기엔 second key 같은 느낌인데 예로 유저의 행동을 모두 기록하는 테이블을 생성 시</p><p>기본 키만 생성한 경우에는 user_id가 a의 행동은 1회만 삽입을 할 수 있다.</p><p>왜냐면 다음 번 삽입 시 user_id에 a가 등록되어 있기 때문이다.</p><p>이러한 경우에 정렬 키를 추가하여 사용하면 가능 한데 예로 정렬 키를 timestamp로 만들어서</p><p>삽입을 하면 아래의 테이블처럼 사용을 할 수 있게 된다.</p><table><thead><tr><th>user_id(기본 키)</th><th>timestamp(정렬 키)</th><th>action</th></tr></thead><tbody><tr><td>a</td><td>1</td><td>‘login’</td></tr><tr><td>a</td><td>2</td><td>‘logout’</td></tr></tbody></table><p>대신 정렬 키를 추가 하게 되면 이후 삽입, 조회, 삭제 요청 시 정렬 키의 데이터를 필수적으로</p><p>넣어야 한다. 그러므로 꼭 필요한 경우에만 구성에 포함 하자.</p><h3 id="보조-인덱스"><a href="#보조-인덱스" class="headerlink" title="보조 인덱스"></a>보조 인덱스</h3><p>key-value 구조이기 때문에 기본적으로 조회 시 기본 키 또는 기본 + 정렬 키로만 검색이</p><p>가능한데 예로 아래의 테이블에서 유저의 login한 액션만 조회를 하고 싶을 때 </p><p>보조 인덱스를 추가해서 이용을 하면 된다.</p><table><thead><tr><th>user_id(기본 키)</th><th>timestamp(정렬 키)</th><th>action</th></tr></thead><tbody><tr><td>a</td><td>1</td><td>‘login’</td></tr><tr><td>a</td><td>2</td><td>‘logout’</td></tr><tr><td>b</td><td>3</td><td>‘login’</td></tr></tbody></table><p>보조 인덱스도 마찬가지로 기본 키 그리고 선택 사항으로 정렬 키를 추가할 수 있다.</p><h3 id="읽기-쓰기-용량-모드"><a href="#읽기-쓰기-용량-모드" class="headerlink" title="읽기/쓰기 용량 모드"></a>읽기/쓰기 용량 모드</h3><p>읽기 용량 / 쓰기 용량 설정에 따라 사용 가격의 구성이 정해 진다.</p><p>이 용량은 사용 회수라 생각을 하고 설정을 했었다. 유저가 많아져서 사용자가 많아 지면</p><p>훅 올라가고, 사용자가 떨어 지면 자연스레 내려가고…</p><p>읽기 용량은 올려도 가격이 많이 변화가 없는데 쓰기 용량은 좀 만 올려도 가격이 뻥튀기 된다.</p><p>처음 DynamoDB 사용할 땐 온디멘드 모드가 없어서 용량 크기에 좀 불안 했었는데</p><p>추가가 되어서 서비스 때 변경을 했었다. 온디멘드 최고!</p><h3 id="오토스케일링"><a href="#오토스케일링" class="headerlink" title="오토스케일링"></a>오토스케일링</h3><p>사용 수가 많아지면 설정에 따라 알아서 늘어나고 하는데 이 부분은 크게 신경을 안 써봤다.</p><p>온디멘드라면 건드릴 일도 없으니 패스</p><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><p>Node.js로 진행해보겠다.</p><p>해당 프로젝트 폴더에서 npm을 통해 aws-sdk를 다운 받는다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i aws-sdk -S</span><br></pre></td></tr></table></figure><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><h4 id="Put"><a href="#Put" class="headerlink" title="Put"></a>Put</h4><p>하나의 row를 삽입 할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;ap-northeast-2&#x27;</span>, <span class="comment">// 서울 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;IAM 엑세스 키&#x27;</span>,</span><br><span class="line">  secretAccessKey: <span class="string">&#x27;IAM 시크릿 엑세스 키&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamo = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  TableName: <span class="string">&#x27;users&#x27;</span>, <span class="comment">// 테이블명</span></span><br><span class="line">  Item: &#123;</span><br><span class="line">    user_id: <span class="string">&#x27;a&#x27;</span>, <span class="comment">// 기본 키</span></span><br><span class="line">    ts: <span class="built_in">Date</span>.now(), <span class="comment">// 정렬 키, 존재 하지 않으면 생략 가능</span></span><br><span class="line">    action: <span class="string">&#x27;login&#x27;</span>, <span class="comment">// 이후로는 추가하고 싶은 데이터들</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dynamo.put(params).promise().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// &#123;&#125; 삽입 성공 시 넘어오는 데이터 X</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="BatchWrite"><a href="#BatchWrite" class="headerlink" title="BatchWrite"></a>BatchWrite</h4><p>한 번에 row를 여러 개 넣을 수 있는 방법, 그러나 25개 이하만 가능 하다..</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;ap-northeast-2&#x27;</span>, <span class="comment">// 서울 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;IAM 엑세스 키&#x27;</span>,</span><br><span class="line">  secretAccessKey: <span class="string">&#x27;IAM 시크릿 엑세스 키&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamo = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  RequestItems: &#123;</span><br><span class="line">    users: [ <span class="comment">// 배열의 이름은 테이블명이다.</span></span><br><span class="line">      &#123;</span><br><span class="line">        PutRequest: &#123;</span><br><span class="line">          Item: &#123; <span class="comment">// put과 마찬가지로 기본 키, 정렬 키, 이하 추가하고 싶은 항목</span></span><br><span class="line">            user_id: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">            ts: <span class="built_in">Date</span>.now(),</span><br><span class="line">            action: <span class="string">&#x27;logout&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        PutRequest: &#123;</span><br><span class="line">          Item: &#123;</span><br><span class="line">            user_id: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">            ts: <span class="built_in">Date</span>.now(),</span><br><span class="line">            action: <span class="string">&#x27;charge&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        PutRequest: &#123;</span><br><span class="line">          Item: &#123;</span><br><span class="line">            user_id: <span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">            ts: <span class="built_in">Date</span>.now(),</span><br><span class="line">            action: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dynamo.batchWrite(params).promise().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// &#123; UnprocessedItems: &#123;&#125; &#125;</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h3><h4 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h4><p>하나의 row를 가지고 온다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;ap-northeast-2&#x27;</span>, <span class="comment">// 서울 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;IAM 엑세스 키&#x27;</span>,</span><br><span class="line">  secretAccessKey: <span class="string">&#x27;IAM 시크릿 엑세스 키&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamo = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  TableName: <span class="string">&#x27;users&#x27;</span>, <span class="comment">// 테이블명</span></span><br><span class="line">  Key: &#123;</span><br><span class="line">    user_id: <span class="string">&#x27;a&#x27;</span>, <span class="comment">// 기본 키</span></span><br><span class="line">    ts: <span class="number">1597722895588</span>, <span class="comment">// 정렬 키, 존재 하지 않으면 생략 가능</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dynamo.get(params).promise().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    &#123; Item: &#123; ts: 1597722895588, user_id: &#x27;a&#x27;, action: &#x27;login&#x27; &#125; &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    데이터가 존재 하지 않을 시에는 &#123;&#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="BatchGet"><a href="#BatchGet" class="headerlink" title="BatchGet"></a>BatchGet</h4><p>한 번에 여러 row를 가지고 올 수 있는 방법, 이 역시 개수 제한 100개다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;ap-northeast-2&#x27;</span>, <span class="comment">// 서울 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;IAM 엑세스 키&#x27;</span>,</span><br><span class="line">  secretAccessKey: <span class="string">&#x27;IAM 시크릿 엑세스 키&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamo = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  RequestItems: &#123;</span><br><span class="line">    users: &#123; <span class="comment">// 테이블명</span></span><br><span class="line">      Keys: [</span><br><span class="line">        &#123;</span><br><span class="line">          user_id: <span class="string">&#x27;a&#x27;</span>, <span class="comment">// 기본 키</span></span><br><span class="line">          ts: <span class="number">1597722895588</span>, <span class="comment">// 정렬 키, 없으면 생략 가능</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          user_id: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">          ts: <span class="number">1597723408876</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dynamo.batchGet(params).promise().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    하나 라도 데이터가 존재 시</span></span><br><span class="line"><span class="comment">    &#123; Responses: &#123; users: [ [Object], [Object] ] &#125;, UnprocessedKeys: &#123;&#125; &#125;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    모두 없을 시</span></span><br><span class="line"><span class="comment">    &#123; Responses: &#123; users: [] &#125;, UnprocessedKeys: &#123;&#125; &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h4><p>조건을 넣어서 검색을 할 수 있다.</p><p>기본 키의 경우에는 equal(=)만 되고 정렬 키가 있는 경우 부등호(&gt;, &gt;= 등등)가 가능 하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;ap-northeast-2&#x27;</span>, <span class="comment">// 서울 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;IAM 엑세스 키&#x27;</span>,</span><br><span class="line">  secretAccessKey: <span class="string">&#x27;IAM 시크릿 엑세스 키&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamo = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  TableName: <span class="string">&#x27;users&#x27;</span>, <span class="comment">// 테이블명</span></span><br><span class="line">  KeyConditionExpression: <span class="string">&#x27;#x = :x and #y &gt; :y&#x27;</span>, <span class="comment">// 조건문</span></span><br><span class="line">  ExpressionAttributeNames: &#123; <span class="comment">// #은 키의 alias라 생각하면 됨.</span></span><br><span class="line">    <span class="string">&#x27;#x&#x27;</span>: <span class="string">&#x27;user_id&#x27;</span>, <span class="comment">// x는 user_id</span></span><br><span class="line">    <span class="string">&#x27;#y&#x27;</span>: <span class="string">&#x27;ts&#x27;</span>, <span class="comment">// y는 타임스탬프</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ExpressionAttributeValues: &#123; <span class="comment">// :은 값의 alias</span></span><br><span class="line">    <span class="string">&#x27;:x&#x27;</span>: <span class="string">&#x27;a&#x27;</span>, <span class="comment">// 검색할 user_id</span></span><br><span class="line">    <span class="string">&#x27;:y&#x27;</span>: <span class="number">10000</span>, <span class="comment">// 검색할 ts</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dynamo.query(params).promise().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    데이터가 1개라도 있을 시에는</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      Items: [</span></span><br><span class="line"><span class="comment">        &#123; ts: 1597722895588, user_id: &#x27;a&#x27;, action: &#x27;login&#x27; &#125;,</span></span><br><span class="line"><span class="comment">        &#123; ts: 1597723408876, user_id: &#x27;a&#x27;, action: &#x27;charge&#x27; &#125;</span></span><br><span class="line"><span class="comment">      ],</span></span><br><span class="line"><span class="comment">      Count: 2,</span></span><br><span class="line"><span class="comment">      ScannedCount: 2</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    존재 하지 않을 시에는</span></span><br><span class="line"><span class="comment">    &#123; Items: [], Count: 0, ScannedCount: 0 &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="보조인덱스를-이용한-쿼리"><a href="#보조인덱스를-이용한-쿼리" class="headerlink" title="보조인덱스를 이용한 쿼리"></a>보조인덱스를 이용한 쿼리</h4><p>위에 적은 거 처럼 action을 보조 인덱스로 만들어서 검색을 해 본다.</p><p>기본 키는 action 정렬 키는 생략 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;ap-northeast-2&#x27;</span>, <span class="comment">// 서울 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;IAM 엑세스 키&#x27;</span>,</span><br><span class="line">  secretAccessKey: <span class="string">&#x27;IAM 시크릿 엑세스 키&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamo = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  TableName: <span class="string">&#x27;users&#x27;</span>, <span class="comment">// 테이블명</span></span><br><span class="line">  IndexName: <span class="string">&#x27;action-index&#x27;</span>, <span class="comment">// 보조 인덱스명</span></span><br><span class="line">  KeyConditionExpression: <span class="string">&#x27;#x = :x&#x27;</span>, <span class="comment">// 조건문</span></span><br><span class="line">  ExpressionAttributeNames: &#123; <span class="comment">// #은 키의 alias라 생각하면 됨.</span></span><br><span class="line">    <span class="string">&#x27;#x&#x27;</span>: <span class="string">&#x27;action&#x27;</span>, <span class="comment">// x는 action</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ExpressionAttributeValues: &#123; <span class="comment">// :은 값의 alias</span></span><br><span class="line">    <span class="string">&#x27;:x&#x27;</span>: <span class="string">&#x27;login&#x27;</span>, <span class="comment">// 검색할 action</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dynamo.query(params).promise().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      Items: [</span></span><br><span class="line"><span class="comment">        &#123; ts: 1597723408876, action: &#x27;login&#x27;, user_id: &#x27;d&#x27; &#125;,</span></span><br><span class="line"><span class="comment">        &#123; ts: 1597727204965, action: &#x27;login&#x27;, user_id: &#x27;z&#x27; &#125;</span></span><br><span class="line"><span class="comment">      ],</span></span><br><span class="line"><span class="comment">      Count: 2,</span></span><br><span class="line"><span class="comment">      ScannedCount: 2</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h4><p>데이터를 모두 검색 할 수 있는 방법 혹여나 해서 Filter는 검색하기 위한 조건이 아닌</p><p>모든 데이터를 읽은 후에 조건대로 걸러지는 것이기 때문에 검색 속도와는 전혀 상관이 없다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;ap-northeast-2&#x27;</span>, <span class="comment">// 서울 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;IAM 엑세스 키&#x27;</span>,</span><br><span class="line">  secretAccessKey: <span class="string">&#x27;IAM 시크릿 엑세스 키&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamo = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  TableName: <span class="string">&#x27;users&#x27;</span>, <span class="comment">// 테이블명, 이하 모든 프로퍼티는 생략 가능</span></span><br><span class="line">  <span class="comment">// Limit: 100, // 개수 제한</span></span><br><span class="line">  <span class="comment">// FilterExpression: &#x27;#action = :action&#x27;, // 필터링</span></span><br><span class="line">  <span class="comment">// ExpressionAttributeNames: &#123;</span></span><br><span class="line">  <span class="comment">//   &#x27;#action&#x27;: &#x27;action&#x27;</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">  <span class="comment">// ExpressionAttributeValues: &#123;</span></span><br><span class="line">  <span class="comment">//   &#x27;:action&#x27;: &#x27;login&#x27;</span></span><br><span class="line">  <span class="comment">// &#125;,</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dynamo.scan(params).promise().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      Items: [</span></span><br><span class="line"><span class="comment">        &#123; ts: 1597723408876, user_id: &#x27;b&#x27;, action: &#x27;logout&#x27; &#125;,</span></span><br><span class="line"><span class="comment">        &#123; ts: 1597723408876, user_id: &#x27;d&#x27;, action: &#x27;login&#x27; &#125;,</span></span><br><span class="line"><span class="comment">        &#123; ts: 1597722895588, user_id: &#x27;a&#x27;, action: &#x27;login&#x27; &#125;,</span></span><br><span class="line"><span class="comment">        &#123; ts: 1597723408876, user_id: &#x27;a&#x27;, action: &#x27;charge&#x27; &#125;</span></span><br><span class="line"><span class="comment">      ],</span></span><br><span class="line"><span class="comment">      Count: 4,</span></span><br><span class="line"><span class="comment">      ScannedCount: 4</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>데이터를 수정하는 방법, 기본 키와 정렬 키를 제외한 항목만 수정이 가능 하다.</p><p>UpdateExpression 설정에 따라 조금 다르다.</p><h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><p>흔히 쓰는 기존의 X 값을 Y 값으로 변경할 때 쓴다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;ap-northeast-2&#x27;</span>, <span class="comment">// 서울 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;IAM 엑세스 키&#x27;</span>,</span><br><span class="line">  secretAccessKey: <span class="string">&#x27;IAM 시크릿 엑세스 키&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamo = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  TableName: <span class="string">&#x27;users&#x27;</span>, <span class="comment">// 테이블명</span></span><br><span class="line">  Key: &#123; <span class="comment">// 기본 키, 정렬 키(미선택 시 생략 가능)</span></span><br><span class="line">    user_id: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    ts: <span class="number">1597723408876</span></span><br><span class="line">  &#125;,</span><br><span class="line">  UpdateExpression: <span class="string">&#x27;set #x = :x&#x27;</span>, <span class="comment">// 수정할 항목 alias</span></span><br><span class="line">  ExpressionAttributeNames: &#123;</span><br><span class="line">    <span class="string">&#x27;#x&#x27;</span>: <span class="string">&#x27;action&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ExpressionAttributeValues: &#123;</span><br><span class="line">    <span class="string">&#x27;:x&#x27;</span>: <span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ReturnValues: <span class="string">&#x27;ALL_NEW&#x27;</span>, <span class="comment">// 수정한 데이터 받아오기, 생략 가능</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dynamo.update(params).promise().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// &#123; Attributes: &#123; ts: 1597723408876, action: 10, user_id: &#x27;a&#x27; &#125; &#125;</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h5><p>수정할 항목이 숫자 값이고 N만큼 증가시킬 필요가 있을 때 사용 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;ap-northeast-2&#x27;</span>, <span class="comment">// 서울 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;IAM 엑세스 키&#x27;</span>,</span><br><span class="line">  secretAccessKey: <span class="string">&#x27;IAM 시크릿 엑세스 키&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamo = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  TableName: <span class="string">&#x27;users&#x27;</span>, <span class="comment">// 테이블명</span></span><br><span class="line">  Key: &#123; <span class="comment">// 기본 키, 정렬 키(미선택 시 생략 가능)</span></span><br><span class="line">    user_id: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    ts: <span class="number">1597723408876</span></span><br><span class="line">  &#125;,</span><br><span class="line">  UpdateExpression: <span class="string">&#x27;add #x :x&#x27;</span>, <span class="comment">// 수정할 항목 alias</span></span><br><span class="line">  ExpressionAttributeNames: &#123;</span><br><span class="line">    <span class="string">&#x27;#x&#x27;</span>: <span class="string">&#x27;action&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ExpressionAttributeValues: &#123;</span><br><span class="line">    <span class="string">&#x27;:x&#x27;</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ReturnValues: <span class="string">&#x27;ALL_NEW&#x27;</span>, <span class="comment">// 업데이트한 데이터 받아오기, 생략 가능</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dynamo.update(params).promise().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// &#123; Attributes: &#123; ts: 1597723408876, action: 11, user_id: &#x27;a&#x27; &#125; &#125;</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="Remove"><a href="#Remove" class="headerlink" title="Remove"></a>Remove</h5><p>특정 항목을 삭제할 때 사용한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;ap-northeast-2&#x27;</span>, <span class="comment">// 서울 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;IAM 엑세스 키&#x27;</span>,</span><br><span class="line">  secretAccessKey: <span class="string">&#x27;IAM 시크릿 엑세스 키&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamo = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  TableName: <span class="string">&#x27;users&#x27;</span>, <span class="comment">// 테이블명</span></span><br><span class="line">  Key: &#123; <span class="comment">// 기본 키, 정렬 키(미선택 시 생략 가능)</span></span><br><span class="line">    user_id: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    ts: <span class="number">1597723408876</span></span><br><span class="line">  &#125;,</span><br><span class="line">  UpdateExpression: <span class="string">&#x27;remove #x&#x27;</span>, <span class="comment">// 수정할 항목 alias</span></span><br><span class="line">  ExpressionAttributeNames: &#123;</span><br><span class="line">    <span class="string">&#x27;#x&#x27;</span>: <span class="string">&#x27;action&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ReturnValues: <span class="string">&#x27;ALL_NEW&#x27;</span>, <span class="comment">// 업데이트한 데이터 받아오기, 생략 가능</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dynamo.update(params).promise().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// &#123; Attributes: &#123; ts: 1597723408876, user_id: &#x27;a&#x27; &#125; &#125;</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><h4 id="Delete-1"><a href="#Delete-1" class="headerlink" title="Delete"></a>Delete</h4><p>하나의 row를 삭제할 때 쓴다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;ap-northeast-2&#x27;</span>, <span class="comment">// 서울 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;IAM 엑세스 키&#x27;</span>,</span><br><span class="line">  secretAccessKey: <span class="string">&#x27;IAM 시크릿 엑세스 키&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamo = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  TableName: <span class="string">&#x27;users&#x27;</span>, <span class="comment">// 테이블명</span></span><br><span class="line">  Key: &#123; <span class="comment">// 기본 키, 정렬 키(미선택 시 생략 가능)</span></span><br><span class="line">    user_id: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    ts: <span class="number">1597723408876</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dynamo.delete(params).promise().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// &#123;&#125;</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="BatchWrite-1"><a href="#BatchWrite-1" class="headerlink" title="BatchWrite"></a>BatchWrite</h4><p>한 번에 여러 row를 삭제하는 방법, 마찬가지로 개수 제한 25개</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;ap-northeast-2&#x27;</span>, <span class="comment">// 서울 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;IAM 엑세스 키&#x27;</span>,</span><br><span class="line">  secretAccessKey: <span class="string">&#x27;IAM 시크릿 엑세스 키&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamo = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  RequestItems: &#123;</span><br><span class="line">    users: [ <span class="comment">// 테이블명</span></span><br><span class="line">      &#123;</span><br><span class="line">        DeleteRequest: &#123; <span class="comment">// 이 부분이 여러 개 삽입할 때와 다르다</span></span><br><span class="line">          Key: &#123;</span><br><span class="line">            user_id: <span class="string">&#x27;a&#x27;</span>, <span class="comment">// 기본 키</span></span><br><span class="line">            ts: <span class="number">1597722895588</span>, <span class="comment">// 정렬 키, 없으면 생략 가능</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        DeleteRequest: &#123;</span><br><span class="line">          Key: &#123;</span><br><span class="line">            user_id: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">            ts: <span class="number">1597723408876</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dynamo.batchWrite(params).promise().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="트랜잭션"><a href="#트랜잭션" class="headerlink" title="트랜잭션"></a>트랜잭션</h2><p>DynamoDB를 처음 사용 했을 때는 못 봤었는데 얼마 안 되어서 추가가 되었다.</p><p>실무에서는 써 보진 않음…😅</p><p>TransactGetItems, TransactWriteItems 2 가지가 존재 하는데</p><p>전자는 읽기 관련 트랜잭션, 후자는 쓰기, 수정, 삭제와 관련된 트랜잭션을 걸 수 있다.</p><h3 id="TransactGetItems"><a href="#TransactGetItems" class="headerlink" title="TransactGetItems"></a>TransactGetItems</h3><p>유저 테이블에서 유저 정보를 읽어 온 후 유저가 보유한 아이템 테이블을 읽어보려 한다.</p><p>유저 테이블에서는 user_id가 문자열인데 현재 데이터 타입이 숫자라서 다르기 때문에 </p><p>2번째는 실행이 되질 않고 트랜잭션 실패라는 에러를 볼 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;ap-northeast-2&#x27;</span>, <span class="comment">// 서울 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;IAM 엑세스 키&#x27;</span>,</span><br><span class="line">  secretAccessKey: <span class="string">&#x27;IAM 시크릿 엑세스 키&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamo = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getParams = &#123;</span><br><span class="line">  TransactItems: [</span><br><span class="line">    &#123;</span><br><span class="line">      Get: &#123;</span><br><span class="line">        TableName: <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">        Key: &#123;</span><br><span class="line">          user_id: <span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      Get: &#123;</span><br><span class="line">        TableName: <span class="string">&#x27;items&#x27;</span>,</span><br><span class="line">        Key: &#123;</span><br><span class="line">          user_id: <span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dynamo.transactGet(getParams).promise().then(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(r, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    TransactionCanceledException: Transaction cancelled, please refer cancellation reasons for specific reasons [None, ValidationError]</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="TransactWriteItems"><a href="#TransactWriteItems" class="headerlink" title="TransactWriteItems"></a>TransactWriteItems</h3><p>가입 시 유저 정보를 기록 하고 아이템 테이블에 초기 값으로 포션을 지급하려 한다.</p><p>위와 마찬가지로 유저 테이블에서는 user_id가 문자열인데 현재 데이터 타입이 숫자라서 </p><p>다르기 때문에 2번째는 실행이 되질 않고 트랜잭션 실패라는 에러를 볼 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;ap-northeast-2&#x27;</span>, <span class="comment">// 서울 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;IAM 엑세스 키&#x27;</span>,</span><br><span class="line">  secretAccessKey: <span class="string">&#x27;IAM 시크릿 엑세스 키&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamo = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  TransactItems: [</span><br><span class="line">    &#123;</span><br><span class="line">      Put: &#123;</span><br><span class="line">        TableName: <span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">        Item: &#123;</span><br><span class="line">          user_id: <span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      Put: &#123;</span><br><span class="line">        TableName: <span class="string">&#x27;items&#x27;</span>,</span><br><span class="line">        Item: &#123;</span><br><span class="line">          user_id: <span class="number">1</span>,</span><br><span class="line">          potion: <span class="number">10</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dynamo.transactWrite(params).promise().then(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(r);</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html">DynamoDB doc</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> NoSQL </tag>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>맥 숨김 폴더 보는 단축키</title>
      <link href="/2019/12/08/etc-mac-hidden/"/>
      <url>/2019/12/08/etc-mac-hidden/</url>
      
        <content type="html"><![CDATA[<p>Command + Shift + .(점[dot])</p>]]></content>
      
      
      
        <tags>
            
            <tag> ETC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Artillery를 이용한 부하 테스트</title>
      <link href="/2019/10/27/etc-loadtest-artillery/"/>
      <url>/2019/10/27/etc-loadtest-artillery/</url>
      
        <content type="html"><![CDATA[<h2 id="부하-테스트"><a href="#부하-테스트" class="headerlink" title="부하 테스트"></a>부하 테스트</h2><p>예로 내가 어떤 게임 서버를 만들었는데 아마도 유저가 최대 얼마 정도 접속 해서 API를</p><p>호출 하지 않을까? 예상해서 가상의 유저를 생성하여 API를 계속 호출해서 서버가 어떤 상태가 </p><p>되는지 확인을 하는 것을 부하 테스트라 이해 했다.</p><p>부하 테스트를 통해 현재 이 서비스의 서버 사양이 괜찮은지, 어플리케이션이 점점 느려진다는지</p><p>등등 이러한 부분을 체크 하여 수정 및 개선을 한다.</p><p>실제로 온라인 게임등을 보면 종종 오픈 시 서버가 터지는데 얼마나 몰린건지.. 무섭다</p><h2 id="Artillery"><a href="#Artillery" class="headerlink" title="Artillery"></a>Artillery</h2><p>Artillery는 Node.js에서 쓸 수 있는 부하 테스트 도구 인데 아래와 같은 방법을 지원 한다.</p><ul><li>HTTP</li><li>Socket.io</li><li>WebSocket</li></ul><p>다른 부하 테스트 도구를 아직 안 써봐서 장점이나 단점은 잘 모르겠다..</p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><p>node.js가 설치되어 있어야 한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">npm i artillery -g <span class="comment"># npm</span></span><br><span class="line">artillery -V <span class="comment"># 버전 확인</span></span><br><span class="line"><span class="comment">#         ___         __  _ ____                  _</span></span><br><span class="line"><span class="comment">#   _____/   |  _____/ /_(_) / /__  _______  __  (_)___  _____</span></span><br><span class="line"><span class="comment">#  /____/ /| | / ___/ __/ / / / _ \/ ___/ / / / / / __ \/____/</span></span><br><span class="line"><span class="comment"># /____/ ___ |/ /  / /_/ / / /  __/ /  / /_/ / / / /_/ /____/</span></span><br><span class="line"><span class="comment">#     /_/  |_/_/   \__/_/_/_/\___/_/   \__, (_)_/\____/</span></span><br><span class="line"><span class="comment">#                                     /____/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------ Version Info ------------</span></span><br><span class="line"><span class="comment"># Artillery: 1.6.0-29</span></span><br><span class="line"><span class="comment"># Artillery Pro: not installed (https://artillery.io/pro)</span></span><br><span class="line"><span class="comment"># Node.js: v10.16.1</span></span><br><span class="line"><span class="comment"># OS: darwin/x64</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br></pre></td></tr></table></figure><h2 id="연습할-어플리케이션"><a href="#연습할-어플리케이션" class="headerlink" title="연습할 어플리케이션"></a>연습할 어플리케이션</h2><p>아주 간단한 API를 Express로 작성</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> uuid = <span class="built_in">require</span>(<span class="string">&#x27;nanoid&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">  extended: <span class="literal">true</span>,</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/join&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> res.json(&#123; <span class="attr">code</span>: <span class="number">200</span>, <span class="attr">id</span>: uuid.nanoid(), <span class="attr">create_at</span>: <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/data&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; id &#125; = req.query;</span><br><span class="line">  <span class="keyword">if</span> (!id) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.json(&#123; <span class="attr">code</span>: <span class="number">500</span>, <span class="attr">message</span>: <span class="string">&#x27;something wrong&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res.json(&#123; <span class="attr">code</span>: <span class="number">200</span>, id &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`running on port <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="시나리오"><a href="#시나리오" class="headerlink" title="시나리오"></a>시나리오</h2><p>시나리오를 작성한대로 API를 여러 번 호출을 하여 부하를 줄 수가 있다.</p><p>지금은 연습으로 HTTP 테스트 시나리오를 작성 한다.</p><ol><li>/join을 통해 ID를 응답 받는다.</li><li>/data에 ID를 보낸다.</li></ol><p>artillery는 json 또는 yaml을 지원하는데 yaml이 나은 듯(주석을 쓸 수 있어서!)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line">  <span class="attr">target:</span> <span class="string">&quot;http://localhost:3000&quot;</span> <span class="comment"># host</span></span><br><span class="line">  <span class="attr">phases:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">duration:</span> <span class="number">30</span> <span class="comment"># 해당 초만큼 실행</span></span><br><span class="line">      <span class="attr">arrivalRate:</span> <span class="number">300</span> <span class="comment"># 가상 사용자 수</span></span><br><span class="line">  <span class="attr">processor:</span> <span class="string">&quot;./util.js&quot;</span> <span class="comment"># 참조할 js</span></span><br><span class="line">  <span class="attr">defaults:</span></span><br><span class="line">    <span class="attr">headers:</span> <span class="comment"># header 세팅</span></span><br><span class="line">      <span class="attr">Content-Type:</span> <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line"><span class="attr">scenarios:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">flow:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">post:</span> <span class="comment"># method 설정</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">&quot;/join&quot;</span> <span class="comment"># api url</span></span><br><span class="line">        <span class="attr">body:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">afterResponse:</span> <span class="string">&quot;responseData&quot;</span> <span class="comment"># api 응답받은 후의 실행할 함수</span></span><br><span class="line">        <span class="attr">match:</span> <span class="comment"># 해당 값이 맞는지 체크</span></span><br><span class="line">          <span class="attr">json:</span> <span class="string">&quot;$.code&quot;</span> <span class="comment"># json 데이터 중에 code를 선택</span></span><br><span class="line">          <span class="attr">value:</span> <span class="number">200</span> <span class="comment"># 200이면 success 아니면 fail</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">function:</span> <span class="string">&quot;setParam&quot;</span> <span class="comment"># get 실행하기전에 참조할 함수</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">get:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">&quot;/data?id=<span class="template-variable">&#123;&#123; id &#125;&#125;</span>&quot;</span> <span class="comment"># setParam에서 넣은 ID</span></span><br><span class="line">        <span class="attr">match:</span></span><br><span class="line">          <span class="attr">json:</span> <span class="string">&quot;$.code&quot;</span></span><br><span class="line">          <span class="attr">value:</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><p>이전엔 몰랏는데 함수를 시나리오 로직에 추가할 수가 있었다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> responseData = <span class="function">(<span class="params">requestParams, response, context, ee, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> json = <span class="built_in">JSON</span>.parse(response.body);</span><br><span class="line">  <span class="keyword">if</span> (json.code === <span class="number">200</span>) &#123;</span><br><span class="line">    data.push(json.id);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> next(); <span class="comment">// next를 리턴해줘야 다시 시나리오 실행</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setParam = <span class="function">(<span class="params">context, events, done</span>) =&gt;</span> &#123;</span><br><span class="line">   context.vars[<span class="string">&#x27;id&#x27;</span>] = data[i]; <span class="comment">// id라는 값에 파라미터 설정</span></span><br><span class="line">   i++;</span><br><span class="line">   <span class="keyword">return</span> done(); <span class="comment">// 콜백</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.responseData = responseData;</span><br><span class="line"><span class="built_in">exports</span>.setParam = setParam;</span><br></pre></td></tr></table></figure><h2 id="실행-및-결과"><a href="#실행-및-결과" class="headerlink" title="실행 및 결과"></a>실행 및 결과</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">artillery run -o 결과.json 실행할 파일명.yaml</span><br><span class="line">artillery report 결과.json</span><br></pre></td></tr></table></figure><ol><li>작성한 yaml파일의 실행 결과를 json으로 저장을 한다.</li><li>report 명령어로 실행을 하면 html로 차트 등 결과 화면을 보여 준다.</li></ol><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://artillery.io/docs/">artillery doc</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> LoadTest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js Sequelize 사용해보기 - 2</title>
      <link href="/2019/09/25/nodejs-use-sequelize-2/"/>
      <url>/2019/09/25/nodejs-use-sequelize-2/</url>
      
        <content type="html"><![CDATA[<p>Express에서 Sequelize ORM 사용하여 MySQL Join, Transaction 사용해보기</p><h2 id="스키마-생성"><a href="#스키마-생성" class="headerlink" title="스키마 생성"></a>스키마 생성</h2><p>관계를 맺기 위해 플레이어, 팀 테이블 스키마를 생성 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">sequelize, DataTypes</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> players = sequelize.define(<span class="string">&#x27;players&#x27;</span>, &#123;</span><br><span class="line">    id: &#123; <span class="attr">type</span>: DataTypes.INTEGER, <span class="attr">primaryKey</span>: <span class="literal">true</span>, <span class="attr">autoIncrement</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    name: &#123;</span><br><span class="line">      type: DataTypes.STRING,</span><br><span class="line">      allowNull: <span class="literal">false</span>,</span><br><span class="line">      validate: &#123;</span><br><span class="line">        notNull(val) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!val) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;선수 이름이 입력되지 않았습니다.&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    position: DataTypes.STRING,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    timestamps: <span class="literal">false</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  players.associate = <span class="function">(<span class="params">models</span>) =&gt;</span> &#123; <span class="comment">// <span class="doctag">NOTE:</span> N : 1</span></span><br><span class="line">    players.belongsTo(models.teams);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> players;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">sequelize, DataTypes</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> teams = sequelize.define(<span class="string">&#x27;teams&#x27;</span>, &#123;</span><br><span class="line">    id: &#123; <span class="attr">type</span>: DataTypes.INTEGER, <span class="attr">primaryKey</span>: <span class="literal">true</span>, <span class="attr">autoIncrement</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    title: &#123;</span><br><span class="line">      type: DataTypes.STRING,</span><br><span class="line">      allowNull: <span class="literal">false</span>,</span><br><span class="line">      validate: &#123;</span><br><span class="line">        notNull(val) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!val) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;팀 이름이 입력되지 않았습니다.&#x27;</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    place: DataTypes.STRING,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    timestamps: <span class="literal">false</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  teams.associate = <span class="function">(<span class="params">models</span>) =&gt;</span> &#123; <span class="comment">// <span class="doctag">NOTE:</span> 1 : N</span></span><br><span class="line">    teams.hasMany(models.players);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> teams;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="조인"><a href="#조인" class="headerlink" title="조인"></a>조인</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> join 플레이어(N) : 팀(1)</span></span><br><span class="line">router.get(<span class="string">&#x27;/join1&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  db.players.findAll(&#123;</span><br><span class="line">    include: &#123; <span class="attr">model</span>: db.teams &#125;,</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!result.length) <span class="keyword">return</span> res.json(&#123; <span class="attr">message</span>: <span class="string">&#x27;NOT FOUND&#x27;</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> res.json(result);</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> res.json(e));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> join 팀(1): 플레이어 (N)</span></span><br><span class="line">router.get(<span class="string">&#x27;/join2&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  db.teams.findAll(&#123;</span><br><span class="line">    include: &#123; <span class="attr">model</span>: db.players &#125;,</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!result.length) <span class="keyword">return</span> res.json(&#123; <span class="attr">message</span>: <span class="string">&#x27;NOT FOUND&#x27;</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> res.json(result);</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> res.json(e));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1569750654/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-09-29_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_6.35.58_jdydkd.png" alt="join-1"></p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1569750679/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-09-29_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_6.35.49_qqjugx.png" alt="join-2"></p><h2 id="트랜잭션"><a href="#트랜잭션" class="headerlink" title="트랜잭션"></a>트랜잭션</h2><p>선수를 등록을 하는데 해당 팀이 존재하면 커밋, 업으면 롤백 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 트랜잭션</span></span><br><span class="line">router.post(<span class="string">&#x27;/transaction&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, position, teamId &#125; = req.body;</span><br><span class="line">  db.sequelize.transaction().then(<span class="keyword">async</span> (t) =&gt; &#123; <span class="comment">// <span class="doctag">NOTE:</span> 트랜잭션 시작</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> player = <span class="keyword">await</span> db.players.create(&#123; <span class="comment">// <span class="doctag">NOTE:</span> 선수 등록</span></span><br><span class="line">        name,</span><br><span class="line">        position,</span><br><span class="line">        teamId,</span><br><span class="line">      &#125;, &#123; <span class="attr">transaction</span>: t &#125;);</span><br><span class="line">      <span class="keyword">await</span> db.teams.findOne(&#123; <span class="comment">// <span class="doctag">NOTE:</span> 해당 팀이 잇는지 체크</span></span><br><span class="line">        where: &#123;</span><br><span class="line">          id: player.teamId,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;, &#123; <span class="attr">transaction</span>: t &#125;); <span class="comment">// <span class="doctag">NOTE:</span> 트랜잭션</span></span><br><span class="line">      t.commit(); <span class="comment">// <span class="doctag">NOTE:</span> 팀이 잇으먼 commit (=저장)</span></span><br><span class="line">      <span class="keyword">return</span> res.json(&#123; <span class="attr">message</span>: <span class="string">&#x27;create success&#x27;</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      t.rollback(); <span class="comment">// <span class="doctag">NOTE:</span> 에러 (업는 팀)인 경우 롤백 (저장 취소)</span></span><br><span class="line">      <span class="keyword">return</span> res.json(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> res.json(e));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1569750780/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-09-29_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_6.38.40_jnocf1.png" alt="실행 결과"></p><h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><p>직접 쿼리 실행도 가능 하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> sql 쿼리</span></span><br><span class="line">router.get(<span class="string">&#x27;/query&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  db.sequelize.query(<span class="string">&#x27;select * from players&#x27;</span>).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result); <span class="comment">// <span class="doctag">NOTE:</span> 똑같은 결과가 2개 나오므로 [0]으로 처리.</span></span><br><span class="line">    <span class="keyword">return</span> res.json(result[<span class="number">0</span>]);</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> res.json(e));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Express </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js Sequelize 사용해보기 - 1</title>
      <link href="/2019/09/24/nodejs-use-sequelize-1/"/>
      <url>/2019/09/24/nodejs-use-sequelize-1/</url>
      
        <content type="html"><![CDATA[<p>Express에서 Sequelize ORM 사용하여 MySQL CRUD 해보기</p><p>작성 당시 sequelize 버전은 5.19.1</p><h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add sequelize, mysql2</span><br></pre></td></tr></table></figure><p>sequelize는 다른 rdb도 지원을 한다. mysql2 대신 다른 rdb 모듈 설치 가능 하다.</p><h2 id="설정"><a href="#설정" class="headerlink" title="설정"></a>설정</h2><h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> sequelize init</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">&#x27;sequelize&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="keyword">new</span> Sequelize(<span class="string">&#x27;mysql://root@localhost/test&#x27;</span>); <span class="comment">// <span class="doctag">NOTE:</span> mysql connect url</span></span><br><span class="line"></span><br><span class="line">fs.readdirSync(__dirname).filter(<span class="function">(<span class="params">file</span>) =&gt;</span> (file.indexOf(<span class="string">&#x27;.&#x27;</span>) !== <span class="number">0</span>) &amp;&amp; (file !== <span class="string">&#x27;index.js&#x27;</span>)).forEach(<span class="function">(<span class="params">file</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> model = sequelize.import(path.join(__dirname, file));</span><br><span class="line">  db[model.name] = model;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.keys(db).forEach(<span class="function">(<span class="params">modelName</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&#x27;associate&#x27;</span> <span class="keyword">in</span> db[modelName]) &#123;</span><br><span class="line">    db[modelName].associate(db);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">db.sequelize = sequelize;</span><br><span class="line">db.Sequelize = Sequelize;</span><br><span class="line">db.Op = Sequelize.Op; <span class="comment">// <span class="doctag">NOTE:</span> v5부턴 이걸 해줘야 조건절 equal같은거 쓸수 잇음.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = db;</span><br></pre></td></tr></table></figure><p>sequelize를 사용하기 위한 이니셜라이즈라고 알아두면 된다.</p><h3 id="테이블-스키마-만들기"><a href="#테이블-스키마-만들기" class="headerlink" title="테이블 스키마 만들기"></a>테이블 스키마 만들기</h3><p>테이블 스키마를 정의해야 사용할 수 잇음</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">sequelize, DataTypes</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> animes = sequelize.define(<span class="string">&#x27;animes&#x27;</span>, &#123; <span class="comment">// <span class="doctag">NOTE:</span> &#x27;animes&#x27;는 테이블명</span></span><br><span class="line">    id: &#123; <span class="attr">type</span>: DataTypes.INTEGER, <span class="attr">primaryKey</span>: <span class="literal">true</span>, <span class="attr">autoIncrement</span>: <span class="literal">true</span> &#125;, <span class="comment">// <span class="doctag">NOTE:</span> primary key</span></span><br><span class="line">    title: DataTypes.STRING,</span><br><span class="line">    quarter: DataTypes.STRING,</span><br><span class="line">    createAt: &#123;</span><br><span class="line">      type: DataTypes.DATE,</span><br><span class="line">      defaultValue: DataTypes.NOW,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    timestamps: <span class="literal">false</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> animes;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>자주 쓰는 데이터 타입만 적어두자.</p><ul><li>DataTypes.INTEGER = 정수형 int</li><li>DataTypes.STRING = 문자형 varchar(255)</li><li>DataTypes.TEXT = 문자형 TEXT</li><li>DataTypes.DATE = 날짜 DATETIME</li><li>DataTypes.BOOLEAN = tinyint 1/0</li></ul><h3 id="연결"><a href="#연결" class="headerlink" title="연결"></a>연결</h3><p>앱 실행 시 db에 연결하고 스키마에 정의된 테이블이 업으면 생성을 한다.</p><p>아 스키마를 변경한다고 이미 생성된 테이블이 변경되진 않는다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.sequelize</span><br><span class="line">  .sync()</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;DB 연결 성공&#x27;</span>);</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(e);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="crud"><a href="#crud" class="headerlink" title="crud"></a>crud</h2><p>router에 paramter가 오는 값으로 crud를 해본다.</p><h3 id="create"><a href="#create" class="headerlink" title="create"></a>create</h3><p>1 row를 생성</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> create</span></span><br><span class="line">router.post(<span class="string">&#x27;/create&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; title, quarter &#125; = req.body;</span><br><span class="line">  db.animes.create(&#123;</span><br><span class="line">    title,</span><br><span class="line">    quarter,</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> res.json(result)).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> res.json(e));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1569746033/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-09-29_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_5.33.37_ot4ry9.png" alt="실행 결과"></p><h3 id="여러-개-create"><a href="#여러-개-create" class="headerlink" title="여러 개 create"></a>여러 개 create</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> multiple create</span></span><br><span class="line">router.post(<span class="string">&#x27;/multiple-create&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = req.body; <span class="comment">// <span class="doctag">NOTE:</span> Array Object [&#123;&#125;, &#123;&#125; ... ]</span></span><br><span class="line">  db.animes.bulkCreate(data).then(<span class="function">(<span class="params">result</span>) =&gt;</span> res.json(result)).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> res.json(e));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1569746119/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-09-29_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_5.34.57_mh04pr.png" alt="실행 결과"></p><h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/select&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; id &#125; = req.body;</span><br><span class="line">  db.animes.findAll(&#123;</span><br><span class="line">    where: &#123;</span><br><span class="line">      id,</span><br><span class="line">      <span class="comment">// id: &#123; // <span class="doctag">NOTE:</span> &gt;, = 같은 조건식을 쓰는 방법.</span></span><br><span class="line">      <span class="comment">//   [db.Op.gt]: id,</span></span><br><span class="line">      <span class="comment">// &#125;,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// limit: 1, // <span class="doctag">NOTE:</span> 개수 제한</span></span><br><span class="line">    <span class="comment">// attributes: [&#x27;title&#x27;], // <span class="doctag">NOTE:</span> 특정 컬럼만 읽을 때</span></span><br><span class="line">    <span class="comment">// order: [&#x27;id&#x27;, &#x27;desc&#x27;], // <span class="doctag">NOTE:</span> 정렬</span></span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123; <span class="comment">// <span class="doctag">NOTE:</span> 결과는 []에</span></span><br><span class="line">    <span class="keyword">if</span> (!result.length) <span class="keyword">return</span> res.json(&#123; <span class="attr">message</span>: <span class="string">&#x27;NOT FOUND&#x27;</span> &#125;);</span><br><span class="line">    <span class="keyword">return</span> res.json(result);</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> res.json(e));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1569746257/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-09-29_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_5.37.25_z9kmf3.png" alt="실행 결과"></p><h4 id="조건절-정리"><a href="#조건절-정리" class="headerlink" title="조건절 정리"></a>조건절 정리</h4><ul><li>gt: &gt;</li><li>eq: ==</li><li>gte: &gt;=</li><li>in: Array 안에 포함</li><li>lt: &lt;</li><li>lte: &lt;=</li><li>ne: !=</li><li>nin: Array 안에 포함하지 않은</li></ul><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> update</span></span><br><span class="line">router.post(<span class="string">&#x27;/update&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; id, title &#125; = req.body;</span><br><span class="line">  db.animes.update(</span><br><span class="line">    &#123;</span><br><span class="line">      title,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      where: &#123;</span><br><span class="line">        id,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ).then(<span class="function">() =&gt;</span> res.json(&#123; <span class="attr">message</span>: <span class="string">&#x27;update success&#x27;</span> &#125;)).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> res.json(e));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>업데이트 된 내용을 콜백 받진 않는다.</p><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> delete</span></span><br><span class="line">router.post(<span class="string">&#x27;/delete&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; id &#125; = req.body;</span><br><span class="line">  db.animes.destroy(&#123;</span><br><span class="line">    where: &#123;</span><br><span class="line">      id,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;).then(<span class="function">() =&gt;</span> res.json(&#123; <span class="attr">message</span>: <span class="string">&#x27;delete success&#x27;</span> &#125;)).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> res.json(e));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>업데이트와 마찬가지로 별도로 콜백 받는게 업다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Express </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Lambda 사용해보기</title>
      <link href="/2019/08/19/etc-aws-lambda-apigateway/"/>
      <url>/2019/08/19/etc-aws-lambda-apigateway/</url>
      
        <content type="html"><![CDATA[<h2 id="Lambda란"><a href="#Lambda란" class="headerlink" title="Lambda란?"></a>Lambda란?</h2><p>서버리스, 이벤트 처리 방식의 컴퓨팅 서비스</p><blockquote><p>서버리스(serverless)란 애플리케이션 개발자가 서버를 프로비저닝하거나 애플리케이션의 확장을 관리할 필요가 없는 클라우드 컴퓨팅 모델</p></blockquote><p>이벤트 처리 방식은 내가 해본 건 아래와 같다.</p><ul><li>직접 Lambda를 동기/비동기식으로 호출</li><li>CloudWatch Event를 통한 호출</li><li>API GateWay를 연동하여 호출</li></ul><h3 id="사용하면서-느꼈던-장점"><a href="#사용하면서-느꼈던-장점" class="headerlink" title="사용하면서 느꼈던 장점"></a>사용하면서 느꼈던 장점</h3><ul><li>사용자가 별도로 구축하거나 관리할 필요가 없다.</li><li>다양한 언어 지원 (Node.js, Golang, Python, Java 등등등)</li></ul><h3 id="사용하면서-느꼈던-단점"><a href="#사용하면서-느꼈던-단점" class="headerlink" title="사용하면서 느꼈던 단점"></a>사용하면서 느꼈던 단점</h3><ul><li>lambda의 cold start 정도?</li><li>CloudWatch로 로그를 볼 때 보기가 좀 어려웠었다</li></ul><blockquote><p>cold start란 최근에 호출되지 않은 Lambda 함수가 실행되는 데 걸리는 추가 지연 시간</p></blockquote><h3 id="Lambda-함수-생성"><a href="#Lambda-함수-생성" class="headerlink" title="Lambda 함수 생성"></a>Lambda 함수 생성</h3><p>메뉴에 가서 생성을 한다.</p><p>뭔가 다른 거와 사용할려면 역할을 수정을 해야 할텐데 현재는 아니므로 패스</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1597837406/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-08-19_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_8.33.58_qgqnep.png" alt="람다 함수 생성"></p><p>짧은 시간 내 생성이 되고 아래와 같은 화면으로 이동을 할 것이다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1597839698/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-08-19_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_9.21.15_f1rw7m.png" alt="결과 화면"></p><p>간단한 코드는 화면의 에디터에서 처리도 가능 하고 외부 모듈이 필요한 코드는</p><p>코드를 작성한 파일과 node_modules를 압축하여 업로드하면 된다.</p><p>화면을 밑으로 내리면 Lambda 내에서 쓸 수 있는 환경 변수를 지정 할 수 있고</p><p>기본 설정에서 런타임과 메모리, 제한 시간(timeout) 등을 설정 할 수 있는데 메모리나</p><p>제한 시간은 코드의 상태에 따라 달라지므로 뭐라 적을 수가 없다.</p><p>VPC는 ElasticCache 사용할 때 설정을 해 봤긴 했는데.. 현재 포스트에선 제외하고</p><p>그 외 나머지는 설정을 해 본적이 없어서 일단 패스 하겠다.</p><h3 id="이벤트-호출"><a href="#이벤트-호출" class="headerlink" title="이벤트 호출"></a>이벤트 호출</h3><p>기존 lambda의 코드를 살짝 바꾼다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.handler = <span class="keyword">async</span> (event) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> name = event.name || <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> response = &#123;</span><br><span class="line">        statusCode: <span class="number">200</span>,</span><br><span class="line">        body: <span class="string">`Hello! <span class="subst">$&#123;name&#125;</span>`</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;response&#x27;</span>, response)</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="직접-호출"><a href="#직접-호출" class="headerlink" title="직접 호출"></a>직접 호출</h4><p>aws-sdk를 이용하여 로컬에서나 다른 환경에서 사용이 가능 하다.</p><h5 id="동기식-호출"><a href="#동기식-호출" class="headerlink" title="동기식 호출"></a>동기식 호출</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;ap-northeast-2&#x27;</span>, <span class="comment">// 서울 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;IAM 엑세스 키&#x27;</span>,</span><br><span class="line">  secretAccessKey: <span class="string">&#x27;IAM 시크릿 엑세스 키&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lambda = <span class="keyword">new</span> AWS.Lambda();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  FunctionName: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  InvocationType: <span class="string">&#x27;RequestResponse&#x27;</span>, <span class="comment">// <span class="doctag">NOTE:</span> 해당 부분은 주석해도 된다 lambda의 default type</span></span><br><span class="line">  Payload: <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">name</span>: <span class="string">&#x27;delryn&#x27;</span> &#125;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">lambda.invoke(params).promise().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      StatusCode: 200,</span></span><br><span class="line"><span class="comment">      ExecutedVersion: &#x27;$LATEST&#x27;,</span></span><br><span class="line"><span class="comment">      Payload: &#x27;&#123;&quot;statusCode&quot;:200,&quot;body&quot;:&quot;Hello! delryn&quot;&#125;&#x27;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="비동기식-호출"><a href="#비동기식-호출" class="headerlink" title="비동기식 호출"></a>비동기식 호출</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">  region: <span class="string">&#x27;ap-northeast-2&#x27;</span>, <span class="comment">// 서울 리전</span></span><br><span class="line">  accessKeyId: <span class="string">&#x27;IAM 엑세스 키&#x27;</span>,</span><br><span class="line">  secretAccessKey: <span class="string">&#x27;IAM 시크릿 엑세스 키&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lambda = <span class="keyword">new</span> AWS.Lambda();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">  FunctionName: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">  InvocationType: <span class="string">&#x27;Event&#x27;</span>,</span><br><span class="line">  Payload: <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">name</span>: <span class="string">&#x27;lunacy&#x27;</span> &#125;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">lambda.invoke(params).promise().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// &#123; StatusCode: 202, Payload: &#x27;&#x27; &#125;</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>실제 호출 되었는지 CloudWatch Log를 보면 알 수가 있다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1597842973/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-08-19_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_10.15.43_dczmlh.png" alt="cloudwatch"></p><h3 id="CloudWatch-Event를-통한-호출"><a href="#CloudWatch-Event를-통한-호출" class="headerlink" title="CloudWatch Event를 통한 호출"></a>CloudWatch Event를 통한 호출</h3><p>화면에서 트리거를 누르고 EventBridge(CloudWatch Events)를 선택 한다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1597895265/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-08-20_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_12.47.27_wsb3rz.png" alt="cron"></p><p>cron 작업을 거는거라 생각 하면 된다 Lambda의 시간대는 UTC 0 이므로 </p><p>잘 고려해야 하고 표현식 작성법은 아래 참고 문서를 보면 설명이 잘 나와 있다.</p><p>CloudWatch 가서 보면 1분 마다 실행 하는 걸 확인 가능</p><h2 id="API-GateWay란"><a href="#API-GateWay란" class="headerlink" title="API GateWay란?"></a>API GateWay란?</h2><p>개발자가 API를 쉽게 생성, 유지 관리 하는 완전관리형 서비스</p><p>개인적으로 써 봤을 때는 router를 설정하는 느낌이였다.</p><h3 id="생성"><a href="#생성" class="headerlink" title="생성"></a>생성</h3><p>화면이 뭔가 좀 바뀌었다. WebSocket은 다른 포스트에서 다루었으니 지금은 Lambda 함수를 </p><p>호출 해보기 위한 HTTP API로 만들어 본다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1597896931/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-08-20_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_1.14.17_vysq89.png" alt="생성 - 1"></p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1597896955/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-08-20_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_1.14.40_desklm.png" alt="생성 - 2"></p><h3 id="경로-설정"><a href="#경로-설정" class="headerlink" title="경로 설정"></a>경로 설정</h3><p>개발 메뉴에서 경로를 선택하고 create를 눌러 준 다음 상황에 맞는 메서드를 선택 한다.</p><p>지금은 테스트로 Any(POST or GET)으로 만들어 본다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1597897221/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-08-20_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_1.20.03_ll8xka.png" alt="Any"></p><p>통합 연결을 누르면 화면이 바뀌는데 통합 생성 및 연결을 눌러 준다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1597897439/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-08-20_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_1.23.27_tnauuq.png" alt="통합 연결"></p><p>기존에 쓰던 Lambda 함수를 연결하면 끝, 파라미터를 잘 받는지 확인하기 위해 코드를 수정</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.handler = <span class="keyword">async</span> (event) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> param;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> event.queryStringParameters !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        param = <span class="string">&#x27;GET&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> event.body !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        param = <span class="string">&#x27;POST&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> response = &#123;</span><br><span class="line">        statusCode: <span class="number">200</span>,</span><br><span class="line">        body: <span class="string">`Hello! <span class="subst">$&#123;param&#125;</span>`</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;response&#x27;</span>, response)</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="호출"><a href="#호출" class="headerlink" title="호출"></a>호출</h3><p>호출할 URL은 메뉴에서 API:이름 (VPC 링크 밑)을 누르면 나온다.</p><p>HTTP Client를 이용해 확인을 해 본다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1597898614/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-08-20_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_1.43.04_xox40w.png" alt="GET"></p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1597898614/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-08-20_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_1.42.45_ndlmmj.png" alt="POST"></p><p>실제 데이터를 받기 위해서는 아래처럼 접근 하면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">event.queryStringParameters.param <span class="comment">// GET</span></span><br><span class="line">event.body.param <span class="comment">// POST</span></span><br></pre></td></tr></table></figure><p>그 외에도 event 내에 헤더에 대한 정보도 포함 하고 있으므로 필요할 때 확인</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://www.redhat.com/ko/topics/cloud-native-apps/what-is-serverless">서버리스 아키텍처</a></li><li><a href="https://docs.aws.amazon.com/ko_kr/lambda/latest/dg/tutorial-scheduled-events-schedule-expressions.html">rate 또는 cron을 사용한 예약 표현식</a></li><li><a href="https://docs.aws.amazon.com/ko_kr/AmazonCloudWatch/latest/events/ScheduledEvents.html">규칙에 대한 예약 표현식</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yarn or npm에서 퍼미션 에러 해결법</title>
      <link href="/2019/08/17/etc-npm-yarn-permission-err/"/>
      <url>/2019/08/17/etc-npm-yarn-permission-err/</url>
      
        <content type="html"><![CDATA[<p>기억이 안 나는데 yarn으로 설치를 할라 하면 아래 같이 계속 떳음.</p><p>/usr/local/lib/node_modules</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EACCES: permission denied</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>처음엔 매 번 sudo 붙여 가지고 햇는데 어이구 이거 너무 귀찬고 짜증 남.</p><p>역시 스택오버플로우에 검색 하니 나 같은 사람이 있었다</p><h2 id="명령어"><a href="#명령어" class="headerlink" title="명령어"></a>명령어</h2><ul><li><p>yarn의 경우</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R <span class="variable">$USER</span>:<span class="variable">$GROUP</span> ~/.npm</span><br><span class="line">sudo chown -R <span class="variable">$USER</span>:<span class="variable">$GROUP</span> ~/.config</span><br></pre></td></tr></table></figure></li><li><p>npm의 경우</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R $(whoami) /usr/<span class="built_in">local</span>/lib/node_modules</span><br></pre></td></tr></table></figure></li></ul><p>그냥 그대로 치면 다음 부터 퍼미션 에러 안 뜬다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://stackoverflow.com/questions/49529696/yarn-error-eaccess-permission-denied-scandir-home-ubuntu-config-yarn-link">stackoverflow - yarn error “EACCESS: permission denied, scandir ‘/home/ubuntu/.config/yarn/link’”</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ETC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda + Websocket + Dynamodb를 이용한 간단 채팅 실습</title>
      <link href="/2019/07/29/etc-aws-apigateway-websocket/"/>
      <url>/2019/07/29/etc-aws-apigateway-websocket/</url>
      
        <content type="html"><![CDATA[<h2 id="IAM-역할-만들기"><a href="#IAM-역할-만들기" class="headerlink" title="IAM 역할 만들기"></a>IAM 역할 만들기</h2><p>아래와 같은 권한을 추가하여 생성을 한다.</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1583644259/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-03-08_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_2.10.33_ydjudf.png" alt="auth"></p><h2 id="Dynamodb-생성"><a href="#Dynamodb-생성" class="headerlink" title="Dynamodb 생성"></a>Dynamodb 생성</h2><ul><li>테이블 이름은 my_chat</li><li>기본 파티션 키는 connection_id (문자열)</li><li>글로벌 인덱스 키는 user_id-index</li></ul><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1583644587/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-03-08_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_2.15.51_q7uaax.png" alt="dynamodb-info"></p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1583644615/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-03-08_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_2.16.05_mf6bhp.png" alt="gsi"></p><h2 id="lambda-함수-생성"><a href="#lambda-함수-생성" class="headerlink" title="lambda 함수 생성"></a>lambda 함수 생성</h2><p>lambda는 위의 만든 IAM role로 생성을 한다.</p><h3 id="연결-함수"><a href="#연결-함수" class="headerlink" title="연결 함수"></a>연결 함수</h3><p>연결된 유저 아이디(클라이언트에서 전송), 커넥션 아이디(api gateway쪽에서 자체 발급)를 </p><p>dynamodb에 저장을 해서 관리를 하게끔 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ddb = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient(&#123; <span class="attr">region</span>: <span class="string">&#x27;ap-northeast-2&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TABLE_NAME = <span class="string">&#x27;my_chat&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 커넥션</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>Dynamodb에 해당 유저 ID, 커넥션 ID 담아둔다.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">exports</span>.handler = <span class="keyword">async</span> (event) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> connectionId = event.requestContext.connectionId;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> event.queryStringParameters === <span class="string">&#x27;undefined&#x27;</span> || <span class="keyword">typeof</span> event.queryStringParameters.user_id === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;연결 실패&#x27;</span>, <span class="string">&#x27;유저 아이디가 없음&#x27;</span>);</span><br><span class="line">    result.statusCode = <span class="number">500</span>;</span><br><span class="line">    result.body = <span class="string">`연결 실패: <span class="subst">$&#123;connectionId&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> userId = event.queryStringParameters.user_id;</span><br><span class="line">  <span class="keyword">const</span> checkParams = &#123;</span><br><span class="line">    TableName: TABLE_NAME,</span><br><span class="line">    IndexName: <span class="string">&#x27;user_id-index&#x27;</span>,</span><br><span class="line">    KeyConditionExpression: <span class="string">&#x27;#user_id = :user_id&#x27;</span>,</span><br><span class="line">    ExpressionAttributeNames: &#123;</span><br><span class="line">      <span class="string">&#x27;#user_id&#x27;</span>: <span class="string">&#x27;user_id&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    ExpressionAttributeValues: &#123;</span><br><span class="line">      <span class="string">&#x27;:user_id&#x27;</span>: userId,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> putParams = &#123;</span><br><span class="line">    TableName: TABLE_NAME,</span><br><span class="line">    Item: &#123;</span><br><span class="line">      connection_id: connectionId,</span><br><span class="line">      user_id: userId,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> duplicateCheck = <span class="keyword">await</span> ddb.query(checkParams).promise();</span><br><span class="line">    <span class="keyword">if</span> (duplicateCheck.Items.length &gt; <span class="number">0</span>) &#123; <span class="comment">// <span class="doctag">NOTE:</span> 만약에 중복된 유저가 접속이 되는 경우..?</span></span><br><span class="line">      <span class="keyword">const</span> del = [];</span><br><span class="line">      duplicateCheck.Items.forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> delParams = &#123;</span><br><span class="line">          TableName: TABLE_NAME,</span><br><span class="line">          Key: &#123;</span><br><span class="line">            connection_id: key.connection_id,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        del.push(ddb.delete(delParams).promise());</span><br><span class="line">        <span class="built_in">Promise</span>.all(del);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> ddb.put(putParams).promise();</span><br><span class="line">    result.statusCode = <span class="number">200</span>;</span><br><span class="line">    result.body = <span class="string">`연결 성공: <span class="subst">$&#123;connectionId&#125;</span>`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;연결 완료&#x27;</span>, <span class="built_in">JSON</span>.stringify(result));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    result.statusCode = <span class="number">500</span>;</span><br><span class="line">    result.body = <span class="string">`연결 실패: <span class="subst">$&#123;connectionId&#125;</span>`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;연결 실패&#x27;</span>, <span class="built_in">JSON</span>.stringify(result));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, <span class="built_in">JSON</span>.stringify(e));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="연결-해제-함수"><a href="#연결-해제-함수" class="headerlink" title="연결 해제 함수"></a>연결 해제 함수</h3><p>클라이언트에서 연결을 해제 시 자동 호출 되어 dynamodb에서 삭제를 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ddb = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient(&#123;<span class="attr">region</span>: <span class="string">&#x27;ap-northeast-2&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 연결 해제</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>dynamodb에서 삭제함.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">exports</span>.handler = <span class="keyword">async</span> event =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> connectionId = event.requestContext.connectionId;</span><br><span class="line">  <span class="keyword">const</span> params = &#123;</span><br><span class="line">    TableName: <span class="string">&#x27;my_chat&#x27;</span>,</span><br><span class="line">    Key: &#123;</span><br><span class="line">      connection_id: connectionId,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> ddb.delete(params).promise();</span><br><span class="line">    result.statusCode = <span class="number">200</span>;</span><br><span class="line">    result.body = <span class="string">`연결 해제: <span class="subst">$&#123;connectionId&#125;</span>`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;연결 해제&#x27;</span>, <span class="built_in">JSON</span>.stringify(result));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    result.statusCode = <span class="number">500</span>;</span><br><span class="line">    result.body = <span class="string">`해제 실패: <span class="subst">$&#123;connectionId&#125;</span>`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;해제 실패&#x27;</span>, <span class="built_in">JSON</span>.stringify(result));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, <span class="built_in">JSON</span>.stringify(e));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="메세지-전송"><a href="#메세지-전송" class="headerlink" title="메세지 전송"></a>메세지 전송</h3><p>클라이언트에서 메세지를 전송 시 dynamodb에 담아둔 연결된 모든 유저에게 일괄 전송 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ddb = <span class="keyword">new</span> AWS.DynamoDB.DocumentClient(&#123; <span class="attr">region</span>: <span class="string">&#x27;ap-northeast-2&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TABLE_NAME = <span class="string">&#x27;my_chat&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 메세지 전송</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">exports</span>.handler = <span class="keyword">async</span> event =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> connectionData;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    connectionData = <span class="keyword">await</span> ddb.scan(&#123; <span class="attr">TableName</span>: TABLE_NAME &#125;).promise(); <span class="comment">// <span class="doctag">NOTE:</span> 모든 커넥션 ID를 가지고 온다.</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    result.statusCode = <span class="number">500</span>;</span><br><span class="line">    result.body = <span class="string">&#x27;연결된 아이디를 가지고 올 수가 없다&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> apigwManagementApi = <span class="keyword">new</span> AWS.ApiGatewayManagementApi(&#123;</span><br><span class="line">    apiVersion: <span class="string">&#x27;2018-11-29&#x27;</span>,</span><br><span class="line">    endpoint: event.requestContext.domainName + <span class="string">&#x27;/&#x27;</span> + event.requestContext.stage,</span><br><span class="line">    region: <span class="string">&#x27;ap-northeast-2&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> message = <span class="built_in">JSON</span>.parse(event.body).message;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> postCalls = connectionData.Items.map(<span class="keyword">async</span> (&#123; connection_id, user_id &#125;) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> post = &#123;</span><br><span class="line">        connection_id,</span><br><span class="line">        user_id,</span><br><span class="line">        message,</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;post&#x27;</span>, <span class="built_in">JSON</span>.stringify(post));</span><br><span class="line">      <span class="keyword">await</span> apigwManagementApi.postToConnection(&#123; <span class="attr">ConnectionId</span>: connection_id, <span class="attr">Data</span>: <span class="built_in">JSON</span>.stringify(post) &#125;).promise(); <span class="comment">// <span class="doctag">NOTE:</span> 메세지 전송</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (e.statusCode === <span class="number">410</span>) &#123; <span class="comment">// <span class="doctag">NOTE:</span> 연결 끊긴 커넥션 ID는 삭제</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`deleting <span class="subst">$&#123;user_id&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">await</span> ddb.delete(&#123; <span class="attr">TableName</span>: TABLE_NAME, <span class="attr">Key</span>: &#123; connection_id &#125; &#125;).promise();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;e&#x27;</span>, e.stack);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">Promise</span>.all(postCalls);</span><br><span class="line">    result.statusCode = <span class="number">200</span>;</span><br><span class="line">    result.body = <span class="string">&#x27;메세지 전송 성공&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    result.statusCode = <span class="number">500</span>;</span><br><span class="line">    result.body = <span class="string">&#x27;메세지 전송 실패&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="API-GATEWAY"><a href="#API-GATEWAY" class="headerlink" title="API GATEWAY"></a>API GATEWAY</h2><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1583645464/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-03-08_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_2.30.29_d4cc4t.png" alt="gateway"></p><p>경로 표현식은 쉽게 생각하면 웹소켓의 접근할 url 이라고 생각하면 될듯. <a href="https://docs.aws.amazon.com/ko_kr/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html">링크</a> 참고.</p><h3 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h3><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1583645607/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-03-08_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_2.32.53_ypezj1.png" alt="연결"></p><h3 id="disconnect"><a href="#disconnect" class="headerlink" title="disconnect"></a>disconnect</h3><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1583645629/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-03-08_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_2.33.06_iy9vwv.png" alt="연결해제"></p><h3 id="message"><a href="#message" class="headerlink" title="message"></a>message</h3><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1583645645/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-03-08_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_2.33.14_prdz6o.png" alt="message"></p><h2 id="배포"><a href="#배포" class="headerlink" title="배포"></a>배포</h2><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1561985875/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-07-01_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_9.47.23_rp5uh3.png" alt="배포"></p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1561985909/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-07-01_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_9.47.35_tlxaut.png" alt="배포-2"></p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1561985926/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-07-01_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_9.53.35_drtebl.png" alt="배포-3"></p><h2 id="클라이언트-테스트"><a href="#클라이언트-테스트" class="headerlink" title="클라이언트 테스트"></a>클라이언트 테스트</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebSocket test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> wSocket;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            wSocket = <span class="keyword">new</span> WebSocket(<span class="string">&quot;wss://evfxor8p6a.execute-api.ap-northeast-2.amazonaws.com/dev&quot;</span>);</span></span><br><span class="line"><span class="javascript">            wSocket.onopen = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123; onOpen(e) &#125;;</span></span><br><span class="line"><span class="javascript">            wSocket.onclose = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123; onClose(e) &#125;;</span></span><br><span class="line"><span class="javascript">            wSocket.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123; onMessage(e) &#125;;</span></span><br><span class="line"><span class="javascript">            wSocket.onerror = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123; onError(e) &#125;;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">onOpen</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;WebSocket opened!&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;connect: &#x27;</span>, e);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#btn_open&quot;</span>).attr(<span class="string">&quot;disabled&quot;</span>, <span class="string">&quot;disabled&quot;</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#btn_close&quot;</span>).removeAttr(<span class="string">&quot;disabled&quot;</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#btn_send&quot;</span>).removeAttr(<span class="string">&quot;disabled&quot;</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#message&quot;</span>).removeAttr(<span class="string">&quot;disabled&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">onClose</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&quot;WebSocket closed!&quot;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#btn_open&quot;</span>).removeAttr(<span class="string">&quot;disabled&quot;</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#btn_close&quot;</span>).attr(<span class="string">&quot;disabled&quot;</span>, <span class="string">&quot;disabled&quot;</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#btn_send&quot;</span>).attr(<span class="string">&quot;disabled&quot;</span>, <span class="string">&quot;disabled&quot;</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#message&quot;</span>).attr(<span class="string">&quot;disabled&quot;</span>, <span class="string">&quot;disabled&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">onMessage</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;메시지 수신 : &quot;</span> + e.data);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">onError</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;오류발생 : &quot;</span> + e.data);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">doOpen</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">            init();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">doClose</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">            wSocket.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">doSend</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> ms = &#123; <span class="string">&quot;action&quot;</span>: <span class="string">&quot;message&quot;</span>, <span class="string">&quot;message&quot;</span>: $(<span class="string">&#x27;#message&#x27;</span>).val() &#125;;</span></span><br><span class="line">            </span><br><span class="line"><span class="javascript">            ms = <span class="built_in">JSON</span>.stringify(ms);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="keyword">typeof</span> ms);</span></span><br><span class="line">            wSocket.send(ms);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#btn_open&quot;</span>).removeAttr(<span class="string">&quot;disabled&quot;</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#btn_close&quot;</span>).attr(<span class="string">&quot;disabled&quot;</span>, <span class="string">&quot;disabled&quot;</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#btn_send&quot;</span>).attr(<span class="string">&quot;disabled&quot;</span>, <span class="string">&quot;disabled&quot;</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#message&quot;</span>).attr(<span class="string">&quot;disabled&quot;</span>, <span class="string">&quot;disabled&quot;</span>);</span></span><br><span class="line">            init();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;doOpen();&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Open&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn_open&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;doClose();&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Close&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn_close&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;message&quot;</span>&gt;</span>Message: <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Message&quot;</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;doSend();&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Send&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn_send&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ms = &#123; <span class="string">&quot;action&quot;</span>: <span class="string">&quot;message&quot;</span>, <span class="string">&quot;message&quot;</span>: $(<span class="string">&#x27;#message&#x27;</span>).val() &#125;;</span><br></pre></td></tr></table></figure><p>클라이언트에서 보낼 때 action이 api 게이트웨이에서 정한 경로이고 </p><p>message는 보낼 파라미터.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1561987448/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-07-01_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_10.19.50_ct90nj.png" alt="실행결과"></p><blockquote><p>참고</p></blockquote><p><a href="https://github.com/aws-samples/simple-websockets-chat-app">aws-samples/simple-websockets-chat-app</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js Cluster 모드 사용해보기</title>
      <link href="/2019/07/13/nodejs-use-cluster/"/>
      <url>/2019/07/13/nodejs-use-cluster/</url>
      
        <content type="html"><![CDATA[<p>Node.js는 기본적으로 CPU를 1개만 쓰기 때문에 멀티 코어 이상인 PC에선 </p><p>클러스터 모드로 앱을 돌려야 모든 CPU를 사용을 한다고 한다.</p><h2 id="PM2"><a href="#PM2" class="headerlink" title="PM2"></a>PM2</h2><p>로컬 또는 AWS EC2에서 app을 돌릴 때 주로 <a href="https://www.npmjs.com/package/pm2">PM2</a>로 앱을 구동 하는데 모듈에서 클러스터 모드를 편리하게 지원을 한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start index.js -i max <span class="comment"># cpu core 수 만큼 프로세스 생성하고 실행.</span></span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1562861140/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-07-12_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_12.27.00_zww2l3.png" alt="결과"></p><h2 id="코드"><a href="#코드" class="headerlink" title="코드"></a>코드</h2><p>예로 AWS ElasticBeanstalk 같은 경우 PM2로 구동을 하는게 아니기 때문에 </p><p>아래와 같은 코드를 돌려야 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">&#x27;cluster&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> numCPUs = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>).cpus().length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!process.env.PORT) &#123;</span><br><span class="line">   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;process.env.PORT not set&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CLUSTER_ENV_VARS = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cluster.isMaster) &#123; <span class="comment">// 마스터 프로세스인 경우.</span></span><br><span class="line">   fork();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">require</span>(<span class="string">&#x27;./index.js&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fork</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numCPUs; i++) &#123;</span><br><span class="line">       <span class="keyword">const</span> envClone = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringfy(process.env)) <span class="comment">// 환경 카피 해서 모든 프로세스 통일.</span></span><br><span class="line">       envClone.PORT = <span class="built_in">parseInt</span>(process.env.PORT) + i; <span class="comment">// 포트도 나누자</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">const</span> worker = cluster.fork(envClone);</span><br><span class="line">       CLUSTER_ENV_VARS[worker.id] = envClone;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   cluster.on(<span class="string">&#x27;exit&#x27;</span>, <span class="function">(<span class="params">worker, code, signal</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;worker %s died, forking again&#x27;</span>, worker.process.pid);</span><br><span class="line">       <span class="keyword">const</span> new_worker = cluster.fork(CLUSTER_ENV_VARS[worker.id]);</span><br><span class="line">       CLUSTER_ENV_VARS[new_worker.id] = CLUSTER_ENV_VARS[worker.id];</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1562861923/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-07-12_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_12.07.10_srslma.png" alt="빈스톡"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express에서 node-cache 모듈 사용해보기</title>
      <link href="/2019/07/12/nodejs-express-cache/"/>
      <url>/2019/07/12/nodejs-express-cache/</url>
      
        <content type="html"><![CDATA[<p>DB의 데이터 중 읽기로 자주 사용하지만 변경은 자주 일어나지 않고 쓰기는 적은 데이터는</p><p>메모리에 캐시로 남겨서 사용하면 속도 면에서 좋아진다.</p><p>다만 메모리 성능에 맞게 양을 조절해야 할 것이다.</p><p>테스트는 AWS 내의 elasticbeanstalk, dynamodb로 진행.</p><p>express 자체에 기능이 업기 때문에 <a href="https://www.npmjs.com/package/node-cache">node-cache</a> 라는 모듈을 사용 햇다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> doc = <span class="built_in">require</span>(<span class="string">&#x27;dynamodb-doc&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">    region: <span class="string">&#x27;ap-northeast-2&#x27;</span>, <span class="comment">// 서울 리전</span></span><br><span class="line">    accessKeyId: process.env.AWS_ACCESS_KEY_ID, <span class="comment">// IAM</span></span><br><span class="line">    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY <span class="comment">// IAM</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> awsClient = <span class="keyword">new</span> AWS.DynamoDB();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamo = <span class="keyword">new</span> doc.DynamoDB(awsClient);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nodeCache = <span class="built_in">require</span>(<span class="string">&#x27;node-cache&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myCache = <span class="keyword">new</span> nodeCache( &#123; <span class="attr">stdTTL</span>: <span class="number">0</span>, <span class="attr">checkperiod</span>: <span class="number">600</span> &#125; ); <span class="comment">// init</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;d=(´▽｀)=b&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/data&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    myCache.get(<span class="string">&#x27;character&#x27;</span>, <span class="function">(<span class="params">err, value</span>) =&gt;</span> &#123; <span class="comment">// 메모리 캐시에서 불러오기.</span></span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">throw</span> err;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (value) &#123; <span class="comment">// 아직 캐시에 남아 있으면 캐시 데이터 전송.</span></span><br><span class="line">                res.json(<span class="built_in">JSON</span>.parse(value));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 캐시에 업으면 DB에서 불러서 캐시에 남기고 전송.</span></span><br><span class="line">                <span class="keyword">const</span> params = &#123;</span><br><span class="line">                    TableName: <span class="string">&#x27;character_list&#x27;</span></span><br><span class="line">                &#125;;</span><br><span class="line">                dynamo.scan(params, <span class="function">(<span class="params">err, datas</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> err;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        myCache.set(<span class="string">&#x27;character&#x27;</span>, <span class="built_in">JSON</span>.stringify(datas.Items), <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="comment">// 캐시 등록.</span></span><br><span class="line">                            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                                <span class="keyword">throw</span> err;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                res.json(datas.Items); <span class="comment">// 전송</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/clear&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123; <span class="comment">// 캐시 클리어.</span></span><br><span class="line">    myCache.keys(<span class="function">(<span class="params">err, mykeys</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">throw</span> err;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mykeys.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                myCache.del(mykeys, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> err;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        res.send(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.send(<span class="string">&#x27;no cache&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(PORT, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`server listening on port <span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>stdTTL는 캐시 적용 시간, 초 단위로 되어잇고 0을 넣으면 무제한</li><li>checkperiod는 초 단위고 해당 초 마다 체크하여 캐시를 삭제한다는 의미. 기본값은 600</li></ul><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1563076831/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-07-14_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_12.29.46_igx2wo.png" alt="첫 호출"></p><p>최초 호출 시에는 캐시에 안 남아있기 떄문에 dynamodb에서 데이터를 가지고 온다.</p><p>대충 2자리 ms 단위로 가지고 온다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1563076932/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-07-14_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_12.30.07_vsuifq.png" alt="다음 호출"></p><p>이제 다음 호출 시에는 캐시에서 불러오므로 한 자리대 ms로 줄어드는 걸 볼 수 있다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>인스타그램 로그인 API 연동 해보기</title>
      <link href="/2019/06/02/nodejs-instagram-signup/"/>
      <url>/2019/06/02/nodejs-instagram-signup/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.instagram.com/developer/">인스타그램 디벨로퍼</a>에 접속해서 인스타그램 계정으로 로그인 한다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1559463877/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-06-02_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.08.22_nseaw1.png" alt="dashboard"></p><p>인스타그램도 다른 소셜처럼 앱을 하나 생성 해야 한다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1559464190/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-06-02_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.34.21_z6a5by.png" alt="create app"></p><p>Policy url하고 contract email 빼곤 모두 필수 항목이다. 대충 쓰자.</p><p>중요한 항목은 Valid redirect URLS 인데 이게 인스타그램 서버에서 유저 정보를 보내주는</p><p>콜백 url다. url 입력할 때 페북처럼 http로는 안 해준다 ㅜㅜ <a href="https://www.npmjs.com/package/ngrok">ngrok</a>으로 내 로컬에 https url을 받자.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1559464042/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-06-02_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_5.12.51_ls7hhl.png" alt="ngrok"></p><p>이제 내용을 다 적어서 완료를 하게 되면 아래와 같이 필요한 정보들을 볼 수 잇게 된다.</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1565879475/%E3%85%8B%E3%85%8B%E3%85%8B%E3%85%8B_rxyjub.png" alt="app detail"></p><p>귀찮은 설정은 다 끝낫다. 이제 코드로 구현을 해보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  clientId: process.env.INSTAGRAM_CLIENT_ID,</span><br><span class="line">  secret: process.env.INSTAGRAM_CLIENT_SECRET,</span><br><span class="line">  url: process.env.INSTAGRAM_CALLBACK_URL,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> INSTAGRAM_AUTH_URL = <span class="string">`https://api.instagram.com/oauth/authorize/?client_id=<span class="subst">$&#123;config.clientId&#125;</span>&amp;redirect_uri=<span class="subst">$&#123;config.url&#125;</span>&amp;response_type=code`</span>;</span><br><span class="line">  res.redirect(INSTAGRAM_AUTH_URL);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>config 안에 잇는 값들은 인스타그램 디벨로퍼에서 보고 환경변수로 등록을 해두면 된다.</p><p>서버의 /로 접속하게 되면 인스타그램의 로그인 화면으로 이동하게 끔 해놧다.</p><p>이제 인스타그램 계정으로 로그인을 하면 작성한 콜백 URL로 데이터가 넘어오게 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/instagram/callback&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.query.error) &#123;</span><br><span class="line">    <span class="comment">// eslint-disable-next-line no-console</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;error: &#x27;</span>, req.query.error, <span class="string">&#x27;error_reason&#x27;</span>, req.query.error_reason);</span><br><span class="line">    <span class="keyword">return</span> res.redirect(<span class="string">&#x27;/fail&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    url: <span class="string">&#x27;https://api.instagram.com/oauth/access_token&#x27;</span>,</span><br><span class="line">    method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    form: &#123;</span><br><span class="line">      client_id: config.clientId, <span class="comment">// 인스타에서 받은 클라이언트 아이디</span></span><br><span class="line">      client_secret: config.secret, <span class="comment">// 인스타에서 받은 시크릿, 노출되면 안되는 값임</span></span><br><span class="line">      grant_type: <span class="string">&#x27;authorization_code&#x27;</span>, <span class="comment">// 이건 고정 값</span></span><br><span class="line">      redirect_uri: config.url,</span><br><span class="line">      code: req.query.code,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> request(options, <span class="function">(<span class="params">error, response, body</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!error &amp;&amp; response.statusCode === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="comment">// eslint-disable-next-line no-console</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;body&#x27;</span>, <span class="built_in">JSON</span>.parse(body)); <span class="comment">// access_token하고 유저 프로필이 넘어옴.</span></span><br><span class="line">      <span class="keyword">return</span> res.redirect(<span class="string">&#x27;/success&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.redirect(<span class="string">&#x27;/fail&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/fail&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> res.send(<span class="string">&#x27;fail&#x27;</span>));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/success&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> res.send(<span class="string">&#x27;success&#x27;</span>));</span><br></pre></td></tr></table></figure><p>사용자가 취소하거나 기타 에러가 나게 되면 error란 쿼리스트링으로 넘어오게 된다고 한다.</p><p>정상적이면 이제 그 아래처럼 인스타그램 API로 필요한 값들을 넣어서 보내면 요청한 유저의 </p><p>프로필을 받아 볼수 잇게 된다.</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1565880032/%E3%85%8E%E3%84%B8_skmsqn.png" alt="결과"></p><p>마지막으로 로그인하는 짤</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1565881824/ezgif.com-video-to-gif_cvh7qa.gif" alt="signup"></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://www.instagram.com/developer/authentication/">instagram doc</a></li><li><a href="https://github.com/hidelryn/instagram-auth-api-example">소스 코드</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Express </tag>
            
            <tag> Auth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Athena 사용해보기</title>
      <link href="/2019/05/22/etc-aws-athena/"/>
      <url>/2019/05/22/etc-aws-athena/</url>
      
        <content type="html"><![CDATA[<h2 id="Athena란"><a href="#Athena란" class="headerlink" title="Athena란?"></a>Athena란?</h2><p>AWS S3에 보관된 데이터를 SQL을 사용하여 분석할 수 있는 서비스</p><h2 id="사용하게-된-계기"><a href="#사용하게-된-계기" class="headerlink" title="사용하게 된 계기"></a>사용하게 된 계기</h2><p>처음 프로젝트에서 분석할 데이터를 DynamoDB에 보관을 하는데 집계를 하기가 너무 불편해서</p><p>우울하던 중에 AWS 페북 그룹에서 Vingle이라는 회사에서 당시 세션 제목은 잘 기억 안 나는데</p><p>로그 였나.. 사용자 패턴이였나.. 아무튼 나에게 필요한 정보를 배울 수 있을 거 같아서 퇴근하고</p><p>참가 했었다 설명을 듣고 다음 프로젝트에는 꼭 써보기로 마음을 먹었었다 ☺️</p><h2 id="사용하면서-느꼈던-장점"><a href="#사용하면서-느꼈던-장점" class="headerlink" title="사용하면서 느꼈던 장점"></a>사용하면서 느꼈던 장점</h2><ul><li>별도로 설치나 버전 관리 등을 할 일이 없어서 편리 했었다.</li><li>쿼리 사용 회수량에 따른 요금 부과</li></ul><h2 id="사용하면서-느꼈던-단점"><a href="#사용하면서-느꼈던-단점" class="headerlink" title="사용하면서 느꼈던 단점"></a>사용하면서 느꼈던 단점</h2><ul><li>아래에 기술하겠지만 파티션을 불러와야 하는데 일일 기준으로 파티셔닝을 하면 하루에 한번씩 로드를 해줘야 한다. 자동 지원이 아니였음 (혹시 자동 지원 하는 방법을 내가 몰랐을지도 모른다)</li><li>데이터를 분석하는 사람이 SQL을 모르면 음..</li></ul><h2 id="Athena-실습-해보기"><a href="#Athena-실습-해보기" class="headerlink" title="Athena 실습 해보기"></a>Athena 실습 해보기</h2><h3 id="임시-데이터"><a href="#임시-데이터" class="headerlink" title="임시 데이터"></a>임시 데이터</h3><p>Athena의 비용을 절감하기 위해서는 gzip 압축 하는 게 좋다고 한다.</p><p>데이터가 적은 json은 상관없지만 json이 규모가 큰 경우에는 고려해야 한다.</p><p>지금은 json 데이터를 압축해서 S3에 업로드 해 본다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  userId: <span class="string">&quot;hidelryn&quot;</span>,</span><br><span class="line">  password: <span class="string">&quot;12345q&quot;</span>,</span><br><span class="line">  gameData: &#123;</span><br><span class="line">    gameId: <span class="string">&quot;a1&quot;</span>,</span><br><span class="line">    sessionKey: <span class="string">&quot;qrkqkej2l31qeqk&quot;</span>,</span><br><span class="line">    userLocale: &#123;</span><br><span class="line">      locale: <span class="string">&quot;ko_KR&quot;</span>,</span><br><span class="line">      createAt: <span class="string">&quot;2020-05-21 11:15:58&quot;</span>,</span><br><span class="line">      unix: <span class="number">1590027358</span></span><br><span class="line">    &#125;,</span><br><span class="line">    name: <span class="string">&quot;delryn&quot;</span>,</span><br><span class="line">    scores: [</span><br><span class="line">      <span class="number">100</span>,</span><br><span class="line">      <span class="number">30</span>,</span><br><span class="line">      <span class="number">60</span></span><br><span class="line">    ],</span><br><span class="line">    item: [</span><br><span class="line">      &#123;</span><br><span class="line">        itemId: <span class="string">&quot;0_id&quot;</span>,</span><br><span class="line">        itemAmount: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        itemId: <span class="string">&quot;1_id&quot;</span>,</span><br><span class="line">        itemAmount: <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        itemId: <span class="string">&quot;2_id&quot;</span>,</span><br><span class="line">        itemAmount: <span class="number">2</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        itemId: <span class="string">&quot;3_id&quot;</span>,</span><br><span class="line">        itemAmount: <span class="number">3</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        itemId: <span class="string">&quot;4_id&quot;</span>,</span><br><span class="line">        itemAmount: <span class="number">4</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        itemId: <span class="string">&quot;5_id&quot;</span>,</span><br><span class="line">        itemAmount: <span class="number">5</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = obj;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> json = <span class="built_in">require</span>(<span class="string">&#x27;./sample&#x27;</span>); <span class="comment">// 위에 작성한 Object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> output = fs.createWriteStream(<span class="string">&#x27;log_1.json.gz&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> compress = zlib.createGzip();</span><br><span class="line">compress.pipe(output);</span><br><span class="line">compress.write(<span class="built_in">JSON</span>.stringify(json));</span><br><span class="line">compress.end();</span><br></pre></td></tr></table></figure><p><strong>NOTE</strong></p><ul><li>s3에 json pretty 파일을 업로드를 하게 되는 경우 나중에 쿼리할 때 json 파싱 쪽 오류가 난다.</li><li>s3 prefix를 확인해 둘 것. (이후 파티셔닝 때문에)</li></ul><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1590140610/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-05-22_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_6.43.18_oljukh.png" alt="s3"></p><h3 id="Workgroup-생성"><a href="#Workgroup-생성" class="headerlink" title="Workgroup 생성"></a>Workgroup 생성</h3><p>이제 athena 메뉴로 가서 Workgroup을 생성 하고 내용은 상황에 맞게 적어주자.</p><p>Workgroup을 만드는 이유는 분류별로 쿼리의 결과를 저장할 s3를 지정 해주는 것</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1590140287/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-05-22_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_6.37.41_pk5mjq.png" alt="athena-1"></p><p>생성 하면 default로 primary가 되어 있기 때문에 이번에 생성한 걸로 바꿔 준다.</p><h3 id="데이터베이스-생성"><a href="#데이터베이스-생성" class="headerlink" title="데이터베이스 생성"></a>데이터베이스 생성</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> log_db</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1590048696/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-05-21_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_5.11.13_c9r2n6.png" alt="athena-3"></p><h3 id="테이블-생성"><a href="#테이블-생성" class="headerlink" title="테이블 생성"></a>테이블 생성</h3><p>내가 만든 데이터베이스를 선택 하고 테이블을 생성 한다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> user_log (</span><br><span class="line">  userId <span class="keyword">string</span>,</span><br><span class="line">  <span class="keyword">password</span> <span class="keyword">string</span>,</span><br><span class="line">  gameData <span class="keyword">struct</span>&lt;</span><br><span class="line">    gameId:<span class="keyword">string</span>,</span><br><span class="line">    sessionKey:<span class="keyword">string</span>,</span><br><span class="line">    userLocale:<span class="keyword">struct</span>&lt;</span><br><span class="line">      locale:<span class="keyword">string</span>,</span><br><span class="line">      createAt:<span class="built_in">timestamp</span>,</span><br><span class="line">      unix:<span class="built_in">bigint</span></span><br><span class="line">    &gt;,</span><br><span class="line">    <span class="keyword">name</span>:<span class="keyword">string</span>,</span><br><span class="line">    scores:<span class="built_in">array</span>&lt;<span class="built_in">int</span>&gt;,</span><br><span class="line">    item:<span class="built_in">array</span>&lt;<span class="keyword">struct</span>&lt;</span><br><span class="line">      itemId:<span class="keyword">string</span>,</span><br><span class="line">      itemAmount:<span class="built_in">int</span></span><br><span class="line">    &gt;&gt;</span><br><span class="line">  &gt;</span><br><span class="line">) PARTITIONED <span class="keyword">BY</span> (<span class="keyword">year</span> <span class="built_in">int</span>, <span class="keyword">month</span> <span class="built_in">int</span>, <span class="keyword">day</span> <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">ROW</span> <span class="keyword">FORMAT</span> SERDE <span class="string">&#x27;org.apache.hive.hcatalog.data.JsonSerDe&#x27;</span></span><br><span class="line">LOCATION <span class="string">&#x27;s3://athena-delryn-test/logs/users/&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>테이블의 필드는 json의 키, 데이터 타입은 <a href="https://docs.aws.amazon.com/ko_kr/athena/latest/ug/data-types.html">링크</a>에서 확인</li><li>PARTITIONED을 거는 이유는 s3에서 쿼리 시 모든 파일을 스캔 하기 떄문에 비용이 많이 들고 쿼리 응답 지연 시간이 늘어나기 때문에 지정을 해줘야 비용, 성능 상으로 모두 좋다.</li><li>ROW FORMAT SERDE은 그냥 json 데이터니 json 라이브러리 추가</li><li>LOCATION은 분석할 데이터가 보관되어 있는 s3 경로</li></ul><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1590141952/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-05-22_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_7.05.37_b6ukic.png" alt="athena-4"></p><h3 id="파티션-로드"><a href="#파티션-로드" class="headerlink" title="파티션 로드"></a>파티션 로드</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MSCK <span class="keyword">REPAIR</span> <span class="keyword">TABLE</span> user_log;</span><br></pre></td></tr></table></figure><p>위에서 적은 단점이 이 부분인데 좀 더 자세하게 예로 들자면</p><p>현재 일일별로 파티션을 걸어놨기 때문에 오늘(5월 22일) 파티션 로드 시 s3에 22일에 업로드된 </p><p>데이터들(로드 이후에도 업로드 되는 데이터까지) 쿼리가 가능 하다.</p><p>그러나 다음 날(23일)에 s3에 데이터가 업로드 되고 파티션 로드를 안한 상태에서는 </p><p>22일자 데이터로만 쿼리가 가능 해서 파티션 로드를 당일 다시 해줘야 23일자 데이터도 쿼리로 </p><p>읽을 수 있다 그러므로 일일별로 하루에 한번 파티션 로드를 해줘야 한다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> user_log <span class="keyword">ADD</span> <span class="keyword">PARTITION</span> (<span class="keyword">year</span> = 년, <span class="keyword">month</span> = 월, <span class="keyword">day</span> = 일) LOCATION <span class="string">&#x27;s3://athena-delryn-test/logs/users/&#x27;</span></span><br></pre></td></tr></table></figure><p>나는 일일 00시 지나가고 나서 Lambda CloudWatchEvent로 cron을 돌렸었다.</p><h3 id="쿼리-실행"><a href="#쿼리-실행" class="headerlink" title="쿼리 실행"></a>쿼리 실행</h3><p>결과를 볼 수 있게 쿼리를 실행 해 본다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="string">&quot;log_db&quot;</span>.<span class="string">&quot;user_log&quot;</span> <span class="keyword">where</span> gamedata.userlocale.locale = <span class="string">&#x27;ko_KR&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1590142863/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-05-22_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_7.20.18_dherd6.png" alt="쿼리 결과"></p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://bunjang.github.io/back-end/2019/03/11/bunjang-athena.html">번개장터 기술 블로그</a></li><li><a href="https://blog.skeddly.com/2016/12/using-compressed-json-data-with-amazon-athena.html">Using Compressed JSON Data With Amazon Athena</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Amazon Linux2에서 timezone 변경 해보기</title>
      <link href="/2019/05/12/etc-aws-ec2-timezone/"/>
      <url>/2019/05/12/etc-aws-ec2-timezone/</url>
      
        <content type="html"><![CDATA[<h2 id="리눅스의-default-timezone"><a href="#리눅스의-default-timezone" class="headerlink" title="리눅스의 default timezone"></a>리눅스의 default timezone</h2><p>기본적으로 utc 0으로 설정 되어 있다.</p><p>아래는 ec2에서 date를 찍을 떄와 moment-timezone를 이용해서 한국 시간(utc +9)으로 찍은 차이</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1589277249/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-05-12_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_6.53.13_tfzqne.png" alt="date"></p><h2 id="변경-방법-실습"><a href="#변경-방법-실습" class="headerlink" title="변경 방법 실습"></a>변경 방법 실습</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;clock # 파일을 연 후</span><br><span class="line">ZONE&#x3D;&quot;Asia&#x2F;Seoul&quot; # 처음에는 ZONE&#x3D;&quot;UTC&quot;로 되어 있는데 이 부분을 변경 해준다.</span><br></pre></td></tr></table></figure><p>그리고 vim에서 나온 후 다음 명령어를 쳐 준다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime <span class="comment"># 인스턴스가 현지 시간 정보를 참조할 때 표준 시간대 파일을 찾을 수 있도록 /etc/localtime과 표준 시간대 파일 사이에 심볼 링크를 생성</span></span><br><span class="line">sudo reboot <span class="comment"># 시스템 재부팅 ssh에서 팅겨져 나온다.</span></span><br></pre></td></tr></table></figure><p>다시 앱에서 확인하는 경우 제대로 한국 시간으로 출력 된다. </p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1589277838/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2020-05-12_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_7.03.43_lw5vlf.png" alt="date"></p><h2 id="ElasticBeanstalk"><a href="#ElasticBeanstalk" class="headerlink" title="ElasticBeanstalk"></a>ElasticBeanstalk</h2><p>프로젝트 절대 경로에 .ebextensions 폴더를 생성을 한다.</p><p>그 안에 00-set-timezone.config 파일 생성</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">commands:</span><br><span class="line">  set_time_zone:</span><br><span class="line">    command: ln -f -s &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Asia&#x2F;Seoul &#x2F;etc&#x2F;localtime</span><br></pre></td></tr></table></figure><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/set-time.html#change_time_zone">Linux 인스턴스의 시간 설정</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 사용해보기</title>
      <link href="/2019/03/01/go-study-gin/"/>
      <url>/2019/03/01/go-study-gin/</url>
      
        <content type="html"><![CDATA[<h2 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// router := gin.Default() // default로 해도 기본적인건 다 된다</span></span><br><span class="line"></span><br><span class="line">router := gin.New() <span class="comment">// 커스텀을 하고 싶으면 이걸로.</span></span><br><span class="line"></span><br><span class="line">router.Use(gin.LoggerWithFormatter(<span class="function"><span class="keyword">func</span><span class="params">(param gin.LogFormatterParams)</span> <span class="title">string</span></span> &#123; <span class="comment">// 커스텀 로그 (아파치에서 출력하는 형식)</span></span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%s - [%s] \&quot;%s %s %s %d %s \&quot;%s\&quot; %s\&quot;\n&quot;</span>,</span><br><span class="line">param.ClientIP,</span><br><span class="line">param.TimeStamp.Format(time.RFC1123),</span><br><span class="line">param.Method,</span><br><span class="line">param.Path,</span><br><span class="line">param.Request.Proto,</span><br><span class="line">param.StatusCode,</span><br><span class="line">param.Latency,</span><br><span class="line">param.Request.UserAgent(),</span><br><span class="line">param.ErrorMessage,</span><br><span class="line">)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">router.Use(gin.Recovery()) <span class="comment">// go panic -&gt; recover 하는 미들웨어.</span></span><br><span class="line"></span><br><span class="line">router.LoadHTMLGlob(<span class="string">&quot;view/*&quot;</span>) <span class="comment">// view 폴더 설정</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// METHOD GET</span></span><br><span class="line">router.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;index.html&quot;</span>, gin.H&#123; <span class="comment">// Go로 HTMl 자주 뿌리진 않겟지만 쓰려면 이렇게.. view에서 읽을 땐 html 참고, 템플릿 엔진은 핸들바랑 비슷 (.빼고)</span></span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;Golang&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">http 패키지에 상태를 나타내는 변수 모음 몇가지만.</span></span><br><span class="line"><span class="comment">http.StatusOK = 200</span></span><br><span class="line"><span class="comment">http.StatusBadRequest = 400</span></span><br><span class="line"><span class="comment">http.StatusForbidden = 403</span></span><br><span class="line"><span class="comment">http.StatusNotFound = 404</span></span><br><span class="line"><span class="comment">http.StatusInternalServerError = 500</span></span><br><span class="line"><span class="comment">http.StatusBadGateway = 502</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리디렉션.</span></span><br><span class="line">router.GET(<span class="string">&quot;/re&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.Redirect(http.StatusMovedPermanently, <span class="string">&quot;http://localhost:3000/&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 라우팅을 그룹으로 묶을 수 있다. 버전별 API 만들 때 좋은듯.</span></span><br><span class="line">v1 := router.Group(<span class="string">&quot;/v1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">v1.GET(<span class="string">&quot;/path/:param&quot;</span>, readPathParam)</span><br><span class="line">v1.GET(<span class="string">&quot;/query&quot;</span>, getQueryString)</span><br><span class="line">v1.POST(<span class="string">&quot;/login&quot;</span>, loginV1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// version v2</span></span><br><span class="line">v2 := router.Group(<span class="string">&quot;/v2&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">v2.POST(<span class="string">&quot;/login&quot;</span>, loginV2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// router.Run(&quot;:3000&quot;) // 기본 실행? 안의 인자는 포트번호.</span></span><br><span class="line"></span><br><span class="line">server := &amp;http.Server&#123; <span class="comment">// http 설정을 커스텀하고 싶으면 요렇게.</span></span><br><span class="line">Addr:           <span class="string">&quot;:3000&quot;</span>, <span class="comment">// port</span></span><br><span class="line">Handler:        router,</span><br><span class="line">ReadTimeout:    <span class="number">10</span> * time.Second,</span><br><span class="line">WriteTimeout:   <span class="number">10</span> * time.Second,</span><br><span class="line">MaxHeaderBytes: <span class="number">1</span> &lt;&lt; <span class="number">20</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server.ListenAndServe() <span class="comment">// http config 설정 후 기동.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">METHOD GET, URL path를 파라미터로 쓰는 경우.</span></span><br><span class="line"><span class="comment">특이하게 path param이 비어 있으면 자동으로 403으로 응답한다. 예외 처리를 안해도 됨.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readPathParam</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">param := c.Param(<span class="string">&quot;param&quot;</span>)</span><br><span class="line"></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;code&quot;</span>:    <span class="number">200</span>,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: param,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 쿼리스트링</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getQueryString</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">id := c.Query(<span class="string">&quot;id&quot;</span>)                           <span class="comment">// 원하는 쿼리스트링 값 읽기</span></span><br><span class="line">isGuest := c.DefaultQuery(<span class="string">&quot;isGuest&quot;</span>, <span class="string">&quot;false&quot;</span>) <span class="comment">// 쿼리스트링이 비엇을 시 기본 값 대체하는 법 따로 조건처리 안해도 되는군..</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(id) == <span class="number">0</span> &#123; <span class="comment">// 문자열로 들어오기 땜에 nil과 비교가 안된다.. 길이로 비교해야 함..</span></span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class="line"><span class="string">&quot;code&quot;</span>:    <span class="number">403</span>,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;parameter check&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> <span class="comment">// return을 명시한 이유는 여기서 멈추기 위해.. 안 그러면 아래 응답을 이어서 보내버린다.. 나머지 return도 마찬가지.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;id&quot;</span>:      id,</span><br><span class="line"><span class="string">&quot;isGuest&quot;</span>: isGuest,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;code&quot;</span>:    <span class="number">200</span>,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line"><span class="string">&quot;data&quot;</span>:    data,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// User - 구조체</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">ID    <span class="keyword">string</span> <span class="string">`json:&quot;id&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Name  <span class="keyword">string</span> <span class="string">`json:&quot;name&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Phone <span class="keyword">string</span> <span class="string">`json:&quot;phone&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// User2 - 구조체</span></span><br><span class="line"><span class="keyword">type</span> User2 <span class="keyword">struct</span> &#123;</span><br><span class="line">ID    <span class="keyword">string</span> <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Name  <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Phone <span class="keyword">string</span> <span class="string">`json:&quot;phone&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// METHOD POST 인 경우.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loginV1</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> params User <span class="comment">// 위에 선언한 Test 구조체임.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindJSON(&amp;params); err != <span class="literal">nil</span> &#123; <span class="comment">// 바인딩할 떄 required에 빈 값이 드러온 경우.</span></span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;</span><br><span class="line"><span class="string">&quot;code&quot;</span>:    <span class="number">403</span>,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;parameter check&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">log.Print(err.Error())</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;params&quot;</span>, params)</span><br><span class="line"></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;code&quot;</span>:    <span class="number">200</span>,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line"><span class="string">&quot;version&quot;</span>: <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loginV2</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> params User2 <span class="comment">// 위에 선언한 Test 구조체임.</span></span><br><span class="line"></span><br><span class="line">c.BindJSON(&amp;params) <span class="comment">// 바인딩을 안할 시 body json 받는 법.</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;params&quot;</span>, params)</span><br><span class="line"></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;code&quot;</span>:    <span class="number">200</span>,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line"><span class="string">&quot;version&quot;</span>: <span class="string">&quot;v2&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios에서 Bigint가 포함된 JSON 파싱하기</title>
      <link href="/2019/02/24/nodejs-parse-bigint-json/"/>
      <url>/2019/02/24/nodejs-parse-bigint-json/</url>
      
        <content type="html"><![CDATA[<p>자바스크립트의 숫자형의 범위는 아래와 같다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;최소범위&#x27;</span>, <span class="built_in">Math</span>.pow(<span class="number">-2</span>, <span class="number">53</span>) - <span class="number">1</span>); <span class="comment">// -9007199254740992</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;최대범위&#x27;</span>, <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span>); <span class="comment">// 9007199254740991</span></span><br></pre></td></tr></table></figure><p>타사 API를 사용하던 중 UUID가 자료형의 범위를 넘기는 숫자가 들어온 적이 잇엇다.</p><p>검색을 해보니 <a href="https://www.npmjs.com/package/json-bigint">json-bigint</a>라는 모듈을 통해 해결을 하였다.</p><p>재현을 해보기 위해 파이썬의 플라스크로 가볍게 큰 숫자를 응답해주는 서버를 띄워보자.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;code&quot;</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="string">&quot;message&quot;</span>: <span class="string">&quot;SUCEESS&quot;</span>,</span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="number">328381293434898918</span></span><br><span class="line">    &#125;</span><br><span class="line">    jsonString = json.dumps(data)</span><br><span class="line">    <span class="keyword">return</span> jsonString</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.debug = <span class="literal">False</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, port=<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><p>통상적으로 보낼 경우에는 아래와 같이 결과를 받을 것이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = response.data;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      &quot;code&quot;: 200,</span></span><br><span class="line"><span class="comment">      &quot;message&quot;: &quot;SUCEESS&quot;,</span></span><br><span class="line"><span class="comment">      &quot;value&quot;: 328381293434898940</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>json-bigint를 사용해서 받아보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> JSONbig = <span class="built_in">require</span>(<span class="string">&#x27;json-bigint&#x27;</span>);</span><br><span class="line"></span><br><span class="line">axios(&#123;</span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">    transformResponse: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSONbig.parse(data);</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = response.data;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;jp2&#x27;</span>, data.value.toString()); <span class="comment">// jp2 328381293434898918</span></span><br><span class="line">    </span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://stackoverflow.com/questions/18755125/node-js-is-there-any-proper-way-to-parse-json-with-large-numbers-long-bigint">node.js is there any proper way to parse JSON with large numbers? (long, bigint, int64)</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go에서 JSON, HTTP client 사용법 정리</title>
      <link href="/2019/02/21/go-use-json-http/"/>
      <url>/2019/02/21/go-use-json-http/</url>
      
        <content type="html"><![CDATA[<p>Go에서 JSON을 사용하려면 먼저 표준 패키지인 ncoding/json 패키지를 import 해야 한다.</p><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="구조체-gt-JSON"><a href="#구조체-gt-JSON" class="headerlink" title="구조체 -&gt; JSON"></a>구조체 -&gt; JSON</h3><p>Go에서 구조체를 JSON 문자열로 변환하는 법부터 적는다.</p><p>좀 당황스러웟던 건 구조체의 변수가 첫 글자가 대문자여야 된다.</p><p>그리고 JSON 문자열 만들 때 리턴 값이 2개다</p><p>첫 번째 리턴은 JSON 문자열 데이터, 2번쨰 리턴은 문자열 만드는게 실패 했을 경우의 에러</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// User - 유저 구조체</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID   <span class="keyword">string</span></span><br><span class="line">    Name <span class="keyword">string</span></span><br><span class="line">    Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">u := User&#123;&#125;</span><br><span class="line"></span><br><span class="line">u.ID = <span class="string">&quot;onepiece&quot;</span></span><br><span class="line">u.Name = <span class="string">&quot;luffy&quot;</span></span><br><span class="line">u.Age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">uToJSON, err := json.Marshal(u)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;uToJSON:&quot;</span>, <span class="keyword">string</span>(uToJSON)) <span class="comment">// uToJSON &#123;&quot;ID&quot;:&quot;onepiece&quot;,&quot;Name&quot;:&quot;luffy&quot;,&quot;Age&quot;:18&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위에서 언급한듯이 대문자를 써야 하기 때문에 내 JSON 문자열도 대문자로 들어간다</p><p>소문자로 하기 위해선 다음과 같이 해야 함.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// User2 - 유저2 구조체</span></span><br><span class="line"><span class="keyword">type</span> User2 <span class="keyword">struct</span> &#123;</span><br><span class="line">ID   <span class="keyword">string</span> <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Age  <span class="keyword">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">u2 := <span class="built_in">new</span>(User2)</span><br><span class="line"></span><br><span class="line">u2.ID = <span class="string">&quot;neverland&quot;</span></span><br><span class="line">u2.Name = <span class="string">&quot;emma&quot;</span></span><br><span class="line">u2.Age = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">u2ToJSON, _ := json.Marshal(u2)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;u2ToJSON:&quot;</span>, <span class="keyword">string</span>(u2ToJSON)) <span class="comment">// u2ToJSON &#123;&quot;id&quot;:&quot;neverland&quot;,&quot;name&quot;:&quot;emma&quot;,&quot;age&quot;:10&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>저런식으로 정의를 해줘야 함. 좀 귀찮게 되어 잇다;;</p><p>그리고 마지막에 string()으로 감싸줘야 문자열로 된다. 안 그러면 바이너리 같은 형식으로 되어 있음.</p><p>아래처럼 key안에 또 다른 key/value가 잇는 JSON 같은 경우에는 구조체 안의 구조체로.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;aa&quot;</span>: <span class="string">&quot;xx&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;bb&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;z&quot;</span>: <span class="string">&quot;z&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Anime - 애니매 구조체</span></span><br><span class="line"><span class="keyword">type</span> Anime <span class="keyword">struct</span> &#123;</span><br><span class="line">    Title   <span class="keyword">string</span> <span class="string">`json:&quot;title&quot;`</span></span><br><span class="line">    Year    <span class="keyword">int</span>    <span class="string">`json:&quot;year&quot;`</span></span><br><span class="line">    Heroine Heroine <span class="comment">// 요런식으로 밑의 구조체를 추가</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Heroine - 여히로인 *-_-* 구조체</span></span><br><span class="line"><span class="keyword">type</span> Heroine <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">    Age  <span class="keyword">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    ani := <span class="built_in">new</span>(Anime)</span><br><span class="line"></span><br><span class="line">    ani.Title = <span class="string">&quot;방패용사 성공담&quot;</span></span><br><span class="line">    ani.Year = <span class="number">2019</span></span><br><span class="line">    ani.Heroine.Name = <span class="string">&quot;필로&quot;</span></span><br><span class="line">    ani.Heroine.Age = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    aniToJSON, _ := json.Marshal(ani)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;aniToJSON:&quot;</span>, <span class="keyword">string</span>(aniToJSON)) <span class="comment">// aniToJSON &#123;&quot;title&quot;:&quot;방패용사 성공담&quot;,&quot;year&quot;:2019,&quot;Heroine&quot;:&#123;&quot;name&quot;:&quot;필로&quot;,&quot;age&quot;:1&#125;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="맵-gt-JSON"><a href="#맵-gt-JSON" class="headerlink" title="맵 -&gt; JSON"></a>맵 -&gt; JSON</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> myMap <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">    myMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">    myMap[<span class="string">&quot;a&quot;</span>] = <span class="string">&quot;apple&quot;</span></span><br><span class="line">    myMap[<span class="string">&quot;b&quot;</span>] = <span class="string">&quot;banana&quot;</span></span><br><span class="line"></span><br><span class="line">    myMapToJSON, _ := json.Marshal(myMap)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;myMapToJSON:&quot;</span>, <span class="keyword">string</span>(myMapToJSON)) <span class="comment">// myMapToJSON: &#123;&quot;a&quot;:&quot;apple&quot;,&quot;b&quot;:&quot;banana&quot;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="인터페이스-gt-JSON"><a href="#인터페이스-gt-JSON" class="headerlink" title="인터페이스 -&gt; JSON"></a>인터페이스 -&gt; JSON</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">        <span class="string">&quot;a&quot;</span>: <span class="string">&quot;hi&quot;</span>,</span><br><span class="line">        <span class="string">&quot;b&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;c&quot;</span>: <span class="number">33</span>,</span><br><span class="line">        <span class="string">&quot;d&quot;</span>: []<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">            <span class="string">&quot;array1&quot;</span>,</span><br><span class="line">            <span class="string">&quot;array2&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;e&quot;</span>: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">            <span class="string">&quot;x&quot;</span>: <span class="string">&quot;x&quot;</span>,</span><br><span class="line">            <span class="string">&quot;y&quot;</span>: <span class="string">&quot;y&quot;</span>,</span><br><span class="line">            <span class="string">&quot;z&quot;</span>: <span class="string">&quot;z&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mToJSON, _ := json.Marshal(m)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;mToJSON:&quot;</span>, <span class="keyword">string</span>(mToJSON)) <span class="comment">// mToJSON &#123;&quot;a&quot;:&quot;hi&quot;,&quot;b&quot;:true,&quot;c&quot;:33,&quot;d&quot;:[&quot;array1&quot;,&quot;array2&quot;],&quot;e&quot;:&#123;&quot;x&quot;:&quot;x&quot;,&quot;y&quot;:&quot;y&quot;,&quot;z&quot;:&quot;z&quot;&#125;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON-파싱"><a href="#JSON-파싱" class="headerlink" title="JSON 파싱"></a>JSON 파싱</h3><p>읽을 샘플 데이터</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;int&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;str&quot;</span>: <span class="string">&quot;aaa&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;arr&quot;</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    <span class="attr">&quot;obj&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;x&quot;</span>: <span class="string">&quot;x&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;y&quot;</span>: <span class="string">&quot;y&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;all&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;obj2&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;obj3&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;a&quot;</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;b&quot;</span>: <span class="string">&quot;b&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;bool&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;arr2&quot;</span>: [<span class="string">&quot;q&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;e&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>io/ioutil라는 표준 패키지를 통해 파일을 읽을 수 잇음.</p><h3 id="JSON-gt-인터페이스"><a href="#JSON-gt-인터페이스" class="headerlink" title="JSON -&gt; 인터페이스"></a>JSON -&gt; 인터페이스</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    myJSON, err := ioutil.ReadFile(<span class="string">&quot;./sample.json&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;myJSON:&quot;</span>, <span class="keyword">string</span>(myJSON)) <span class="comment">// 위의 샘플 json 문자열인 상태.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 먼저 담을 인터페이스를 만드러준다.</span></span><br><span class="line">    <span class="keyword">var</span> myJSONparse <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 에러 담을 변수(JSON parse 실패 시 리턴.) := json.Unmarshal(JSON 문자열, 담을 인터페이스나 구조체의 포인터)</span></span><br><span class="line">    e := json.Unmarshal(myJSON, &amp;myJSONparse) <span class="comment">// 이게 파싱하는 구문. </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(e)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(myJSONparse) <span class="comment">// map[int:3 str:aaa bool:true arr:[1 2 3] obj:map[x:x y:y] all:map[obj2:map[obj3:map[a:a b:b] bool:false arr2:[q w e]]]]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    myInt := myJSONparse[<span class="string">&quot;int&quot;</span>]</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;myInt:&quot;</span>, myInt) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">    myStr := myJSONparse[<span class="string">&quot;str&quot;</span>]</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;myStr:&quot;</span>, myStr) <span class="comment">// aaa</span></span><br><span class="line"></span><br><span class="line">    myBool := myJSONparse[<span class="string">&quot;bool&quot;</span>]</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;myBool:&quot;</span>, myBool) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">    all := myJSONparse[<span class="string">&quot;all&quot;</span>]</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">`myJSONparse[&quot;all&quot;]:`</span>, all) <span class="comment">// myJSONparse[&quot;all&quot;] map[obj2:map[obj3:map[a:a b:b] bool:false arr2:[q w e]]]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 인터페이스 안의 맵들은 앞에 map 인터페이스를 붙여줘야 된다, 안 하면 에러가 난다..</span></span><br><span class="line">    obj2 := all.(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)[<span class="string">&quot;obj2&quot;</span>]</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;obj2&quot;</span>, obj2) <span class="comment">// map[obj3:map[a:a b:b] bool:false arr2:[q w e]]</span></span><br><span class="line"></span><br><span class="line">    obj3 := obj2.(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)[<span class="string">&quot;obj3&quot;</span>]</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;obj3:&quot;</span>, obj3) <span class="comment">// obj3: map[a:a b:b]</span></span><br><span class="line"></span><br><span class="line">    obj3A := obj3.(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)[<span class="string">&quot;a&quot;</span>]</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;obj3.a:&quot;</span>, obj3A) <span class="comment">// obj3.a: a</span></span><br><span class="line"></span><br><span class="line">    obj3B := obj3.(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)[<span class="string">&quot;b&quot;</span>]</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;obj3.b:&quot;</span>, obj3B) <span class="comment">// obj3.b: b</span></span><br><span class="line"></span><br><span class="line">    obj3C := obj3.(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)[<span class="string">&quot;c&quot;</span>]</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;obj3.c:&quot;</span>, obj3C) <span class="comment">// obj3.c: &lt;nil&gt; 업는 값이니깐</span></span><br><span class="line"></span><br><span class="line">    obj2Bool := obj2.(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)[<span class="string">&quot;bool&quot;</span>]</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;obj2.bool:&quot;</span>, obj2Bool) <span class="comment">// obj2.bool: false</span></span><br><span class="line"></span><br><span class="line">    obj2Arr2 := obj2.(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)[<span class="string">&quot;arr2&quot;</span>]</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;obj2.arr:&quot;</span>, obj2Arr2) <span class="comment">// obj2.arr: [q w e]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON-gt-구조체"><a href="#JSON-gt-구조체" class="headerlink" title="JSON -&gt; 구조체"></a>JSON -&gt; 구조체</h3><p>구조체를 조낸 정의해서 받아야 함.. -_-</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// parseJSON - JSON 1depth</span></span><br><span class="line"><span class="keyword">type</span> parseJSON <span class="keyword">struct</span> &#123;</span><br><span class="line">    Int  <span class="keyword">int</span>      <span class="string">`json:&quot;int&quot;`</span></span><br><span class="line">    Str  <span class="keyword">string</span>   <span class="string">`json:&quot;str&quot;`</span></span><br><span class="line">    Bool <span class="keyword">bool</span>     <span class="string">`json:&quot;bool&quot;`</span></span><br><span class="line">    Arr  []<span class="keyword">int</span>    <span class="string">`json:&quot;arr&quot;`</span></span><br><span class="line">    Obj  FirstObj <span class="string">`json:&quot;obj&quot;`</span></span><br><span class="line">    All  FirstAll <span class="string">`json:&quot;all&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FirstObj - JSON 1depth obj</span></span><br><span class="line"><span class="keyword">type</span> FirstObj <span class="keyword">struct</span> &#123;</span><br><span class="line">    X <span class="keyword">string</span> <span class="string">`json:&quot;x&quot;`</span></span><br><span class="line">    Y <span class="keyword">string</span> <span class="string">`json:&quot;y&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FirstAll - JSON 1depth all</span></span><br><span class="line"><span class="keyword">type</span> FirstAll <span class="keyword">struct</span> &#123;</span><br><span class="line">    All SecondObj2 <span class="string">`json:&quot;obj2&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SecondObj2 - JSON 2depth obj2</span></span><br><span class="line"><span class="keyword">type</span> SecondObj2 <span class="keyword">struct</span> &#123;</span><br><span class="line">    Obj3 thirdObj3 <span class="string">`json:&quot;obj3&quot;`</span></span><br><span class="line">    Bool <span class="keyword">bool</span>      <span class="string">`json:&quot;bool&quot;`</span></span><br><span class="line">    Arr2 []<span class="keyword">string</span>  <span class="string">`json:&quot;arr2&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// thirdObj3 - JSON 3depth obj3</span></span><br><span class="line"><span class="keyword">type</span> thirdObj3 <span class="keyword">struct</span> &#123;</span><br><span class="line">    A <span class="keyword">string</span> <span class="string">`json:&quot;a&quot;`</span></span><br><span class="line">    B <span class="keyword">string</span> <span class="string">`json:&quot;b&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    myJSON, err := ioutil.ReadFile(<span class="string">&quot;./sample.json&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;myJSON:&quot;</span>, <span class="keyword">string</span>(myJSON))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res := parseJSON&#123;&#125;</span><br><span class="line"></span><br><span class="line">    parseErr := json.Unmarshal(myJSON, &amp;res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> parseErr != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(parseErr)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(res) <span class="comment">// &#123;3 aaa true [1 2 3] &#123;x y&#125; &#123;&#123;&#123;a b&#125; false [q w e]&#125;&#125;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>확인용으로 Express로 하나 띄움</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">  extended: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;listen&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/q&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.status(<span class="number">200</span>).send(&#123;<span class="attr">code</span>: <span class="number">200</span>, <span class="attr">message</span>: <span class="string">&quot;hi&quot;</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/q2&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.status(<span class="number">403</span>).send(&#123;<span class="attr">code</span>: <span class="number">403</span>, <span class="attr">message</span>: <span class="string">&quot;403&quot;</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/q3&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.status(<span class="number">500</span>).send(&#123;<span class="attr">code</span>: <span class="number">500</span>, <span class="attr">message</span>: <span class="string">&quot;wrong&quot;</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/q4&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.query);</span><br><span class="line">    res.status(<span class="number">200</span>).send(&#123;<span class="attr">code</span>: <span class="number">200</span>, <span class="attr">message</span>: req.query.id&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/q5&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;req header: &#x27;</span>, req.headers);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;content-type: &#x27;</span>, req.headers[<span class="string">&#x27;content-type&#x27;</span>]);</span><br><span class="line">    res.status(<span class="number">200</span>).send(&#123;<span class="attr">code</span>: <span class="number">200</span>, <span class="attr">message</span>: <span class="string">&quot;hi&quot;</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/w&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;body: &#x27;</span>, req.body);</span><br><span class="line">    res.status(<span class="number">200</span>).send(&#123;<span class="attr">code</span>: <span class="number">200</span>, <span class="attr">id</span>: req.body.id, <span class="attr">name</span>: req.body.name&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/w2&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;req header: &#x27;</span>, req.headers);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;content-type: &#x27;</span>, req.headers[<span class="string">&#x27;content-type&#x27;</span>]);</span><br><span class="line">    res.status(<span class="number">200</span>).send(&#123;<span class="attr">code</span>: <span class="number">200</span>, <span class="attr">title</span>: req.body.title&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>내장 패키지 net/http를 통해 가능함.</p><h3 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h3><h4 id="쿼리스트링"><a href="#쿼리스트링" class="headerlink" title="쿼리스트링"></a>쿼리스트링</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;net/url&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    req2, err := http.NewRequest(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://localhost:3000/q4&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    q := url.Values&#123;&#125;</span><br><span class="line">q.Add(<span class="string">&quot;userId&quot;</span>, <span class="string">&quot;eqweqw12312&quot;</span>)</span><br><span class="line">q.Add(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;홍길동&quot;</span>)</span><br><span class="line">q.Add(<span class="string">&quot;api_key&quot;</span>, <span class="string">&quot;zfxgrwwewrere&quot;</span>)</span><br><span class="line"></span><br><span class="line">    req2.URL.RawQuery = q.Encode() <span class="comment">// 쿼리스트링 이스케이프</span></span><br><span class="line"></span><br><span class="line">    client2 := &amp;http.Client&#123;&#125;</span><br><span class="line"></span><br><span class="line">    res2, err := client2.Do(req2) <span class="comment">// 여기가 실제 실행하는 부분.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> res2.Body.Close()</span><br><span class="line"></span><br><span class="line">    thisBody2, err := ioutil.ReadAll(res2.Body)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;thisBody2&quot;</span>, <span class="keyword">string</span>(thisBody2)) <span class="comment">// thisBody2 &#123;&quot;code&quot;:200&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="본문-받기"><a href="#본문-받기" class="headerlink" title="본문 받기"></a>본문 받기</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> parseJSON <span class="keyword">struct</span> &#123;</span><br><span class="line">Code    <span class="keyword">int</span>    <span class="string">`json:&quot;code&quot;`</span></span><br><span class="line">Message <span class="keyword">string</span> <span class="string">`json:&quot;message&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    resp, err := http.Get(<span class="string">&quot;http://localhost:3000/q&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> resp.Body.Close() <span class="comment">// client exit</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;resp&quot;</span>, resp) <span class="comment">// resp &amp;&#123;200 OK 200 HTTP/1.1 1 1 map[Connection:[keep-alive] X-Powered-By:[Express] Content-Type:[application/json; charset=utf-8] Content-Length:[27] Etag:[W/&quot;1b-yJ5LQLosEB2UsjA+s0n8DgGAfvY&quot;] Date:[Sun, 24 Feb 2019 14:42:31 GMT]] 0xc42013c400 27 [] false false map[] 0xc42010a100 &lt;nil&gt;&#125;</span></span><br><span class="line"></span><br><span class="line">    body, err := ioutil.ReadAll(resp.Body) <span class="comment">// body를 읽으면 이렇게 해야 된다.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;body&quot;</span>, <span class="keyword">string</span>(body)) <span class="comment">// body &#123;&quot;code&quot;:200,&quot;message&quot;:&quot;hi&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">    thisRes := parseJSON&#123;&#125;</span><br><span class="line"></span><br><span class="line">    parseErr := json.Unmarshal(body, &amp;thisRes) <span class="comment">// json parse</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> parseErr != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(parseErr)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(thisRes.Code) <span class="comment">// 200</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">    <span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// myParam - JSON 파라미터</span></span><br><span class="line"><span class="keyword">type</span> myParam <span class="keyword">struct</span> &#123;</span><br><span class="line">ID   <span class="keyword">string</span> <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    thisParam := myParam&#123;&#125; <span class="comment">// 구조체.</span></span><br><span class="line"></span><br><span class="line">    thisParam.ID = <span class="string">&quot;SAO&quot;</span></span><br><span class="line">    thisParam.Name = <span class="string">&quot;kirito&quot;</span></span><br><span class="line"></span><br><span class="line">    reqParams, _ := json.Marshal(thisParam) <span class="comment">// json stringfy()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// json 문자열로 변경을 한 후 byte로 변경을 해줘야 한다. 파라미터에 string이 들어갈수가 업음..</span></span><br><span class="line"></span><br><span class="line">    buff := bytes.NewBuffer(reqParams)</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;buff&quot;</span>, buff) <span class="comment">// buff &#123;&quot;id&quot;:&quot;SAO&quot;,&quot;name&quot;:&quot;kirito&quot;&#125;</span></span><br><span class="line"></span><br><span class="line">    postRes2, err := http.Post(<span class="string">&quot;http://localhost:3000/w&quot;</span>, <span class="string">&quot;application/json&quot;</span>, buff)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> postRes2.Body.Close()</span><br><span class="line"></span><br><span class="line">    postResBody2, err := ioutil.ReadAll(postRes2.Body)</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;postResBody2&quot;</span>, <span class="keyword">string</span>(postResBody2)) <span class="comment">// postResBody2 &#123;&quot;code&quot;:200,&quot;id&quot;:&quot;SAO&quot;,&quot;name&quot;:&quot;kirito&quot;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="공통"><a href="#공통" class="headerlink" title="공통"></a>공통</h3><h4 id="헤더-추가"><a href="#헤더-추가" class="headerlink" title="헤더 추가"></a>헤더 추가</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">    <span class="string">&quot;bytes&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> jsonStr = []<span class="keyword">byte</span>(<span class="string">`&#123;&quot;title&quot;:&quot;전생했더니 슬라임이었던 건에 대하여&quot;&#125;`</span>)</span><br><span class="line"></span><br><span class="line">    req, err := http.NewRequest(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;http://localhost:3000/w2&quot;</span>, bytes.NewBuffer(jsonStr))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    req.Header.Add(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/json&quot;</span>) <span class="comment">// 이런 식으로 헤더에 추가할 수 있다.</span></span><br><span class="line">    req.Header.Add(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line"></span><br><span class="line">    client := &amp;http.Client&#123;&#125;</span><br><span class="line"></span><br><span class="line">    res, err := client.Do(req)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">defer</span> res.Body.Close()</span><br><span class="line"></span><br><span class="line">    thisBody, err := ioutil.ReadAll(res.Body)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Println(<span class="string">&quot;thisBody&quot;</span>, <span class="keyword">string</span>(thisBody)) <span class="comment">// thisBody &#123;&quot;code&quot;:200,&quot;title&quot;:&quot;전생했더니 슬라임이었던 건에 대하여&quot;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="상태-확인"><a href="#상태-확인" class="headerlink" title="상태 확인"></a>상태 확인</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;) <span class="comment">// 상태를 받기 위한 채널.</span></span><br><span class="line"></span><br><span class="line">    ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    ch3 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        resp, err := http.Get(<span class="string">&quot;http://localhost:3000/q&quot;</span>) <span class="comment">// http 메소드 GET</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">panic</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">defer</span> resp.Body.Close() <span class="comment">// http 클라이언트 종료.</span></span><br><span class="line"></span><br><span class="line">        r := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">        r[<span class="string">&quot;statusCode&quot;</span>] = resp.StatusCode <span class="comment">// 상태코드.</span></span><br><span class="line">        r[<span class="string">&quot;status&quot;</span>] = resp.Status <span class="comment">// 상태 메세지.</span></span><br><span class="line"></span><br><span class="line">        ch1 &lt;- r</span><br><span class="line"></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        resp, err := http.Get(<span class="string">&quot;http://localhost:3000/q2&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">panic</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">defer</span> resp.Body.Close() <span class="comment">// client exit</span></span><br><span class="line"></span><br><span class="line">        r := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">        r[<span class="string">&quot;statusCode&quot;</span>] = resp.StatusCode</span><br><span class="line">        r[<span class="string">&quot;status&quot;</span>] = resp.Status</span><br><span class="line"></span><br><span class="line">        ch2 &lt;- r</span><br><span class="line"></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        resp, err := http.Get(<span class="string">&quot;http://localhost:3000/q3&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">panic</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">defer</span> resp.Body.Close() <span class="comment">// client exit</span></span><br><span class="line"></span><br><span class="line">        r := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line">        r[<span class="string">&quot;statusCode&quot;</span>] = resp.StatusCode</span><br><span class="line">        r[<span class="string">&quot;status&quot;</span>] = resp.Status</span><br><span class="line"></span><br><span class="line">        ch3 &lt;- r</span><br><span class="line"></span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> index := <span class="number">0</span>; index &lt; <span class="number">3</span>; index++ &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> msg1 := &lt;-ch1:</span><br><span class="line">            fmt.Println(<span class="string">&quot;첫 번쨰 리퀘스트 http status&quot;</span>, msg1) <span class="comment">// 첫 번쨰 리퀘스트 http status map[statusCode:200 status:200 OK]</span></span><br><span class="line">        <span class="keyword">case</span> msg2 := &lt;-ch2:</span><br><span class="line">            fmt.Println(<span class="string">&quot;두 번쨰 리퀘스트 http status&quot;</span>, msg2) <span class="comment">// 두 번쨰 리퀘스트 http status map[statusCode:403 status:403 Forbidden]</span></span><br><span class="line">        <span class="keyword">case</span> msg3 := &lt;-ch3:</span><br><span class="line">            fmt.Println(<span class="string">&quot;세 번쨰 리퀘스트 http status&quot;</span>, msg3) <span class="comment">// 세 번쨰 리퀘스트 http status map[statusCode:500 status:500 Internal Server Error]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 구조체, 인터페이스 정리</title>
      <link href="/2019/02/17/go-study-4/"/>
      <url>/2019/02/17/go-study-4/</url>
      
        <content type="html"><![CDATA[<h2 id="구조체"><a href="#구조체" class="headerlink" title="구조체"></a>구조체</h2><p>변수들의 집합, JS에는 업지만 솔리디티에서 좀 써봣다.</p><p>Go는 클래스가 업기 때문에 구조체를 클래스처럼 쓰므로 잘 기억해두자.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Go 구조체 선언 방법.</span></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">id       <span class="keyword">string</span></span><br><span class="line">name     <span class="keyword">string</span></span><br><span class="line">password <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">구조체 호출 방법</span></span><br><span class="line"><span class="comment">쓰고 보니 뭔가 자바스크립트 Object 스럽다.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">a := user&#123;&#125;</span><br><span class="line">a.id = <span class="string">&quot;emma&quot;</span></span><br><span class="line">a.name = <span class="string">&quot;엠마&quot;</span></span><br><span class="line">a.password = <span class="string">&quot;neverland&quot;</span></span><br><span class="line"></span><br><span class="line">fmt.Println(a) <span class="comment">// &#123;emma 엠마 neverland&#125;</span></span><br><span class="line"></span><br><span class="line">fmt.Println(a.id) <span class="comment">// emma</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 구조체 호출 방법 new 연산자를 붙여서 쓸수 있다.</span></span><br><span class="line">b := <span class="built_in">new</span>(user)</span><br><span class="line"></span><br><span class="line">b.id = <span class="string">&quot;luffy&quot;</span></span><br><span class="line">b.name = <span class="string">&quot;루피&quot;</span></span><br><span class="line">b.password = <span class="string">&quot;onepiece&quot;</span></span><br><span class="line"></span><br><span class="line">fmt.Println(b) <span class="comment">// &amp;&#123;luffy 루피 onepiece&#125; 포인터를 리턴 한다.</span></span><br><span class="line"></span><br><span class="line">fmt.Println(b.id) <span class="comment">// luffy</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="생성자"><a href="#생성자" class="headerlink" title="생성자"></a>생성자</h3><p>구조체를 사용전에 초기화 할 필요가 있을 시 생성자 함수로 만들어서 사용을 할 수 있다고 한다.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map이 있는 구조체</span></span><br><span class="line"><span class="keyword">type</span> con <span class="keyword">struct</span> &#123;</span><br><span class="line">data <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">생성자 함수 생성</span></span><br><span class="line"><span class="comment">포인터로 해야 된다.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newCon</span><span class="params">()</span> *<span class="title">con</span></span> &#123;</span><br><span class="line">c := con&#123;&#125;</span><br><span class="line">c.data = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">return</span> &amp;c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := newCon() <span class="comment">// 생성자 호출</span></span><br><span class="line">c.data[<span class="string">&quot;a&quot;</span>] = <span class="string">&quot;A&quot;</span></span><br><span class="line"></span><br><span class="line">fmt.Println(c) <span class="comment">// &amp;&#123;map[a:A]&#125;</span></span><br><span class="line"></span><br><span class="line">fmt.Println(*c) <span class="comment">// &#123;map[a:A]&#125;</span></span><br><span class="line"></span><br><span class="line">fmt.Println(c.data[<span class="string">&quot;a&quot;</span>]) <span class="comment">// A</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Println(*c.data[&quot;a&quot;]) // err</span></span><br><span class="line"></span><br><span class="line">d := newCon()</span><br><span class="line"></span><br><span class="line">d.data[<span class="string">&quot;b&quot;</span>] = <span class="string">&quot;B&quot;</span></span><br><span class="line"></span><br><span class="line">fmt.Println(d.data) <span class="comment">// map[b:B]</span></span><br><span class="line"></span><br><span class="line">fmt.Println(d.data[<span class="string">&quot;b&quot;</span>]) <span class="comment">// B</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="메소드"><a href="#메소드" class="headerlink" title="메소드"></a>메소드</h3><p>위에서도 썻지만 Go는 클래스가 업기 때문에 구조체, 메소드로 OOP ㄱㄱ</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 유저 구조체 정의</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">id   <span class="keyword">string</span></span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age  <span class="keyword">uint8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    메소드 정의</span></span><br><span class="line"><span class="comment">    일반 함수랑 같음 파라미터만 구조체일뿐..</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span> <span class="title">getId</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> u.id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span> <span class="title">getName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> u.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span> <span class="title">getAge</span><span class="params">()</span> <span class="title">uint8</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> u.age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">user := User&#123;<span class="string">&quot;oneforall&quot;</span>, <span class="string">&quot;allforone&quot;</span>, <span class="number">99</span>&#125;</span><br><span class="line"></span><br><span class="line">id := user.getId() <span class="comment">// 메소드 호출</span></span><br><span class="line"></span><br><span class="line">name := user.getName()</span><br><span class="line"></span><br><span class="line">age := user.getAge()</span><br><span class="line"></span><br><span class="line">fmt.Println(id, name, age) <span class="comment">// oneforall allforone 99</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="포인터"><a href="#포인터" class="headerlink" title="포인터"></a>포인터</h3><p>메소드 함수를 만들 때 구조체를 포인터로 받을 수 있다.</p><p>포인터니깐.. 구조체의 원본이 당연히 달라진다.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cal <span class="keyword">struct</span> &#123;</span><br><span class="line">first  <span class="keyword">int</span></span><br><span class="line">second <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 구조체의 데이터를 copy</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Cal)</span> <span class="title">plus</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">c.first = c.first + c.second</span><br><span class="line"><span class="keyword">return</span> c.first + c.second</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Cal)</span> <span class="title">multiply</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.first * c.second</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 포인터로 쓸 경우.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Cal)</span> <span class="title">plus2</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">c.first = c.first + c.second</span><br><span class="line"><span class="keyword">return</span> c.first + c.second</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Cal)</span> <span class="title">multiply2</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.first * c.second</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cal := Cal&#123;<span class="number">1</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">plus := cal.plus()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;plus&quot;</span>, plus) <span class="comment">// plus 11</span></span><br><span class="line"></span><br><span class="line">multi := cal.multiply()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;multi_1&quot;</span>, multi) <span class="comment">// multi_1 5</span></span><br><span class="line"></span><br><span class="line">cal2 := Cal&#123;<span class="number">1</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line">plus2 := cal2.plus2()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;plus2&quot;</span>, plus2) <span class="comment">// plus2 11</span></span><br><span class="line"></span><br><span class="line">multi2 := cal2.multiply2()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;multi2&quot;</span>, multi2) <span class="comment">// multi2 30 &#123;구조체 원본 first가 바뀌엇기 때문.&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="인터페이스"><a href="#인터페이스" class="headerlink" title="인터페이스"></a>인터페이스</h2><p>구조체가 변수들의 집합이라면 인터페이스는 메소드들의 집합이다.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">인터페이스</span></span><br><span class="line"><span class="comment">메서드의 집합.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> cal <span class="keyword">interface</span> &#123;</span><br><span class="line">plus() <span class="keyword">int</span></span><br><span class="line">multiply() <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> one <span class="keyword">struct</span> &#123;</span><br><span class="line">first  <span class="keyword">int</span></span><br><span class="line">second <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> two <span class="keyword">struct</span> &#123;</span><br><span class="line">first  <span class="keyword">int</span></span><br><span class="line">second <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a one)</span> <span class="title">plus</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a.first + a.second</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a one)</span> <span class="title">multiply</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a.first * a.second</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b two)</span> <span class="title">plus</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> b.first + b.second</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b two)</span> <span class="title">multiply</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> b.first * b.second</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">구조체의 메소드를 다 정의하면</span></span><br><span class="line"><span class="comment">이런 식으로 메소드를 호출을 할 수 있다.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">showArea</span><span class="params">(cal ...cal)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> cal &#123;</span><br><span class="line">a := s.plus()  <span class="comment">//인터페이스 메서드 호출</span></span><br><span class="line">fmt.Println(a) <span class="comment">// 6 \n 60</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := one&#123;<span class="number">1</span>, <span class="number">5</span>&#125;</span><br><span class="line">b := two&#123;<span class="number">10</span>, <span class="number">50</span>&#125;</span><br><span class="line"></span><br><span class="line">showArea(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="데이터-타입"><a href="#데이터-타입" class="headerlink" title="데이터 타입"></a>데이터 타입</h3><p>인터페이스를 다이나믹 타입이라 해서 데이터 타입으로 쓸 수 잇다.</p><p>JS Object랑 비슷해보임, 위보단 이 쪽으로 마니 쓸 거 같은 느낌 아닌 느낌..?</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">인터페이스 타입으로 하면 Dynamic Type</span></span><br><span class="line"><span class="comment">선언 방법은 데이터 타입interface&#123;&#125; &#123;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">v := []<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="number">1</span>,</span><br><span class="line"><span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;hi&quot;</span>,</span><br><span class="line"><span class="string">&quot;golang&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> v &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;val:&quot;</span>, item) <span class="comment">// 1, true, hi, golang</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;a&quot;</span>: <span class="string">&quot;hi&quot;</span>,</span><br><span class="line"><span class="string">&quot;b&quot;</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;c&quot;</span>: <span class="number">33</span>,</span><br><span class="line"><span class="string">&quot;d&quot;</span>: []<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;array1&quot;</span>,</span><br><span class="line"><span class="string">&quot;array2&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;e&quot;</span>: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">&quot;x&quot;</span>: <span class="string">&quot;x&quot;</span>,</span><br><span class="line"><span class="string">&quot;y&quot;</span>: <span class="string">&quot;y&quot;</span>,</span><br><span class="line"><span class="string">&quot;z&quot;</span>: <span class="string">&quot;z&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(m) <span class="comment">// map[c:33 d:[array1 array2] e:map[x:x y:y z:z] a:hi b:true]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음에 이어서 ㄱ</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 에러, 예외 처리, 고루틴, 채널, CPU 활용 정리</title>
      <link href="/2019/02/17/go-study-5/"/>
      <url>/2019/02/17/go-study-5/</url>
      
        <content type="html"><![CDATA[<h2 id="에러"><a href="#에러" class="headerlink" title="에러"></a>에러</h2><p>JS와 다르게 에러 인자는 마지막</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;strconv&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> thisStr = <span class="string">&quot;qq&quot;</span></span><br><span class="line"></span><br><span class="line">strToInt, err := strconv.Atoi(thisStr) <span class="comment">// string -&gt; int 이 함수는 2가지를 리턴함</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(strToInt)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// log.Fatal(err.Error()) // 메세지 출력하고 프로세스 종료.</span></span><br><span class="line">log.Print(err.Error()) <span class="comment">// 메세지만 출력.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>에러를 의도적으로 만들 경우</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;errors&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">minusSample2, err := sample1(<span class="number">1</span>, <span class="number">5</span>) <span class="comment">// err test</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(minusSample2)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.Print(err.Error()) <span class="comment">// 2019/02/16 15:19:51 first is small then second</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sample1</span><span class="params">(first <span class="keyword">int</span>, second <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> first &gt;= second &#123;</span><br><span class="line"><span class="keyword">return</span> first - second, <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, errors.New(<span class="string">&quot;first is small then second&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="예외-처리"><a href="#예외-처리" class="headerlink" title="예외 처리"></a>예외 처리</h2><p>go에는 try/catch가 업다.</p><p>go에서는 에러가 나면 내장되잇는 panic() 함수가 호출이 된다. 그러면 실행하는 함수에서 멈추고</p><p>종료된다. recover()라는 내장 함수를 호출 하면 panic 상태를 다시 정상으로 롤백 함.</p><p>defer는 try/catch/finally 에서 마지막 finally와 같음.</p><p>아직은 뭔가 어색한 느낌이다 -_-</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ex(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;division 1&quot;</span>, sample2(<span class="number">2</span>, <span class="number">0</span>)) <span class="comment">// 2019/02/17 17:29:54 runtime error: integer divide by zero</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ex(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;division 2&quot;</span>, sample2(<span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sample2</span><span class="params">(first <span class="keyword">int</span>, second <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> first / second</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ex</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123; <span class="comment">// 실행할 함수를 파라미터로 받는것.</span></span><br><span class="line">startTime := time.Now() <span class="comment">// 시작 시간</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">elapsedTime := time.Since(startTime)</span><br><span class="line">fmt.Println(<span class="string">&quot;경과시간&quot;</span>, elapsedTime)</span><br><span class="line"><span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">f()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="고루틴"><a href="#고루틴" class="headerlink" title="고루틴"></a>고루틴</h2><p>Go 런타임에서 관리하는 쓰레드이다</p><p>OS 쓰레드보다 가볍게 비동기 동시성 처리를 구현하기 위해 만든 것</p><p>일반 함수 앞에 키워드로 go 붙이면 끝.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test(<span class="string">&quot;sync&quot;</span>) <span class="comment">// 함수를 동기적으로 실행</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> test(<span class="string">&quot;async&quot;</span>) <span class="comment">// 고루틴으로 함수를 비동기적으로 실행.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(param <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(param)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>근데 실행하면 고루틴 함수는 출력이 되지 않는다. 이유는 고루틴은 비동기이기 때문에</p><p>메인 함수가 먼저 실행한 뒤 종료되기 때문에 고루틴 함수는 씹힌다.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test(<span class="string">&quot;sync-2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> test(<span class="string">&quot;async-2&quot;</span>)</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Second * <span class="number">1</span>) <span class="comment">// 1초 대기.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(param <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(param)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이런식으로 하면 메인이 실행하고 종료하기까지 1초를 기다리기 때문에 고루틴이 실행이 된다.</p><h3 id="익명함수"><a href="#익명함수" class="headerlink" title="익명함수"></a>익명함수</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wait sync.WaitGroup <span class="comment">// 모든 고루틴이 종료될 때까지 대기해야 할 때 사용</span></span><br><span class="line">wait.Add(<span class="number">3</span>)             <span class="comment">// 3개의 고루틴 대기.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wait.Done() <span class="comment">// 현재 고루틴이 종료되면 호출</span></span><br><span class="line">fmt.Println(<span class="string">&quot;golang&quot;</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wait.Done()</span><br><span class="line">fmt.Println(<span class="string">&quot;Javascript&quot;</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wait.Done()</span><br><span class="line">fmt.Println(<span class="string">&quot;Python&quot;</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">wait.Wait() <span class="comment">// 위의 익명함수 고루틴들이 끝날 때까지 대기.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="채널"><a href="#채널" class="headerlink" title="채널"></a>채널</h2><p>채널을 통해 고루틴 함수끼리 또는 메인 함수와 데이터를 주고 받을 수 잇다.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch &lt;- <span class="number">123456</span> <span class="comment">// 채널에 값 보내기.</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">i := &lt;-ch <span class="comment">// 채널로부터 값 받음.</span></span><br><span class="line"></span><br><span class="line">fmt.Println(i) <span class="comment">// 123456</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>채널을 쓰게 되면 고루틴 함수가 종료될 때까지 대기하거나 그럴 필요가 업다.</p><p>채널을 사용하게 되면 송신자, 수신자가 기다리는 속성이 있어서 데이터 수신이 끝날때까지 기다리기 때문이다.</p><p>아 그리고 채널을 파라미터로 써서 함수가 해당 채널을 송신할 것인지, 수신할 것인지 지정할 수 있다.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>) <span class="comment">// 뒤에 숫자만큼 (버퍼) 채널을 생성한다는 뜻.</span></span><br><span class="line"></span><br><span class="line">send(ch2)</span><br><span class="line"></span><br><span class="line">response(ch2) <span class="comment">// send data</span></span><br><span class="line"></span><br><span class="line">ch3 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">2</span>) <span class="comment">// 2개의 버퍼를 가진 채널을 할당.</span></span><br><span class="line"></span><br><span class="line">ch3 &lt;- <span class="number">10</span></span><br><span class="line"></span><br><span class="line">ch3 &lt;- <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">close</span>(ch3) <span class="comment">// 채널 닫기 더이상 송신은 안되지만 수신은 가능하다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fmt.Println(&lt;-ch3)</span></span><br><span class="line"><span class="comment">// fmt.Println(&lt;-ch3)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> ch3 &#123; <span class="comment">// 채널은 반복문으로도 돌릴수 있군..</span></span><br><span class="line">fmt.Println(i) <span class="comment">// 10 -&gt; 다음은 20 출력.</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">send</span><span class="params">(ch <span class="keyword">chan</span>&lt;- <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">ch &lt;- <span class="string">&quot;send data&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">response</span><span class="params">(ch &lt;-<span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">data := &lt;-ch</span><br><span class="line">fmt.Println(data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>select를 통해 여러 개의 채널로부터 메세지를 기다릴수 있다.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">c2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">c3 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// time.Sleep(time.Second * 1)</span></span><br><span class="line">c1 &lt;- <span class="string">&quot;1번 말&quot;</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">time.Sleep(time.Second * <span class="number">3</span>)</span><br><span class="line">c2 &lt;- <span class="string">&quot;2번 말&quot;</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">time.Sleep(time.Second * <span class="number">5</span>)</span><br><span class="line">c3 &lt;- <span class="string">&quot;3번 말&quot;</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt; <span class="number">3</span>; index++ &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> msg1 := &lt;-c1:</span><br><span class="line">fmt.Println(<span class="string">&quot;1번 말 도착&quot;</span>, msg1)</span><br><span class="line"><span class="keyword">case</span> msg2 := &lt;-c2:</span><br><span class="line">fmt.Println(<span class="string">&quot;2번 말 도착&quot;</span>, msg2)</span><br><span class="line"><span class="keyword">case</span> msg3 := &lt;-c3:</span><br><span class="line">fmt.Println(<span class="string">&quot;3번 말 도착&quot;</span>, msg3)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>각각 채널을 생성하고 각각의 고루틴에서 쓰인다고 가정하자. (위의 처럼)</p><p>이제 반복문에서 select를 통해 각각의 고루틴에서 할당한 채널을 모두 읽게 된다.</p><p>위의 경우에 일정 딜레이를 주었지만 생략하거나 중간에 종료되지 않는다. 대기했다가 수신한다.</p><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><p>Go도 기본적으로 cpu를 1개만 쓴다. 모든 cpu를 활용하려면 아래와 같이 해야 함.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;runtime&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">thisComputerCPU := runtime.NumCPU() <span class="comment">// 현재 컴의 시피유 개수를 구하는 내장 함수.</span></span><br><span class="line">fmt.Println(<span class="string">&quot;CPU 개수:&quot;</span>, thisComputerCPU) <span class="comment">// 로컬은 인텔 i5인데 4개 나온다 나중에 AWS에서 테스트해보자.</span></span><br><span class="line"></span><br><span class="line">runtime.GOMAXPROCS(thisComputerCPU) <span class="comment">// 현재 컴의 시피유를 다 쓰겟다는 거.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 함수 및 패키지 정리</title>
      <link href="/2019/02/09/go-study-3/"/>
      <url>/2019/02/09/go-study-3/</url>
      
        <content type="html"><![CDATA[<h2 id="함수"><a href="#함수" class="headerlink" title="함수"></a>함수</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">first := <span class="string">&quot;hello world!&quot;</span></span><br><span class="line">message(first)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">message</span><span class="params">(msg <span class="keyword">string</span>)</span></span> &#123; <span class="comment">// 매개변수에는 자료형을 붙여야 함.</span></span><br><span class="line">fmt.Println(msg) <span class="comment">// hello world!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>가변인자도 지원, 슬라이스로 넘어 온다.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">manyParamter(<span class="string">&quot;go&quot;</span>, <span class="string">&quot;C++&quot;</span>, <span class="string">&quot;javascript&quot;</span>, <span class="string">&quot;python&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">manyParamter</span><span class="params">(_param ...<span class="keyword">string</span>)</span></span> &#123; <span class="comment">// ... 붙인다.</span></span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> _param &#123;</span><br><span class="line">fmt.Println(item)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>리턴 시에도 자료형을 명시해야 함.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(returnMessage(<span class="string">&quot;hi golang?&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnMessage</span><span class="params">(msg <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123; <span class="comment">// 이런식으로 인자 ) 닫고 추가.</span></span><br><span class="line"><span class="keyword">return</span> msg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다중 리턴도 지원함.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(returnMessages(<span class="string">&quot;golang&quot;</span>, <span class="string">&quot;node.js&quot;</span>, <span class="string">&quot;JAVA&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnMessages</span><span class="params">(msg ...<span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">string</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> msg[<span class="number">0</span>], msg[<span class="number">1</span>], <span class="number">20190209</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go는 포인터가 잇으니 파라미터에 주소값을 넣을 수 잇음.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="string">&quot;왼손은 거들뿐..&quot;</span></span><br><span class="line">pointerMessage(&amp;a)</span><br><span class="line">fmt.Println(a) <span class="comment">// 오른손은 ?이 출력된다. 변수 값이 바뀌엇으니깐.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pointerMessage</span><span class="params">(msg *<span class="keyword">string</span>)</span></span> &#123; <span class="comment">// 포인터일 경우에는 * 붙여줘야 함.</span></span><br><span class="line">fmt.Println(*msg) <span class="comment">// 주소에 할당된 값을 출력.</span></span><br><span class="line">*msg = <span class="string">&quot;오른손은 ?&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>익명함수 작성법</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">자바스크립트인 경우.</span></span><br><span class="line"><span class="comment">const af = (_param) -&gt; &#123;</span></span><br><span class="line"><span class="comment">return _param</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">af := <span class="function"><span class="keyword">func</span><span class="params">(param <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123; </span><br><span class="line"><span class="keyword">return</span> param</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(af(<span class="string">&quot;hello world&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="패키지"><a href="#패키지" class="headerlink" title="패키지"></a>패키지</h2><p>go에선 모듈을 패키지라 부르는 거 같음.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> timepackage <span class="comment">// 이 파일이 포함된 폴더명으로 지어줘야한다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">사용자 정의 패키지.</span></span><br><span class="line"><span class="comment">init 함수부터 만드러야 한다.</span></span><br><span class="line"><span class="comment">init 함수는 패키지가 로드 되면서 실행되는 함수로 별도의 호출 업이 자동으로 호출.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myTime <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">myTime = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>) <span class="comment">// 초기화.</span></span><br><span class="line">thisTime := time.Now() <span class="comment">// JS에서 쓰는 Date.now() 같다고 생각하면 됨.</span></span><br><span class="line">myTime[<span class="string">&quot;now&quot;</span>] = thisTime.String() <span class="comment">// time.now만 (타임 객체) .String()으로 문자열로 변환가능하다.</span></span><br><span class="line">myTime[<span class="string">&quot;yyyy-mm-dd&quot;</span>] = thisTime.Format(<span class="string">&quot;2006-01-02&quot;</span>) <span class="comment">// 원하는 포맷의 날짜는 임의가 아니고 저 날짜로 -_-</span></span><br><span class="line">myTime[<span class="string">&quot;yyyy-mm-dd HH:MM:SS&quot;</span>] = thisTime.Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>) <span class="comment">// 시간 분도 마찬가지다.</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int64는 string으로 변환할 때 FormatInt를 사용해야 한다</span></span><br><span class="line"><span class="comment">Itoa로는 안됨.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">FormatInt(숫자, 진수) 10은 10진수로 16은 16진수로.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">myTime[<span class="string">&quot;unixTimeStamp&quot;</span>] = strconv.FormatInt(thisTime.Unix(), <span class="number">10</span>)</span><br><span class="line">myTime[<span class="string">&quot;unixTimeStampNS&quot;</span>] = strconv.FormatInt(thisTime.UnixNano(), <span class="number">10</span>) <span class="comment">// MS가 아닌 나노</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">퍼블릭이면 함수시작을 대문자로</span></span><br><span class="line"><span class="comment">프라이빗이면 소문자 (외부에서 못 부름)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetMyTime</span><span class="params">()</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> myTime</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>패키지에서 함수를 만들 때 대문자로 시작하면 퍼블릭, 소문자면 프라이빗</p><p>작성한 패키지를 불러오려면 다음처럼</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;mypackage/timepackage&quot;</span> <span class="comment">// import할 땐 폴더 경로만 적어주면 된다.</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">res := timepackage.GetMyTime() <span class="comment">// 이런식으로.. 알아서 매핑이 되나보오.</span></span><br><span class="line"></span><br><span class="line">fmt.Println(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 결과</span></span><br><span class="line"><span class="comment">map[yyyy-mm-dd HH:MM:SS:2019-02-09 23:50:47 </span></span><br><span class="line"><span class="comment">unixTimeStamp:1549723847 </span></span><br><span class="line"><span class="comment">unixTimeStampNS:1549723847110405686 </span></span><br><span class="line"><span class="comment">now:2019-02-09 23:50:47.110405686 +0900 KST m=+0.000601933 </span></span><br><span class="line"><span class="comment">yyyy-mm-dd:2019-02-09]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>오늘은 요까지.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 조건문, 반복문, 콜렉션 정리</title>
      <link href="/2019/02/03/go-study-2/"/>
      <url>/2019/02/03/go-study-2/</url>
      
        <content type="html"><![CDATA[<h2 id="조건문"><a href="#조건문" class="headerlink" title="조건문"></a>조건문</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;a is 10&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b := <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> b &gt;= <span class="number">5</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;a는 5보다 크다&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> b &gt;= <span class="number">25</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;a는 25보다 크다&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;???&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">c := <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> c &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">name = <span class="string">&quot;none1&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">name = <span class="string">&quot;none2&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">name = <span class="string">&quot;none3&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>, <span class="number">5</span>:</span><br><span class="line">name = <span class="string">&quot;none4,5&quot;</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">name = <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">name = <span class="string">&quot;false&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;name&quot;</span>, name) <span class="comment">// name, true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>break가 업음.</p><h2 id="반복문"><a href="#반복문" class="headerlink" title="반복문"></a>반복문</h2><p>심플하게 for문 하나</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;i:&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>break, continue도 잇음.</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>; index &lt; <span class="number">10</span>; index++ &#123;</span><br><span class="line"><span class="keyword">if</span> index%<span class="number">2</span> != <span class="number">0</span> &#123;</span><br><span class="line">sum = sum + index</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> index == <span class="number">10</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;sum&quot;</span>, sum) <span class="comment">// 25</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="콜렉션"><a href="#콜렉션" class="headerlink" title="콜렉션"></a>콜렉션</h2><h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><p>고정 배열</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">3</span>]<span class="keyword">int</span> <span class="comment">// 배열 선언 방법. 초기값이 업는 배열의 크기를 정해줘야 한다. 그리고 자료형을 붙여준다.</span></span><br><span class="line"></span><br><span class="line">fmt.Println(a) <span class="comment">// 타입에 따라 초기 값은 [0 0 0]</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">a[<span class="number">2</span>] = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">fmt.Println(a) <span class="comment">// [1 2 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s [<span class="number">2</span>]<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">fmt.Println(s) <span class="comment">// 비어 있는 배열 같지만 아님  [ ]</span></span><br><span class="line"></span><br><span class="line">s[<span class="number">0</span>] = <span class="string">&quot;aa&quot;</span></span><br><span class="line">s[<span class="number">1</span>] = <span class="string">&quot;bb&quot;</span></span><br><span class="line"></span><br><span class="line">fmt.Println(s) <span class="comment">// [aa bb]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 = [...]<span class="keyword">string</span>&#123;<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>&#125; <span class="comment">// 초기 값을 줬을 시에 [...] 하면 초기 값의 크기 만큼 배열 크기 생성.</span></span><br><span class="line"></span><br><span class="line">fmt.Println(s2) <span class="comment">// [x y z]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// s2[3] = &quot;xy&quot; 당연히 크기를 넘어서 추가할 수가 업다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">...으로 크기 자동으로 잡아줄 시 초기 값 업으면 에러임</span></span><br><span class="line"><span class="comment">var c = [...]int</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">c[0] = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">fmt.Println(c)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p>동적 배열</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> sl []<span class="keyword">int</span> <span class="comment">// 슬라이스 선언 방법 배열과 같지만 크기만 비어두면 된다.</span></span><br><span class="line"></span><br><span class="line">fmt.Println(sl) <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sl == <span class="literal">nil</span> &#123; <span class="comment">// 비어 있는 슬라이스는 ==  nil</span></span><br><span class="line">fmt.Println(<span class="string">&quot;비어 있는 슬라이스&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sl) == <span class="number">0</span> &#123; <span class="comment">// 슬라이스나 배열의 길이는 len()함수로 알 수 있다.</span></span><br><span class="line">fmt.Println(<span class="string">&quot;길이가 0인 비어 있는 슬라이스&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sl = <span class="built_in">append</span>(sl, <span class="number">7</span>) <span class="comment">// 슬라이스의 요소 추가 JS에서 .push()랑 같은 기능이다.</span></span><br><span class="line"></span><br><span class="line">fmt.Println(sl) <span class="comment">// [7]</span></span><br><span class="line"></span><br><span class="line">sl = <span class="built_in">append</span>(sl, <span class="number">1</span>, <span class="number">3</span>) <span class="comment">// push와 마찬가지로 여러 개를 같이 추가할 수 있다.</span></span><br><span class="line"></span><br><span class="line">fmt.Println(sl) <span class="comment">// [7 1 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Go 에서 부분 슬라이스 하는 법.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">JS ex</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">let sli2 = [0,1,2,3]</span></span><br><span class="line"><span class="comment">sli2 = sli2.slice(0, 2)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">sli2 := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">sli2 = sli2[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">fmt.Println(sli2) <span class="comment">// [0 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">슬라이스 복사 c++에서 memcopy였나 그런게 있었던 같다.</span></span><br><span class="line"><span class="comment">근데 아래처럼 그냥 직접 넣어도 별 차이는 업는데.. 뭔가 다른걸까?</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">sli3 := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">sli4 := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(sli3), <span class="built_in">cap</span>(sli3))</span><br><span class="line"><span class="built_in">copy</span>(sli4, sli3)</span><br><span class="line">fmt.Println(sli3, sli4)</span><br><span class="line">sli4 = sli3[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">fmt.Println(sli4, sli3)</span><br><span class="line"></span><br><span class="line">sli5 := []<span class="keyword">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">sli6 := sli5</span><br><span class="line">sli5 = <span class="built_in">append</span>(sli5, <span class="number">7</span>)</span><br><span class="line">fmt.Println(sli5, sli6)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JS forEach 같은 거 사용.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, elem := <span class="keyword">range</span> sli5 &#123;</span><br><span class="line">fmt.Println(index, elem) <span class="comment">// 0 0 -&gt; 1 1 -&gt; 2 2 ... 5 7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index 업이 데이터만.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, elem := <span class="keyword">range</span> sli5 &#123;</span><br><span class="line">fmt.Println(elem) <span class="comment">// 0 -&gt; 1 -&gt; 2 .. 7</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> aMap <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span> <span class="comment">// vqr 변수명 map[key type]value type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> aMap == <span class="literal">nil</span> &#123; <span class="comment">// 처음 맵을 생성하면 nil 상태. 이 맵에는 아무 데이터를 쓸 수 업다.</span></span><br><span class="line">fmt.Println(<span class="string">&quot;nil map&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">aMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>) <span class="comment">// make로 초기화를 해줘야 데이터를 쓸 수 있다. 안 그러면 오류 남.</span></span><br><span class="line"></span><br><span class="line">aMap[<span class="number">0</span>] = <span class="string">&quot;Go&quot;</span> <span class="comment">// 추가나 갱신.</span></span><br><span class="line">aMap[<span class="number">1</span>] = <span class="string">&quot;Node.js&quot;</span></span><br><span class="line"></span><br><span class="line">fmt.Println(aMap) <span class="comment">// map[0:Go 1:Node.js]</span></span><br><span class="line"></span><br><span class="line">fmt.Println(aMap[<span class="number">0</span>]) <span class="comment">// Go (키 값 읽기)</span></span><br><span class="line"></span><br><span class="line">bMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">bMap[<span class="string">&quot;a&quot;</span>] = <span class="string">&quot;PHP&quot;</span></span><br><span class="line">bMap[<span class="string">&quot;b&quot;</span>] = <span class="string">&quot;JAVA&quot;</span></span><br><span class="line">bMap[<span class="string">&quot;c&quot;</span>] = <span class="string">&quot;null&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">delete</span>(bMap, <span class="string">&quot;c&quot;</span>) <span class="comment">// 키 삭제.</span></span><br><span class="line"></span><br><span class="line">fmt.Println(bMap) <span class="comment">// map[a:PHP b:JAVA]</span></span><br><span class="line"></span><br><span class="line">val, key := bMap[<span class="string">&quot;c&quot;</span>] <span class="comment">// val에는 키에 대한 value, key는 있으면 true, 업으면 false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !key &#123; <span class="comment">// 키가 존재하는 지 체크하는 방법.</span></span><br><span class="line">fmt.Println(<span class="string">&quot;c is no exist&quot;</span>)</span><br><span class="line">fmt.Println(val) <span class="comment">// &quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for문을 이용한 map 출력.</span></span><br><span class="line"><span class="comment">당연히 순서는 보장되지 않는다</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">JS</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for (var [key, value] of myMap) &#123;</span></span><br><span class="line"><span class="comment">console.log(key + &quot; = &quot; + value);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">cMap := <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="number">0</span>: <span class="string">&quot;Express&quot;</span>,</span><br><span class="line"><span class="number">1</span>: <span class="string">&quot;Flask&quot;</span>,</span><br><span class="line"><span class="number">2</span>: <span class="string">&quot;Jin&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, val := <span class="keyword">range</span> cMap &#123;</span><br><span class="line">fmt.Println(key, val)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 설치 및 설정, 주석, 출력, 변수 정리</title>
      <link href="/2019/01/27/go-study-1/"/>
      <url>/2019/01/27/go-study-1/</url>
      
        <content type="html"><![CDATA[<h2 id="설정"><a href="#설정" class="headerlink" title="설정"></a>설정</h2><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><p><a href="https://golang.org/">공식 사이트</a>에서 .dmg 받아서 설치하면 끝.</p><p>GCC가 필요하다는데 MAC 기준 Xcode땜에 그런지 따로 뭐 설치할 필욘 업엇음.</p><h3 id="workspace-설정"><a href="#workspace-설정" class="headerlink" title="workspace 설정"></a>workspace 설정</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">go-workspace</span><br><span class="line">└───bin</span><br><span class="line">└───pkg</span><br><span class="line">└───src</span><br><span class="line">│   │─── ...</span><br></pre></td></tr></table></figure><p>원하는 경로에 workspace 폴더를 만들고 위와 같은 구조로 폴더 생성을 한다</p><p>실제 프로젝트에서 사용할 폴더는 src이다.</p><h3 id="환경변수"><a href="#환경변수" class="headerlink" title="환경변수"></a>환경변수</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go env</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1548578451/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-01-27_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_5.37.59_gq4nkl.png" alt="env"></p><ul><li>GOROOT = Go가 설치된 디렉토리 + /pkg로 (Go 설치 시 자동) 여기에 표준 패키지가 있다.</li><li>GOPATH = 3rd party나 사용자 정의 패키지는 여기에서 찾는다.</li></ul><p>내가 해야할 건 GOPATH라는 부분을 사용할 workspace로 바꿔줘야 함.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bash_profile</span><br><span class="line"><span class="built_in">export</span> GOPATH=/Volumes/Seagate\ Slim\ Drive/project/golang <span class="comment"># 본인이 정한 workspace</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$GOPATH</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line">go env</span><br></pre></td></tr></table></figure><p>그럼 GOPATH가 본인의 workspace로 바뀌엇을 것.</p><h2 id="main-함수-작성"><a href="#main-함수-작성" class="headerlink" title="main 함수 작성"></a>main 함수 작성</h2><p>하나의 프로젝트엔 메인 패키지와 메인 함수가 팔수다. main.go</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="주석"><a href="#주석" class="headerlink" title="주석"></a>주석</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 한줄 주석</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">111111</span></span><br><span class="line"><span class="comment">222222</span></span><br><span class="line"><span class="comment">333333</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="출력문"><a href="#출력문" class="headerlink" title="출력문"></a>출력문</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span> <span class="comment">// fmt라는 표준 패키지 import</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;hi! golang :)&quot;</span>)        <span class="comment">// JS: console.log(&quot;hi! golang :)&quot;);</span></span><br><span class="line">fmt.Println(<span class="string">&quot;hi!&quot;</span>, <span class="string">&quot;golang&quot;</span>, <span class="string">&quot;:)&quot;</span>)  <span class="comment">// JS: console.log(&quot;hi&quot;, &quot;golang :)&quot;)</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;hi! %s\n&quot;</span>, <span class="string">&quot;golang :)&quot;</span>) <span class="comment">// JS: console.log(&quot;hi&quot;, &quot;golang :)&quot;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="변수"><a href="#변수" class="headerlink" title="변수"></a>변수</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">변수 선언</span></span><br><span class="line"><span class="comment">기본으로 변수만 선언하면 자료형에 따라 default 값 생김 숫자형은 0, 문자형은 &quot;&quot; bool은 false</span></span><br><span class="line"><span class="comment">자료형 붙이는건 필수 아님.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">기본 알아둬야 할 자료형만 적어둔다.</span></span><br><span class="line"><span class="comment">int: 32bit 시스템에선 int32, 64bit 시스템에선 int64로 자동 설정</span></span><br><span class="line"><span class="comment">int32: ~2,147,483,648 ~ 2,147,483,647,</span></span><br><span class="line"><span class="comment">int64: ~9,233,372,036,854,775,808 ~ 9,223,372,036,854,775,807</span></span><br><span class="line"><span class="comment">float32: 32bit</span></span><br><span class="line"><span class="comment">float64: 64bit</span></span><br><span class="line"><span class="comment">bool: 참, 거짓</span></span><br><span class="line"><span class="comment">string: 문자열</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tf <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;foo&quot;</span> <span class="comment">// JS: var str = &#x27;foo&#x27;</span></span><br><span class="line"></span><br><span class="line">str2 := <span class="string">&quot;bar&quot;</span> <span class="comment">// 함수 내에서만 축약 가능.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bigInt <span class="keyword">int64</span> = <span class="number">923372036854775899</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cs = <span class="string">&quot;상수&quot;</span> <span class="comment">// JS: const cs = &quot;상수&quot;</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;i:&quot;</span>, i, <span class="string">&quot;f:&quot;</span>, f, <span class="string">&quot;tf:&quot;</span>, tf, <span class="string">&quot;str:&quot;</span>, str, <span class="string">&quot;str2:&quot;</span>, str2, <span class="string">&quot;cs:&quot;</span>, cs, <span class="string">&quot;bigInt:&quot;</span>, bigInt)</span><br><span class="line"></span><br><span class="line"><span class="comment">// i: 0 f: 0 tf: false str: foo str2: bar cs: 상수 bigInt: 923372036854775899</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JS에서 ``로 출력하는 거 GO에서 하는 법.</span></span><br><span class="line"><span class="comment">const name = &quot;delryn&quot;;</span></span><br><span class="line"><span class="comment">const age = 32;</span></span><br><span class="line"><span class="comment">const message `$&#123;name&#125; is $&#123;age&#125; years old`;</span></span><br><span class="line"><span class="comment">console.log(message);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">포멧 서식자 </span></span><br><span class="line"><span class="comment">%s: 문자열</span></span><br><span class="line"><span class="comment">%d: 정수</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">name := <span class="string">&quot;delryn&quot;</span></span><br><span class="line">age := <span class="number">32</span></span><br><span class="line">message := fmt.Sprintf(<span class="string">&quot;%s is %d years old&quot;</span>, name, age)</span><br><span class="line"></span><br><span class="line">fmt.Println(message) <span class="comment">// delryn is 32 years old</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Go 타입 체크하는 법 reflect package를 import를 해야 됨.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;i:&quot;</span>, reflect.TypeOf(i), <span class="string">&quot;f:&quot;</span>, reflect.TypeOf(f), <span class="string">&quot;tf:&quot;</span>, reflect.TypeOf(tf),</span><br><span class="line"><span class="string">&quot;str:&quot;</span>, reflect.TypeOf(str), <span class="string">&quot;str2:&quot;</span>, reflect.TypeOf(str2), <span class="string">&quot;cs:&quot;</span>, reflect.TypeOf(cs), <span class="string">&quot;bigInt:&quot;</span>, reflect.TypeOf(bigInt))</span><br><span class="line"></span><br><span class="line"><span class="comment">// i: int f: float64 tf: bool str: string str2: string cs: string bigInt: int64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">go 형변환</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> thisInt = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> intToStr <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">intToStr = strconv.Itoa(thisInt) <span class="comment">// int -&gt; string</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;int to str&quot;</span>, intToStr, reflect.TypeOf(intToStr)) <span class="comment">// int to str 3 string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> thisStr = <span class="string">&quot;33&quot;</span></span><br><span class="line"></span><br><span class="line">strToInt, err := strconv.Atoi(thisStr) <span class="comment">// string -&gt; int 이거는 2가지 리턴을 받더라. 문법임 내가 추가한게 아니고.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;str to int&quot;</span>, strToInt, reflect.TypeOf(strToInt)) <span class="comment">// str to int 33 int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis를 MessageQueue 서버로 사용해보기</title>
      <link href="/2018/12/23/nodejs-redis-queue/"/>
      <url>/2018/12/23/nodejs-redis-queue/</url>
      
        <content type="html"><![CDATA[<p>테스트로 서비스의 api가 오면 redis에 큐 메세지를 등록해두고 job 으로</p><p>분마다 redis에 적재된 큐 메세지들을 읽어서 mysql에 저장 한 다음에 redis에서 삭제.</p><h2 id="로직"><a href="#로직" class="headerlink" title="로직"></a>로직</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql2&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> RedisSMQ = <span class="built_in">require</span>(<span class="string">&#x27;rsmq&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rsmq = <span class="keyword">new</span> RedisSMQ(&#123; <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="attr">port</span>: <span class="number">6379</span>, <span class="attr">ns</span>: <span class="string">&#x27;rsmq&#x27;</span> &#125;); <span class="comment">// <span class="doctag">NOTE:</span> ns는 저장할 큐의 네임스페이스</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 큐 생성</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>중복된 큐 이름은 생성 불가</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>qname 큐 이름</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> createQueue = <span class="function">(<span class="params">qname</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    rsmq.createQueue(&#123; qname &#125;, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">      <span class="keyword">if</span> (!err &amp;&amp; <span class="built_in">Number</span>(result) === <span class="number">1</span>) <span class="keyword">return</span> resolve();</span><br><span class="line">      <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;큐 생성 실패&#x27;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 메세지 전송</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>qname 큐 이름</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>message 보낼 메세지</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> sendMessage = <span class="function">(<span class="params">qname, message</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    rsmq.sendMessage(&#123; qname, message &#125;, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">      <span class="keyword">if</span> (!err &amp;&amp; <span class="built_in">Number</span>(result) === <span class="number">1</span>) <span class="keyword">return</span> resolve();</span><br><span class="line">      <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;메세지 전송 실패&#x27;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 메세지 큐 보내는 프로세스.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>qname 큐 이름</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>message 보낼 메세지</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> sendProcess = <span class="function">(<span class="params">qname, message</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    sendMessage(qname, message).then(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> resolve();</span><br><span class="line">    &#125;).catch(<span class="keyword">async</span> (e) =&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.name === <span class="string">&#x27;queueNotFound&#x27;</span>) &#123; <span class="comment">// <span class="doctag">NOTE:</span> queue를 생성 안해서 나는 오류.</span></span><br><span class="line">          <span class="keyword">await</span> createQueue(qname);</span><br><span class="line">          <span class="keyword">await</span> sendMessage(qname, message);</span><br><span class="line">          <span class="keyword">return</span> resolve();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reject(e);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 메세지 수신하기</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>qname 큐 이름</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> receiveMessage = <span class="function">(<span class="params">qname</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    rsmq.receiveMessage(&#123; qname &#125;, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err &amp;&amp; err.name === <span class="string">&#x27;queueNotFound&#x27;</span>) <span class="keyword">return</span> resolve(); <span class="comment">// <span class="doctag">NOTE:</span> 아직 등록되지 않은 큐를 읽을 시 예외 처리</span></span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">      <span class="keyword">if</span> (!err &amp;&amp; result.id) <span class="keyword">return</span> resolve(result);</span><br><span class="line">      <span class="keyword">return</span> resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> sql에 메세지 큐 내용 저장</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>data 메세지 내용</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> saveLog = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> connection = mysql.createConnection(&#123;</span><br><span class="line">      host: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">      user: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">      database: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">      waitForConnections: <span class="literal">true</span>,</span><br><span class="line">      connectionLimit: <span class="number">20</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> sql = <span class="string">&#x27;INSERT INTO `my_log` (`user_id`, `event`, `create_at`) VALUES (?, ?, ?);&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> values = <span class="built_in">JSON</span>.parse(data.message);</span><br><span class="line">    connection.execute(sql, [values.user_id, values.event, values.create_at], <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      connection.end();</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">      <span class="keyword">return</span> resolve(data.id);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> queue 삭제</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>qname 큐 이름</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>id 큐 ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> deleteMessage = <span class="function">(<span class="params">qname, id</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    rsmq.deleteMessage(&#123; qname, id &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">      <span class="keyword">return</span> resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 메세지 읽은 후 mysql에 저장, 읽은 메세지 삭제.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>qname 큐 이름</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> receiveProcess = <span class="function">(<span class="params">qname</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    receiveMessage(qname).then(<span class="keyword">async</span> (data) =&gt; &#123; <span class="comment">// <span class="doctag">NOTE:</span> queue를 꺼내서 읽음.</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> data !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> id = <span class="keyword">await</span> saveLog(data);</span><br><span class="line">          <span class="keyword">await</span> deleteMessage(qname, id);</span><br><span class="line">          <span class="keyword">return</span> resolve(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resolve(<span class="literal">false</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> reject(e);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.sendProcess = sendProcess;</span><br><span class="line"><span class="built_in">exports</span>.receiveProcess = receiveProcess;</span><br></pre></td></tr></table></figure><h2 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mt = <span class="built_in">require</span>(<span class="string">&#x27;moment-timezone&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> queue = <span class="built_in">require</span>(<span class="string">&#x27;./queue&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">  extended: <span class="literal">true</span>,</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/send&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> d = mt.tz(<span class="string">&#x27;Asia/Seoul&#x27;</span>); <span class="comment">// 서버 시간은 서울로 맞추기.</span></span><br><span class="line">  <span class="keyword">let</span> hour = d.hour(); <span class="comment">// 0 ~ 23시</span></span><br><span class="line">  <span class="keyword">let</span> min = d.minute() + <span class="number">1</span>; <span class="comment">// 0 ~ 59분 큐는 1분뒤에 꺼낼꺼라 더해준다</span></span><br><span class="line">  <span class="keyword">if</span> (min &gt; <span class="number">59</span>) &#123; <span class="comment">// 시간 예외 처리용</span></span><br><span class="line">    min = min === <span class="number">60</span> ? <span class="number">0</span> : min - <span class="number">59</span>;</span><br><span class="line">    hour = hour === <span class="number">23</span> ? <span class="number">0</span> : hour + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> qname = <span class="string">`<span class="subst">$&#123;hour&#125;</span>_<span class="subst">$&#123;min&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> data = &#123;</span><br><span class="line">    user_id: req.body.user_id,</span><br><span class="line">    event: req.body.event,</span><br><span class="line">    create_at: d.format(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>),</span><br><span class="line">  &#125;;</span><br><span class="line">  queue.sendProcess(qname, <span class="built_in">JSON</span>.stringify(data)).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.json(&#123; <span class="attr">result</span>: <span class="string">&#x27;success&#x27;</span> &#125;);</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.json(e);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;server listen&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; CronJob &#125; = <span class="built_in">require</span>(<span class="string">&#x27;cron&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mt = <span class="built_in">require</span>(<span class="string">&#x27;moment-timezone&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> queue = <span class="built_in">require</span>(<span class="string">&#x27;./queue&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> job = <span class="keyword">new</span> CronJob(<span class="string">&#x27;* * * * *&#x27;</span>, <span class="function">() =&gt;</span> &#123; <span class="comment">// <span class="doctag">NOTE:</span> 1분마다 확인.</span></span><br><span class="line">  <span class="keyword">const</span> d = mt.tz(<span class="string">&#x27;Asia/Seoul&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> hour = d.hour();</span><br><span class="line">  <span class="keyword">const</span> min = d.minute();</span><br><span class="line">  <span class="keyword">const</span> qname = <span class="string">`<span class="subst">$&#123;hour&#125;</span>_<span class="subst">$&#123;min&#125;</span>`</span>;</span><br><span class="line">  <span class="keyword">const</span> loop = <span class="keyword">async</span> () =&gt; &#123; <span class="comment">// <span class="doctag">NOTE:</span> 큐에 등록된 메세지들을 전부 다 읽기 위해 재귀로 처리를 한다.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> queue.receiveProcess(qname);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;qname&#x27;</span>, qname, <span class="string">&#x27;result&#x27;</span>, result);</span><br><span class="line">      <span class="keyword">if</span> (result) <span class="keyword">return</span> loop();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  loop();</span><br><span class="line">&#125;, <span class="literal">null</span>, <span class="literal">true</span>, <span class="string">&#x27;Asia/Seoul&#x27;</span>);</span><br><span class="line">job.start();</span><br></pre></td></tr></table></figure><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> event = [<span class="string">&#x27;join&#x27;</span>, <span class="string">&#x27;login&#x27;</span>, <span class="string">&#x27;purcharse&#x27;</span>, <span class="string">&#x27;logout&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    request(&#123;</span><br><span class="line">      method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">      uri: <span class="string">&#x27;http://localhost:3000/send&#x27;</span>,</span><br><span class="line">      json: &#123;</span><br><span class="line">        user_id: <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10000</span>) + <span class="number">1</span>,</span><br><span class="line">        event: event[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">3</span>)],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;, <span class="function">(<span class="params">err, res, body</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">      <span class="keyword">return</span> resolve(body);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">400</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">  params.push(test());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all(params).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;end&#x27;</span>);</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://www.npmjs.com/package/rsmq">rsmq</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> MessageQueue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js JSONWEBTOKEN 사용법 정리</title>
      <link href="/2018/12/04/nodejs-use-jwt/"/>
      <url>/2018/12/04/nodejs-use-jwt/</url>
      
        <content type="html"><![CDATA[<p>세션 데이터를 token으로 발급하는 형태.</p><p>장점은 서버가 부담을 안 받는다. 그러나 역시 단점은 서버에서 제어가 안됨</p><p>페이스북이나 기타 SNS의 access_token이 이런 형태.</p><p>테스트는 심플하게 해본다.</p><ol><li>클라이언트에서 sdk로 페이스북 엑세스 토큰, 유저 ID를 받아서 서버에 보낸다.</li><li>서버에서는 받은 토큰, ID를 검증을 한다.</li><li>레디스에 있으면 jwt 토큰 + 해서 리턴, 없으면 유저 프로필을 저장 후 토큰 + 해서 리턴</li></ol><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>jwt는 <a href="https://www.npmjs.com/package/jsonwebtoken">jsonwebtoken</a>을 통해 쉽게 처리가 가능하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secret = <span class="string">&#x27;nyancat (=^･ｪ･^=))ﾉ彡☆&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> jwt 토큰 생성</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>사용 알고리즘은 hmac sha256이라고 함</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>id 넣고싶은 해시 값, 지금은 걍 아디로.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> makeToken = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> payload = &#123; id &#125;;</span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    issuer: <span class="string">&#x27;delryn&#x27;</span>, <span class="comment">// 발행자</span></span><br><span class="line">    expiresIn: <span class="string">&#x27;12h&#x27;</span>, <span class="comment">// 날짜는 @d 시간은 @h, 분은 @m 그냥 숫자만 넣으면 ms단위</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> jwt.sign(payload, secret, options);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 검증 미들웨어</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">req</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">res</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">next</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> verify = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> checksum = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    jwt.verify(req.body.token, secret, <span class="function">(<span class="params">err, decode</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">      <span class="keyword">return</span> resolve(decode);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> checksum.then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    req.decode = result;</span><br><span class="line">    <span class="keyword">return</span> next();</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err.message);</span><br><span class="line">    <span class="keyword">return</span> res.status(<span class="number">401</span>).send(<span class="string">&#x27;jwt verify fail&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.makeToken = makeToken;</span><br><span class="line"><span class="built_in">exports</span>.verify = verify;</span><br></pre></td></tr></table></figure><p>payload에는 쉽게 말해 세션에 담을 꺼 넣어주면 됨.</p><p>option에는 issuer, expiresIn 이외에도 넣을 수 잇는 규칙이 잇는데 이건 공홈에 ㄱ</p><p>sign을 통해 일종의 hash 값이 생긴다.</p><p>verify는 미들웨어로 작성을 한건데 기타 다른 API를 요청올 때 토큰을 읽어서 복호화 후</p><p>유저 세션을 보는 용도.</p><p>한 가지 알아두어야 할 점은 만료된 토큰의 경우도 에러로 받는다. 적절하게 예외 처리 요망.</p><h2 id="페이스북"><a href="#페이스북" class="headerlink" title="페이스북"></a>페이스북</h2><p>클라이언트는 귀찬아서 패스</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">&#x27;redis&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;./jwt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> redisClient = redis.createClient();</span><br><span class="line"><span class="keyword">const</span> FACEBOOK_URL = <span class="string">&#x27;https://graph.facebook.com/v3.2/&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; FACEBOOK_APP_TOKEN &#125; = process.env;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 엑세스 토큰 검증 체크</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>userId 페이스북에서 발급한 유저 ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>accessToken 페이스북에서 발급한 엑세스 토큰</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> accessTokenVerify = <span class="function">(<span class="params">userId, accessToken</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> requestURL = <span class="string">`<span class="subst">$&#123;FACEBOOK_URL&#125;</span>debug_token?input_token=<span class="subst">$&#123;accessToken&#125;</span>&amp;access_token=<span class="subst">$&#123;FACEBOOK_APP_TOKEN&#125;</span>`</span>;</span><br><span class="line">  axios.get(requestURL).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> body = response.data;</span><br><span class="line">    <span class="keyword">if</span> (body.data.is_valid &amp;&amp; body.data.user_id === userId) <span class="keyword">return</span> resolve();</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;facebook verify fail&#x27;</span>));</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> reject(err));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 페이스북 유저 프로필 가지고 오기.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>accessToken 페이스북에서 발급한 엑세스 토큰</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getFaceebookProfile = <span class="function">(<span class="params">accessToken</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> requestUrl = <span class="string">`<span class="subst">$&#123;FACEBOOK_URL&#125;</span>me?fields=id,name,picture&amp;access_token=<span class="subst">$&#123;accessToken&#125;</span>`</span>;</span><br><span class="line">  axios.get(requestUrl).then(<span class="function">(<span class="params">response</span>) =&gt;</span> resolve(response.data)).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> reject(err));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> redis에 유저 데이터 저장</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>userId 페이스북에서 발급한 유저 ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>userData 유저 페이스북 프로필</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> setUser = <span class="function">(<span class="params">userId, userData</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  redisClient.hset(<span class="string">&#x27;profile&#x27;</span>, userId, <span class="built_in">JSON</span>.stringify(userData), <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">    <span class="keyword">return</span> resolve();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> redis에 저장된 유저 프로필 가지고 오기.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>userId 페이스북에서 발급한 유저 ID</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getUser = <span class="function">(<span class="params">userId</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  redisClient.hget(<span class="string">&#x27;profile&#x27;</span>, userId, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">    <span class="keyword">if</span> (!data) <span class="keyword">return</span> resolve();</span><br><span class="line">    <span class="keyword">return</span> resolve(<span class="built_in">JSON</span>.parse(data));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 로그인 처리 후 JWT 토큰 발급</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>userId 페이스북에서 발급한 유저 ID</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>accessToken 페이스북에서 발급한 엑세스 토큰</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> login = <span class="function">(<span class="params">userId, accessToken</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  accessTokenVerify(userId, accessToken).then(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> userData = <span class="keyword">await</span> getUser(userId);</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> userData !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        userData.token = jwt.makeToken(userId);</span><br><span class="line">        <span class="keyword">return</span> resolve(userData);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> facebookProfile = <span class="keyword">await</span> getFaceebookProfile(accessToken);</span><br><span class="line">      <span class="keyword">await</span> setUser(userId, facebookProfile);</span><br><span class="line">      facebookProfile.token = jwt.makeToken(userId);</span><br><span class="line">      <span class="keyword">return</span> resolve(facebookProfile);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> reject(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> reject(err));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = login;</span><br></pre></td></tr></table></figure><h3 id="페이스북-API-응답"><a href="#페이스북-API-응답" class="headerlink" title="페이스북 API 응답"></a>페이스북 API 응답</h3><p>페이스북 API의 응답도 정리 해놓는다.</p><h3 id="엑세스-토큰이-만료-된-경우"><a href="#엑세스-토큰이-만료-된-경우" class="headerlink" title="엑세스 토큰이 만료 된 경우"></a>엑세스 토큰이 만료 된 경우</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">data</span>:</span><br><span class="line">   &#123; <span class="attr">app_id</span>: <span class="string">&#x27;내 페북 앱 아이디&#x27;</span>,</span><br><span class="line">     type: <span class="string">&#x27;USER&#x27;</span>,</span><br><span class="line">     application: <span class="string">&#x27;내 페북 앱 이름&#x27;</span>,</span><br><span class="line">     data_access_expires_at: <span class="number">1551621795</span>,</span><br><span class="line">     error:</span><br><span class="line">      &#123; <span class="attr">code</span>: <span class="number">190</span>,</span><br><span class="line">        message: <span class="string">&#x27;Error validating access token: Session has expired on Monday, 03-Dec-1808:00:00 PST. The current time is Tuesday, 04-Dec-18 06:17:26 PST.&#x27;</span>,</span><br><span class="line">        subcode: <span class="number">463</span> &#125;,</span><br><span class="line">     expires_at: <span class="number">1543852800</span>,</span><br><span class="line">     is_valid: <span class="literal">false</span>,</span><br><span class="line">     scopes: [ <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;public_profile&#x27;</span> ],</span><br><span class="line">     user_id: <span class="string">&#x27;이 앱의 내 유저 ID&#x27;</span> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="엑세스-토큰-정상인-경우"><a href="#엑세스-토큰-정상인-경우" class="headerlink" title="엑세스 토큰 정상인 경우"></a>엑세스 토큰 정상인 경우</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">data</span>:</span><br><span class="line">   &#123; <span class="attr">app_id</span>: <span class="string">&#x27;내 페북 앱 아이디&#x27;</span>,</span><br><span class="line">     type: <span class="string">&#x27;USER&#x27;</span>,</span><br><span class="line">     application: <span class="string">&#x27;내 패북 앱 이름&#x27;</span>,</span><br><span class="line">     data_access_expires_at: <span class="number">1551621795</span>,</span><br><span class="line">     expires_at: <span class="number">1543939200</span>,</span><br><span class="line">     is_valid: <span class="literal">true</span>,</span><br><span class="line">     scopes: [ <span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;public_profile&#x27;</span> ],</span><br><span class="line">     user_id: <span class="string">&#x27;이 앱의 내 유저 ID&#x27;</span> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="프로필"><a href="#프로필" class="headerlink" title="프로필"></a>프로필</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">id</span>: <span class="string">&#x27;이 앱의 내 유저 ID&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;내 이름&#x27;</span>,</span><br><span class="line">  picture:</span><br><span class="line">   &#123; <span class="attr">data</span>:</span><br><span class="line">      &#123; <span class="attr">height</span>: <span class="number">50</span>,</span><br><span class="line">        is_silhouette: <span class="literal">false</span>,</span><br><span class="line">        url: <span class="string">&#x27;내 프로필 사진 url&#x27;</span>,</span><br><span class="line">        width: <span class="number">50</span> &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Auth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js crypto 모듈 사용해보기</title>
      <link href="/2018/11/11/nodejs-crypto/"/>
      <url>/2018/11/11/nodejs-crypto/</url>
      
        <content type="html"><![CDATA[<h2 id="sha512"><a href="#sha512" class="headerlink" title="sha512"></a>sha512</h2><p>주로 유저 비밀번호 저장할 떄 사용, 단방향이라서 복호화를 할 수 업음.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key = <span class="string">&#x27;delryn&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> sha512 해싱 알고리즘</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>단방향</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>text 암호화할 평문.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> sha512 = <span class="function">(<span class="params">text</span>) =&gt;</span> crypto.createHash(<span class="string">&#x27;sha512&#x27;</span>).update(key + text).digest(<span class="string">&#x27;base64&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="hmac"><a href="#hmac" class="headerlink" title="hmac"></a>hmac</h2><p>주로 웹 api 통신할 때 사용자 검증으로 사용, 복호화 불가</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key = <span class="string">&#x27;delryn&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> hmac 해싱 알고리즘</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>단방향</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>text 암호화할 평문</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> hmac = <span class="function">(<span class="params">text</span>) =&gt;</span> crypto.createHmac(<span class="string">&#x27;sha256&#x27;</span>, key).update(text).digest(<span class="string">&#x27;hex&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="aes256"><a href="#aes256" class="headerlink" title="aes256"></a>aes256</h2><p>웹 api 통신에서 암호화하여 전송 -&gt; 받는 쪽은 복호화해서 사용</p><p>서로 키가 달라지면 안됨, 키의 길이 조건보다 낮으면 불가함</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> aes256 key 만들기 16byte</span></span><br><span class="line"><span class="keyword">const</span> makeAes256Key = crypto.randomBytes(<span class="number">16</span>).toString(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> aes256 iv 만들기 8byte</span></span><br><span class="line"><span class="keyword">const</span> makeIv = crypto.randomBytes(<span class="number">8</span>).toString(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> AES 256 암호화</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>양방향</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>aesKey aes256 key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>aesIv aes256 IV</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>text 암호화할 평문</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> aes256Encrypt = <span class="function">(<span class="params">aesKey, aesIv, text</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> cipher = crypto.createCipheriv(<span class="string">&#x27;aes-256-cbc&#x27;</span>, aesKey, aesIv);</span><br><span class="line">    <span class="keyword">let</span> result = cipher.update(text, <span class="string">&#x27;utf8&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line">    result += cipher.final(<span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> AES 256 복호화</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>양방향</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>aesKey aes256 key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>aesIv aes256 IV</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>cryptogram 암호문</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> aes256Decrypt = <span class="function">(<span class="params">aesKey, aesIv, cryptogram</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> decipher = crypto.createDecipheriv(<span class="string">&#x27;aes-256-cbc&#x27;</span>, aesKey, aesIv);</span><br><span class="line">    <span class="keyword">let</span> result = decipher.update(cryptogram, <span class="string">&#x27;base64&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">    result += decipher.final(<span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS S3에 업로드 해보기</title>
      <link href="/2018/10/03/nodejs-s3-upload/"/>
      <url>/2018/10/03/nodejs-s3-upload/</url>
      
        <content type="html"><![CDATA[<h2 id="s3-버켓-생성"><a href="#s3-버켓-생성" class="headerlink" title="s3 버켓 생성"></a>s3 버켓 생성</h2><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1563013185/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-07-13_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.58.02_d4xeun.png" alt="s3 생성"></p><h2 id="s3-설정"><a href="#s3-설정" class="headerlink" title="s3 설정"></a>s3 설정</h2><p>IAM key로 하려면 설정을 좀 해야 한다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1563013186/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-07-13_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.38.15_skc7zy.png" alt="설정"></p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1563013185/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-07-13_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.35.56_trmkje.png" alt="버킷정책"></p><p>ARN: 이후 내용을 복사 한다음에 정책 생성기를 누른다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1563013185/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-07-13_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.35.47_pbx5gw.png" alt="정책 생성기"></p><p>서비스는 당연히 s3이고 액션은 getObject만 한다 (읽기만 가능)</p><p>그리고 아까 복사해둔 ARN내용을 기입후 Add Stagement 노란 박스를 눌러 준다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1563013885/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-07-13_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_7.31.04_zufxpf.png" alt="정책 생성기 - 2"></p><p>Generate Policy 버튼을 클릭</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1563013186/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-07-13_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.36.40_mtijxz.png" alt="정책 생성 결과"></p><p>복사 해서 s3 버킷 정책 편집기에 붙여넣기 하면 된다.</p><p>붙여넣기 하고 나서 꼭 Resource 뒤에 /*를 붙여준다. 저장 하면 설정 끝</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1563013186/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-07-13_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.36.56_ru084c.png" alt="정책 생성 결과 - 2"></p><h2 id="json-업로드"><a href="#json-업로드" class="headerlink" title="json 업로드"></a>json 업로드</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">    region: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 서울 리전</span></span><br><span class="line">    accessKeyId: <span class="string">&#x27;&#x27;</span>, <span class="comment">// IAM</span></span><br><span class="line">    secretAccessKey:<span class="string">&#x27;&#x27;</span> <span class="comment">// IAM</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s3 = <span class="keyword">new</span> AWS.S3();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DATA = &#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    title: <span class="string">&#x27;던전에서 만남을 추구하면 안될까 2기&#x27;</span>,</span><br><span class="line">    body: &#123;</span><br><span class="line">        start: <span class="string">&#x27;2019년 3분기&#x27;</span>,</span><br><span class="line">        develop: <span class="string">&#x27;J.C.STAFF&#x27;</span>,</span><br><span class="line">        broadcast: <span class="string">&#x27;도쿄 MX&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> params = &#123;</span><br><span class="line">    Bucket: <span class="string">&#x27;delryn-upload-test&#x27;</span>, <span class="comment">// 버켓 이름</span></span><br><span class="line">    Key: <span class="string">&#x27;test.json&#x27;</span>, <span class="comment">// 파일명 확장자도 필요함.</span></span><br><span class="line">    ACL: <span class="string">&#x27;public-read&#x27;</span>, <span class="comment">// 액세스 제어 목록 읽기 권한만.</span></span><br><span class="line">    Body: <span class="built_in">JSON</span>.stringify(DATA), <span class="comment">// 보낼 데이터</span></span><br><span class="line">    ContentType: <span class="string">&quot;application/json&quot;</span> <span class="comment">// 컨텐츠 타입</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s3.putObject(params, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1563014938/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-07-13_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_7.48.35_ega16r.png" alt="결과"></p><p>실행하면 잘 올라감.</p><h2 id="이미지-올리기"><a href="#이미지-올리기" class="headerlink" title="이미지 올리기"></a>이미지 올리기</h2><p>간단하게 <a href="https://www.npmjs.com/package/multer">multer</a>, <a href="https://www.npmjs.com/package/multer-s3">multer-s3</a>를 이용하면 된다.</p><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/form-upload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload1&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;전송&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="업로드-코드"><a href="#업로드-코드" class="headerlink" title="업로드 코드"></a>업로드 코드</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> AWS = <span class="built_in">require</span>(<span class="string">&#x27;aws-sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> multerS3 = <span class="built_in">require</span>(<span class="string">&#x27;multer-s3&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">AWS.config.update(&#123;</span><br><span class="line">    region: <span class="string">&#x27;&#x27;</span>, <span class="comment">// s3 리전</span></span><br><span class="line">    accessKeyId: <span class="string">&#x27;&#x27;</span>, <span class="comment">// IAM</span></span><br><span class="line">    secretAccessKey: <span class="string">&#x27;&#x27;</span> <span class="comment">// IAM</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s3 = <span class="keyword">new</span> AWS.S3();</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.sendFile(__dirname + <span class="string">&#x27;/index.html&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> upload = multer(&#123;</span><br><span class="line">    storage: multerS3(&#123;</span><br><span class="line">        s3: s3,</span><br><span class="line">        bucket: <span class="string">&#x27;delryn-upload-test&#x27;</span>, <span class="comment">// 버킷 이름</span></span><br><span class="line">        metadata: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123; <span class="comment">// 메타데이터 설정, 이거 딱히 안 쓰는데.. 무시..</span></span><br><span class="line">            <span class="comment">// console.log(&#x27;file&#x27;, file)</span></span><br><span class="line">            cb(<span class="literal">null</span>, &#123; <span class="attr">fieldName</span>: file.fieldname &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">        key: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123; <span class="comment">// 파일 이름. 확장자를 역시 붙여줘야 한다.</span></span><br><span class="line">            <span class="comment">// 업로드할 떄 파일명이 겹치면 덮어쓰기 땜에 바꿔줘야 함.</span></span><br><span class="line">            <span class="comment">// 원본 파일명을 알고 싶으면 req.file을 찍으면 나옴.</span></span><br><span class="line">            <span class="keyword">let</span> extension = file.mimetype.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">            cb(<span class="literal">null</span>, <span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>.<span class="subst">$&#123;extension&#125;</span>`</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        ACL: <span class="string">&#x27;public-read&#x27;</span>, <span class="comment">// 모두 읽기</span></span><br><span class="line">        contentType: multerS3.AUTO_CONTENT_TYPE <span class="comment">// 컨텐츠 타입은 자동 완성 API 쓰자.</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&#x27;/form-upload&#x27;</span>, upload.single(<span class="string">&#x27;upload1&#x27;</span>), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;upload success&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(PORT, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`server listening on port <span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1563015864/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-07-13_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_8.03.13_h6tgcn.png" alt="실행 결과"></p><p>테스트 해보면 잘 올라간다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode에서 eslint, eslint-airbnb-base 적용하는 법</title>
      <link href="/2018/08/17/etc-vscode-use-eslint/"/>
      <url>/2018/08/17/etc-vscode-use-eslint/</url>
      
        <content type="html"><![CDATA[<h2 id="lint를-사용하는-이유"><a href="#lint를-사용하는-이유" class="headerlink" title="lint를 사용하는 이유"></a>lint를 사용하는 이유</h2><p>eslint는 ECMAScript 또는 JavaScript의 코드 일관성(사람마다 짜는 스타일이 다름)을 유지하고 버그를 피하기 위한 도구라고 공홈에서 설명해준다.</p><h2 id="eslint-설치"><a href="#eslint-설치" class="headerlink" title="eslint 설치"></a>eslint 설치</h2><p>vscode의 extension에서 eslint를 검색 후 설치를 한다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1558862348/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-05-26_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.07.58_io7xml.png" alt="vscode extension"></p><p>사용할 프로젝트 폴더에 eslint를 설치를 개발 의존성으로 설치를 하자 (라이브에선 필요 업으니).</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add eslint --dev</span><br></pre></td></tr></table></figure><p>mac 기준으로 cmd + shift + p를 누르면 해당 프로젝트 폴더에 lint init을 편하게 할 수 잇다.</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1566023233/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-17_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_3.26.55_gjx4to.png" alt="lint create"></p><p>그럼 이제 설정 창이 터미널에 나올텐데 본인의 스타일대로 만든다. 아래는 내가 쓰는 설정 스타일.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1558862663/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-05-26_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.15.11_jqdfkt.png" alt="create-1"></p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1558862810/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-05-26_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.15.39_dezlae.png" alt="create-2"></p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1558862831/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-05-26_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.15.53_lohwsl.png" alt="create-3"></p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1558862988/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-05-26_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.16.08_hsnqun.png" alt="create-4"></p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1558863044/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-05-26_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_4.16.25_w9vqho.png" alt="create-5"></p><p>다 입력하면 폴더에 .eslintrc.json이 생긴다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1558863101/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-05-26_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_6.31.26_t3rajg.png" alt="lintrc"></p><h2 id="airbnb-플러그인-설치"><a href="#airbnb-플러그인-설치" class="headerlink" title="airbnb 플러그인 설치"></a>airbnb 플러그인 설치</h2><p>코딩 스타일을 좀 바꾸고 싶어서 찾아보던 중에 <a href="https://github.com/airbnb/javascript">airbnb javascript guide</a>라는 글을 보고 오 에어비앤비 프로그래머들의 스타일에 감탄 하며 제공하는 플러그인을 추가로 설치를 햇다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add eslint-config-airbnb-base eslint-plugin-import --dev</span><br></pre></td></tr></table></figure><p>설치가 다 되엇으면 .eslintrc.json에서 extends를 airbnb-base로 바꿔주면 된다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;env&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;commonjs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;es6&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;node&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;extends&quot;</span>: <span class="string">&quot;airbnb-base&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;globals&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;Atomics&quot;</span>: <span class="string">&quot;readonly&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;SharedArrayBuffer&quot;</span>: <span class="string">&quot;readonly&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;ecmaVersion&quot;</span>: <span class="number">2018</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;rules&quot;</span>: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이런 플러그인은 airbnb 말고도 <a href="https://www.npmjs.com/package/eslint-config-google">google</a>, <a href="https://www.npmjs.com/package/eslint-config-naver">naver</a> 등 여러 회사들이 공개를 햇으므로 본인 취향에 맞게 쓰면 된다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> ETC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise, Async/Await 사용해보기</title>
      <link href="/2018/08/06/nodejs-promise/"/>
      <url>/2018/08/06/nodejs-promise/</url>
      
        <content type="html"><![CDATA[<h2 id="기본-사용법"><a href="#기본-사용법" class="headerlink" title="기본 사용법"></a>기본 사용법</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function">(<span class="params">_param</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (_param &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;10보다 작다&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> resolve(<span class="string">&#x27;10보다 크다.&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">a(<span class="number">10</span>).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;result&#x27;</span>, result);</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>정상적으로 처리가 되엇을 땐 resolve()에, 에러 등 처리는 reject()로 넘기면 된다.</p><p>기존 콜백 방식보다 코드 읽기도 편하고, 에러 처리도 편해서 깔끔하다고 느낀다.</p><h2 id="순차적인-처리-방법"><a href="#순차적인-처리-방법" class="headerlink" title="순차적인 처리 방법."></a>순차적인 처리 방법.</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function">(<span class="params">_param</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(_param);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="function">(<span class="params">_param</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(_param + <span class="number">10</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="function">(<span class="params">_param</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(_param + <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>이런 함수가 잇을 때 호출하는 순서대로 처리를 하려면 다음과 같이 쓰면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a(<span class="number">1</span>).then(<span class="function">(<span class="params">A</span>) =&gt;</span> b(A).then(<span class="function">(<span class="params">B</span>) =&gt;</span> c(B).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;result&#x27;</span>, result);</span><br><span class="line">&#125;)));</span><br></pre></td></tr></table></figure><p>지금이야 몇개 업지만서도 호출하는 함수가 더 추가 되면 코드 읽기가 불편할 꺼 같다.</p><p>이런 문제를 해결하기 위해 async/await를 사용 하면 좀 더 간단하게 작성 할 수 잇다.</p><p>위와 동일한 코드이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a(<span class="number">10</span>).then(<span class="keyword">async</span> (A) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> B = <span class="keyword">await</span> b(A);</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> c(B);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;result&#x27;</span>, result);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;e&#x27;</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>최상단에 async란 키워드가 잇어야 await를 사용할 수 잇다. 기존의 .then(), .catch()가 업어지고</p><p>변수에 각 상황에 따라 할당이 되므로 try / catch 구문으로 처리를 해야 한다. 현재 예에서는 에러가 발생할 일은 업겟지만..</p><h2 id="병렬-처리"><a href="#병렬-처리" class="headerlink" title="병렬 처리"></a>병렬 처리</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="number">10</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([a(), b(), c()]).then(<span class="function">(<span class="params">results</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;results - 1&#x27;</span>, results);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> results = <span class="keyword">await</span> <span class="built_in">Promise</span>.all([a(), b(), c()]);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;results - 2&#x27;</span>, results);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">x();</span><br></pre></td></tr></table></figure><p>Promise.all()을 사용 하면 된다. 결과는 배열로 받게 된다.</p><p>마찬가지로 상위 함수에 async가 붙어야 await로 함수를 실행 할 수 잇다.</p><h3 id="race"><a href="#race" class="headerlink" title="race"></a>race</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> random = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a&#x27;</span>, <span class="number">10</span>);</span><br><span class="line">    resolve(<span class="number">10</span>);</span><br><span class="line">  &#125;, random);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> random = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;b&#x27;</span>, <span class="number">100</span>);</span><br><span class="line">    resolve(<span class="number">100</span>);</span><br><span class="line">  &#125;, random);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.race([a(), b()]).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;result - 1&#x27;</span>, result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="built_in">Promise</span>.race([a(), b()]);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;result - 2&#x27;</span>, result);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;e&#x27;</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">x();</span><br></pre></td></tr></table></figure><p>이 기능은 좀 신기햇는데 아직 일하면서 써보진 않앗다.</p><p>어떠한거냐면 all처럼 동시에 실행을 하는데 먼저 처리된 함수의 결과가 넘어 온다. 그렇다고 나머지 함수가 실행이 안되는 건 아니다. 아직은 어떤 때 사용하는 게 좋을지 생각이 잘 안 난다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Using_promises">mozila promise doc</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/async_function">mozila async doc</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSON Array를 CSV로 변환하기</title>
      <link href="/2018/07/22/nodejs-json-array-to-csv/"/>
      <url>/2018/07/22/nodejs-json-array-to-csv/</url>
      
        <content type="html"><![CDATA[<p>변환할 json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;test1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">&quot;phone&quot;</span>: <span class="string">&quot;0101112222&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;test2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="number">25</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;test4&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="number">15</span>,</span><br><span class="line">    <span class="attr">&quot;phone&quot;</span>: <span class="string">&quot;545343123&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;team&quot;</span>: <span class="string">&quot;home&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;test3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;age&quot;</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="attr">&quot;phone&quot;</span>: <span class="string">&quot;0101112222&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>변환하는 코드.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> data = <span class="built_in">require</span>(<span class="string">&#x27;./sample.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">TODO:</span> csv 헤더 만들기</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> makeHeader = <span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> length = [];</span><br><span class="line">    data.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      length.push(<span class="built_in">Object</span>.keys(item).length);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> index = length.indexOf(<span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, length)); <span class="comment">// json Array에서 제일 프로퍼티가 많은 거를 헤더로 정함.</span></span><br><span class="line">    <span class="keyword">return</span> resolve(<span class="built_in">Object</span>.keys(data[index]));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> csv 몸통 만들기</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>header csv 헤더</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> makeBody = <span class="function">(<span class="params">header</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> body = [];</span><br><span class="line">    data.forEach(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">      header.forEach(<span class="function">(<span class="params">y</span>) =&gt;</span> &#123;</span><br><span class="line">        body.push(<span class="keyword">typeof</span> x[y] !== <span class="string">&#x27;undefined&#x27;</span> ? x[y] : <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> headerLen = header.length;</span><br><span class="line">    <span class="keyword">let</span> result = header.join();</span><br><span class="line">    result += <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 헤더 뒤에 줄 바꿈.</span></span><br><span class="line">    body.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      result += item;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Number</span>(index + <span class="number">1</span>) % headerLen === <span class="number">0</span>) &#123; <span class="comment">// csv 양식으로 만든다.</span></span><br><span class="line">        result += <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 헤더만큼 다 있으면 줄 바꿈.</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result += <span class="string">&#x27;,&#x27;</span>; <span class="comment">// 업으면 콤마</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> resolve(result);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 파일 쓰기</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> </span>csv csv 데이터</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> saveFile = <span class="function">(<span class="params">csv</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.writeFile(<span class="string">&#x27;test.csv&#x27;</span>, csv, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">    <span class="keyword">return</span> resolve(<span class="string">&#x27;write success&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">makeHeader().then(<span class="keyword">async</span> (header) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> csv = <span class="keyword">await</span> makeBody(header);</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> saveFile(csv);</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>변환한 결과</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1532254149/makecsv_coh3ad.png" alt="결과"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js에서 Email 발송해보기</title>
      <link href="/2018/07/13/nodejs-send-email/"/>
      <url>/2018/07/13/nodejs-send-email/</url>
      
        <content type="html"><![CDATA[<h2 id="mailtrap"><a href="#mailtrap" class="headerlink" title="mailtrap"></a>mailtrap</h2><p><a href="https://mailtrap.io/">mailtrap</a>은 email 발송, 수신이 제대로 되었는지 테스트를 해볼 수 잇는 SMTP를 제공하는 서비스다.</p><p>가입 할 때 크레딧 카드 등록 같은 거 업어서 부담이 업음.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1552833110/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-03-17_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_11.24.49_lhx7cl.png" alt="mailtrap"></p><p>대시보드에서 저 보라색 표시한 부분을 클릭해서 들어가게 되면 다음과 같은 화면을 본다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1552834511/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-03-17_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_11.24.15_oazyui.png" alt="mailtrap - 2"></p><p>서비스의 장점 중 하나가 여러 언어의 샘플 코드도 보여준다는 점.</p><h2 id="nodemailer"><a href="#nodemailer" class="headerlink" title="nodemailer"></a>nodemailer</h2><p>이제 프로그램 상에서 메일 클라이언트 모듈을 받아서 전송을 해보자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add nodemailer <span class="comment"># 또는 npm i nodemailer -S</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nodemailer = <span class="built_in">require</span>(<span class="string">&#x27;nodemailer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> transporter = nodemailer.createTransport(&#123;</span><br><span class="line">    host: <span class="string">&#x27;smtp.mailtrap.io&#x27;</span>,</span><br><span class="line">    port: <span class="number">2525</span>,</span><br><span class="line">    secure: <span class="literal">false</span>, <span class="comment">// <span class="doctag">NOTE:</span> port 가 465일 때만 true</span></span><br><span class="line">    auth: &#123;</span><br><span class="line">        user: <span class="string">&#x27;발급 받은 Username&#x27;</span>,</span><br><span class="line">        pass: <span class="string">&#x27;발급 받은 Password&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = <span class="string">`현재 메일은 테스트 입니다.`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> contents = <span class="string">`아무말 대잔치 ㅎㅎㅎ`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> html = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;/&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;안내 메일&lt;/title&gt;</span></span><br><span class="line"><span class="string">    &lt;style type=&quot;text/css&quot;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        #outlook a &#123;padding:0;&#125;</span></span><br><span class="line"><span class="string">        body&#123;width:100% !important; -webkit-text-size-adjust:100%; -ms-text-size-adjust:100%; margin:0; padding:0;&#125;</span></span><br><span class="line"><span class="string">        .ExternalClass &#123;width:100%;&#125;</span></span><br><span class="line"><span class="string">        .ExternalClass, .ExternalClass p, .ExternalClass span, .ExternalClass font, .ExternalClass td, .ExternalClass div &#123;line-height: 100%;&#125;</span></span><br><span class="line"><span class="string">        #backgroundTable &#123;margin:0; padding:0; width:100% !important; line-height: 100% !important;&#125;</span></span><br><span class="line"><span class="string">        img &#123;outline:none; text-decoration:none; -ms-interpolation-mode: bicubic;&#125;</span></span><br><span class="line"><span class="string">        a img &#123;border:none;display:inline-block;&#125;</span></span><br><span class="line"><span class="string">        .image_fix &#123;display:block;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        h1, h2, h3, h4, h5, h6 &#123;color: black !important;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        h1 a, h2 a, h3 a, h4 a, h5 a, h6 a &#123;color: blue !important;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        h1 a:active, h2 a:active,  h3 a:active, h4 a:active, h5 a:active, h6 a:active &#123;</span></span><br><span class="line"><span class="string">            color: red !important;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        h1 a:visited, h2 a:visited,  h3 a:visited, h4 a:visited, h5 a:visited, h6 a:visited &#123;</span></span><br><span class="line"><span class="string">            color: purple !important;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        table td &#123;border-collapse: collapse;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        table &#123; border-collapse:collapse; mso-table-lspace:0pt; mso-table-rspace:0pt; &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        a &#123;color: #000;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @media only screen and (max-device-width: 480px) &#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            a[href^=&quot;tel&quot;], a[href^=&quot;sms&quot;] &#123;</span></span><br><span class="line"><span class="string">                text-decoration: none;</span></span><br><span class="line"><span class="string">                color: black; /* or whatever your want */</span></span><br><span class="line"><span class="string">                pointer-events: none;</span></span><br><span class="line"><span class="string">                cursor: default;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            .mobile_link a[href^=&quot;tel&quot;], .mobile_link a[href^=&quot;sms&quot;] &#123;</span></span><br><span class="line"><span class="string">                text-decoration: default;</span></span><br><span class="line"><span class="string">                color: orange !important; /* or whatever your want */</span></span><br><span class="line"><span class="string">                pointer-events: auto;</span></span><br><span class="line"><span class="string">                cursor: default;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @media only screen and (min-device-width: 768px) and (max-device-width: 1024px) &#123;</span></span><br><span class="line"><span class="string">            a[href^=&quot;tel&quot;], a[href^=&quot;sms&quot;] &#123;</span></span><br><span class="line"><span class="string">                text-decoration: none;</span></span><br><span class="line"><span class="string">                color: blue; /* or whatever your want */</span></span><br><span class="line"><span class="string">                pointer-events: none;</span></span><br><span class="line"><span class="string">                cursor: default;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            .mobile_link a[href^=&quot;tel&quot;], .mobile_link a[href^=&quot;sms&quot;] &#123;</span></span><br><span class="line"><span class="string">                text-decoration: default;</span></span><br><span class="line"><span class="string">                color: orange !important;</span></span><br><span class="line"><span class="string">                pointer-events: auto;</span></span><br><span class="line"><span class="string">                cursor: default;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        p &#123;</span></span><br><span class="line"><span class="string">            margin:0;</span></span><br><span class="line"><span class="string">            color:#555;</span></span><br><span class="line"><span class="string">            font-family:Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="string">            font-size:16px;</span></span><br><span class="line"><span class="string">            line-height:160%;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        a.link2&#123;</span></span><br><span class="line"><span class="string">            text-decoration:none;</span></span><br><span class="line"><span class="string">            font-family:Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="string">            font-size:16px;</span></span><br><span class="line"><span class="string">            color:#fff;</span></span><br><span class="line"><span class="string">            border-radius:4px;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        h2&#123;</span></span><br><span class="line"><span class="string">            color:#181818;</span></span><br><span class="line"><span class="string">            font-family:Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="string">            font-size:22px;</span></span><br><span class="line"><span class="string">            font-weight: normal;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        .bgItem&#123;</span></span><br><span class="line"><span class="string">            background:#F4A81C;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        .bgBody&#123;</span></span><br><span class="line"><span class="string">            background:#ffffff;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;/style&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;!-- Wrapper/Container Table: Use a wrapper table to control the width and the background color consistently of your email. Use this approach instead of setting attributes on the body tag. --&gt;</span></span><br><span class="line"><span class="string">  &lt;table cellpadding=&quot;0&quot; width=&quot;100%&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; id=&quot;backgroundTable&quot; class=&#x27;bgBody&#x27;&gt;</span></span><br><span class="line"><span class="string">      &lt;tr&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;</span></span><br><span class="line"><span class="string">    &lt;!-- Tables are the most common way to format your email consistently. Set your table widths inside cells and in most cases reset cellpadding, cellspacing, and border to zero. Use nested tables as a way to space effectively in your message. --&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; align=&quot;center&quot; width=&quot;100%&quot; style=&quot;border-collapse:collapse;&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;td class=&#x27;movableContentContainer&#x27;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">          &lt;div class=&#x27;movableContent&#x27;&gt;</span></span><br><span class="line"><span class="string">            &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; align=&quot;center&quot; width=&quot;600&quot;&gt;</span></span><br><span class="line"><span class="string">              &lt;tr height=&quot;40&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;td width=&quot;200&quot;&gt;&amp;nbsp;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td width=&quot;200&quot;&gt;&amp;nbsp;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td width=&quot;200&quot;&gt;&amp;nbsp;&lt;/td&gt;</span></span><br><span class="line"><span class="string">              &lt;/tr&gt;</span></span><br><span class="line"><span class="string">              &lt;tr&gt;</span></span><br><span class="line"><span class="string">                &lt;td width=&quot;200&quot; valign=&quot;top&quot;&gt;&amp;nbsp;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td width=&quot;200&quot; valign=&quot;top&quot; align=&quot;center&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;div class=&quot;contentEditableContainer contentTextEditable&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class=&quot;contentEditable&quot; &gt;</span></span><br><span class="line"><span class="string">                      &lt;img src=&quot;https://avatars1.githubusercontent.com/u/29791348?s=460&amp;v=4&quot; width=&quot;155&quot; height=&#x27;155&#x27; alt=&#x27;Logo&#x27;/&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                  &lt;/div&gt;</span></span><br><span class="line"><span class="string">                &lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td width=&quot;200&quot; valign=&quot;top&quot;&gt;&amp;nbsp;&lt;/td&gt;</span></span><br><span class="line"><span class="string">              &lt;/tr&gt;</span></span><br><span class="line"><span class="string">              &lt;tr height=&quot;25&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;td width=&quot;200&quot;&gt;&amp;nbsp;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td width=&quot;200&quot;&gt;&amp;nbsp;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td width=&quot;200&quot;&gt;&amp;nbsp;&lt;/td&gt;</span></span><br><span class="line"><span class="string">              &lt;/tr&gt;</span></span><br><span class="line"><span class="string">            &lt;/table&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">          &lt;div class=&#x27;movableContent&#x27;&gt;</span></span><br><span class="line"><span class="string">            &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; align=&quot;center&quot; width=&quot;600&quot;&gt;</span></span><br><span class="line"><span class="string">              &lt;tr&gt;</span></span><br><span class="line"><span class="string">                &lt;td width=&quot;100%&quot; colspan=&quot;3&quot; align=&quot;center&quot; style=&quot;padding-bottom:10px;padding-top:25px;&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;div class=&quot;contentEditableContainer contentTextEditable&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class=&quot;contentEditable&quot; &gt;</span></span><br><span class="line"><span class="string">                      &lt;h2 &gt;`</span>+ title + <span class="string">`&lt;/h2&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                  &lt;/div&gt;</span></span><br><span class="line"><span class="string">                &lt;/td&gt;</span></span><br><span class="line"><span class="string">              &lt;/tr&gt;</span></span><br><span class="line"><span class="string">              &lt;tr&gt;</span></span><br><span class="line"><span class="string">                &lt;td width=&quot;100&quot;&gt;&amp;nbsp;&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td width=&quot;400&quot; align=&quot;center&quot; style=&quot;padding-bottom:5px;&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;div class=&quot;contentEditableContainer contentTextEditable&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class=&quot;contentEditable&quot; &gt;</span></span><br><span class="line"><span class="string">                      &lt;p &gt;`</span>+ contents + <span class="string">`&lt;/p&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                  &lt;/div&gt;</span></span><br><span class="line"><span class="string">                &lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td width=&quot;100&quot;&gt;&amp;nbsp;&lt;/td&gt;</span></span><br><span class="line"><span class="string">              &lt;/tr&gt;</span></span><br><span class="line"><span class="string">            &lt;/table&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;</span></span><br><span class="line"><span class="string">          &lt;div class=&#x27;movableContent&#x27;&gt;</span></span><br><span class="line"><span class="string">            &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; border=&quot;0&quot; align=&quot;center&quot; width=&quot;600&quot;&gt;</span></span><br><span class="line"><span class="string">              &lt;tr&gt;</span></span><br><span class="line"><span class="string">                &lt;td width=&quot;100%&quot; colspan=&quot;2&quot; style=&quot;padding-top:65px;&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;hr style=&quot;height:1px;border:none;color:#333;background-color:#ddd;&quot; /&gt;</span></span><br><span class="line"><span class="string">                &lt;/td&gt;</span></span><br><span class="line"><span class="string">              &lt;/tr&gt;</span></span><br><span class="line"><span class="string">              &lt;tr&gt;</span></span><br><span class="line"><span class="string">                &lt;td width=&quot;60%&quot; height=&quot;70&quot; valign=&quot;middle&quot; style=&quot;padding-bottom:20px;&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;div class=&quot;contentEditableContainer contentTextEditable&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;div class=&quot;contentEditable&quot; &gt;</span></span><br><span class="line"><span class="string">                      &lt;span style=&quot;font-size:13px;color:#181818;font-family:Helvetica, Arial, sans-serif;line-height:200%;&quot;&gt;Copyright © 2019 delryn&lt;/span&gt;</span></span><br><span class="line"><span class="string">                    &lt;/div&gt;</span></span><br><span class="line"><span class="string">                  &lt;/div&gt;</span></span><br><span class="line"><span class="string">                &lt;/td&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">              &lt;/tr&gt;</span></span><br><span class="line"><span class="string">            &lt;/table&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;/td&gt;</span></span><br><span class="line"><span class="string">      &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    &lt;/table&gt;</span></span><br><span class="line"><span class="string">&lt;!-- END BODY --&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;/td&gt;</span></span><br><span class="line"><span class="string">&lt;/tr&gt;</span></span><br><span class="line"><span class="string">&lt;/table&gt;</span></span><br><span class="line"><span class="string">&lt;!-- End of wrapper table --&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mailOptions = &#123;</span><br><span class="line">    <span class="keyword">from</span>: <span class="string">&#x27;&quot;delryn 😊&quot; &lt;admin@hidelryn.github.io&gt;&#x27;</span>, <span class="comment">// 보내는 사람</span></span><br><span class="line">    to: <span class="string">&quot;hidelryn@gmail.com&quot;</span>, <span class="comment">// <span class="doctag">NOTE:</span> 받는 사람들 여러 명인 경우 aa@gmail.com, bb@gmail.com 이렇게 ,로 이어서.</span></span><br><span class="line">    subject: title, <span class="comment">// 제목</span></span><br><span class="line">    <span class="comment">// text: &quot;Hello world?&quot;, // <span class="doctag">NOTE:</span> 단순히 텍스트만 보낼 경우.</span></span><br><span class="line">    html: html <span class="comment">// <span class="doctag">NOTE:</span> HTML 보낼 경우.</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">transporter.sendMail(mailOptions, <span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;</span><br><span class="line">    transporter.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>별로 어려운게 업다. 코드를 실행을 해보면 아래처럼 mailtrap에서 결과를 볼 수 있다.</p><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1552833575/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-03-17_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_11.38.51_lg0nml.png" alt="mailtrap - 3"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> SMS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js cheerio 모듈 사용해보기</title>
      <link href="/2018/07/13/nodejs-cheerio/"/>
      <url>/2018/07/13/nodejs-cheerio/</url>
      
        <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>); <span class="comment">// request 같은 모듈.</span></span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>); <span class="comment">// node.js에서 제이쿼리 사용 가능하게 하는 모듈.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> title = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pageNum = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> run = <span class="function">(<span class="params">callback</span>) =&gt;</span> &#123;</span><br><span class="line">  axios.get(<span class="string">&#x27;https://delryn.herokuapp.com/paging&#x27;</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      page: <span class="built_in">Number</span>(pageNum), <span class="comment">// get 쿼리스트링 파라미터임.</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> $ = cheerio.load(res.data); <span class="comment">// HTML dom을 제이쿼리로 읽게 해준다.</span></span><br><span class="line">      <span class="keyword">const</span> table = $(<span class="string">&#x27;table &gt; tbody  &gt; tr &gt; td&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (pageNum &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        callback();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        table.each(<span class="function">(<span class="params">idx, item</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (idx % <span class="number">2</span> === <span class="number">0</span>) &#123; <span class="comment">// 제목만.</span></span><br><span class="line">            title += <span class="string">`<span class="subst">$&#123;$(item).text()&#125;</span>\n`</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        pageNum += <span class="number">1</span>;</span><br><span class="line">        run(callback); <span class="comment">// 재귀.</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      callback(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">run(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(title);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>정리하자면 http client로 웹 페이지(HTML)을 읽어서 jQuery로 원하는 데이터 정리를 한다.</p><p>이러한 걸 웹 크롤링이라고 한다. node.js에서 jQuery 문법을 쓸 일이 잇을줄이야..</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express에서 쿼리스트링을 이용한 페이징 구현 해보기</title>
      <link href="/2018/06/24/nodejs-paging/"/>
      <url>/2018/06/24/nodejs-paging/</url>
      
        <content type="html"><![CDATA[<p>db는 mysql, view 영역은 ejs로 간단하게 쿼리스트링을 이용한 페이징 구현을 정리 한다.</p><h2 id="서버"><a href="#서버" class="headerlink" title="서버"></a>서버</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>, <span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/views`</span>);</span><br><span class="line">app.set(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> connection = mysql.createConnection(&#123; <span class="comment">// <span class="doctag">NOTE:</span> mysql connection</span></span><br><span class="line">  host: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  user: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">  database: <span class="string">&#x27;paging_test&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> pageNum = <span class="built_in">Number</span>(req.query.pageNum) || <span class="number">1</span>; <span class="comment">// <span class="doctag">NOTE:</span> 쿼리스트링으로 받을 페이지 번호 값, 기본값은 1</span></span><br><span class="line">  <span class="keyword">const</span> contentSize = <span class="number">10</span>; <span class="comment">// <span class="doctag">NOTE:</span> 페이지에서 보여줄 컨텐츠 수.</span></span><br><span class="line">  <span class="keyword">const</span> pnSize = <span class="number">10</span>; <span class="comment">// <span class="doctag">NOTE:</span> 페이지네이션 개수 설정.</span></span><br><span class="line">  <span class="keyword">const</span> skipSize = (pageNum - <span class="number">1</span>) * contentSize; <span class="comment">// <span class="doctag">NOTE:</span> 다음 페이지 갈 때 건너뛸 리스트 개수.</span></span><br><span class="line"></span><br><span class="line">  connection.query(<span class="string">&#x27;SELECT count(*) as `count` FROM `articles`&#x27;</span>, <span class="function">(<span class="params">countQueryErr, countQueryResult</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (countQueryErr) <span class="keyword">throw</span> countQueryErr;</span><br><span class="line">    <span class="keyword">const</span> totalCount = <span class="built_in">Number</span>(countQueryResult[<span class="number">0</span>].count); <span class="comment">// <span class="doctag">NOTE:</span> 전체 글 개수.</span></span><br><span class="line">    <span class="keyword">const</span> pnTotal = <span class="built_in">Math</span>.ceil(totalCount / contentSize); <span class="comment">// <span class="doctag">NOTE:</span> 페이지네이션의 전체 카운트</span></span><br><span class="line">    <span class="keyword">const</span> pnStart = ((<span class="built_in">Math</span>.ceil(pageNum / pnSize) - <span class="number">1</span>) * pnSize) + <span class="number">1</span>; <span class="comment">// <span class="doctag">NOTE:</span> 현재 페이지의 페이지네이션 시작 번호.</span></span><br><span class="line">    <span class="keyword">let</span> pnEnd = (pnStart + pnSize) - <span class="number">1</span>; <span class="comment">// <span class="doctag">NOTE:</span> 현재 페이지의 페이지네이션 끝 번호.</span></span><br><span class="line">    connection.query(<span class="string">&#x27;SELECT * FROM `articles` ORDER BY id DESC LIMIT ?, ?&#x27;</span>, [skipSize, contentSize], <span class="function">(<span class="params">contentQueryErr, contentQueryResult</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (contentQueryErr) <span class="keyword">throw</span> contentQueryErr;</span><br><span class="line">      <span class="keyword">if</span> (pnEnd &gt; pnTotal) pnEnd = pnTotal; <span class="comment">// <span class="doctag">NOTE:</span> 페이지네이션의 끝 번호가 페이지네이션 전체 카운트보다 높을 경우.</span></span><br><span class="line">      <span class="keyword">const</span> result = &#123;</span><br><span class="line">        pageNum,</span><br><span class="line">        pnStart,</span><br><span class="line">        pnEnd,</span><br><span class="line">        pnTotal,</span><br><span class="line">        contents: contentQueryResult,</span><br><span class="line">      &#125;;</span><br><span class="line">      res.render(<span class="string">&#x27;index&#x27;</span>, &#123;</span><br><span class="line">        articles: result,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/view/:id&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; id &#125; = req.params;</span><br><span class="line">  connection.query(<span class="string">&#x27;SELECT * FROM `articles` WHERE id = ?&#x27;</span>, [id], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    res.render(<span class="string">&#x27;view&#x27;</span>, &#123;</span><br><span class="line">      article: results[<span class="number">0</span>],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(PORT, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`express is running on port <span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="클라이언트"><a href="#클라이언트" class="headerlink" title="클라이언트"></a>클라이언트</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;ko&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>nodejs-paging-example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&#x27;https://fonts.googleapis.com/css?family=Audiowide|Iceland|Monoton|Pacifico|Press+Start+2P|Vampiro+One&#x27;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">rel</span>=<span class="string">&#x27;stylesheet&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://fonts.googleapis.com/icon?family=Material+Icons&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;bordered&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>제목<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>글<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">articles.contents.length</span> != <span class="string">0)</span> &#123; %&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">%</span> <span class="attr">articles.contents.forEach</span>(<span class="attr">function</span>(<span class="attr">Article</span>)&#123; %&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/view/&lt;%=Article.id%&gt;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">%=Article.title%</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/view/&lt;%=Article.id%&gt;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">%=Article.text%</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">%</span> &#125;); %&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>등록된 글이 없습니다.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">articles.contents.length</span> != <span class="string">0)</span> &#123; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">      &lt;li &lt;%if(articles.pageNum == 1)&#123;%&gt; class=&quot;disabled&quot; &lt;%&#125;else&#123;%&gt;class=&quot;waves-effect&quot; &lt;%&#125;%&gt; &gt;</span><br><span class="line">       &lt;a &lt;%if(articles.pageNum &gt; 1)&#123;%&gt; href=&quot;?pageNum=&lt;%=articles.pageNum-1%&gt;&quot; &lt;%&#125;%&gt;&gt;</span><br><span class="line">         <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;material-icons&quot;</span>&gt;</span>chevron_left<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &lt;% for(var i=articles.pnStart; i&lt;=articles.pnEnd; i++)&#123; %&gt; &lt;li &lt;%if(i===articles.pageNum)&#123;%&gt; class=&quot;active&quot;</span><br><span class="line">        <span class="tag">&lt;<span class="name">%&#125;%</span>&gt;</span>&gt;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;?pageNum=&lt;%=i%&gt;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">%=i%</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">      &lt;li &lt;%if(articles.pageNum == articles.pnTotal)&#123;%&gt; class=&quot;disabled&quot; &lt;%&#125;else&#123;%&gt; class=&quot;waves-effect&quot; &lt;%&#125;%&gt;&gt;</span><br><span class="line">       &lt;a &lt;%if(articles.pageNum &lt; articles.pnTotal)&#123;%&gt; href=&quot;?pageNum=&lt;%=articles.pageNum+1%&gt;&quot; &lt;%&#125;%&gt; class=&quot;waves-effect&quot;&gt;</span><br><span class="line">       <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;material-icons&quot;</span>&gt;</span>chevron_right<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>스크롤 페이징이나 ajax로 페이징을 구현을 하는 건 서버는 거의 똑같고 클라이언트만 바꾸면 됨.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://okky.kr/article/282819">페이징(Paging)에 대한 이해</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Express </tag>
            
            <tag> Pagination </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express에서 multer를 이용한 업로드, 다운로드 구현</title>
      <link href="/2018/06/20/nodejs-upload/"/>
      <url>/2018/06/20/nodejs-upload/</url>
      
        <content type="html"><![CDATA[<h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><ol><li>클라이언트에서 form input file에 이미지를 등록 후 서버에 전송</li><li>서버에서는 multer를 통해 file 정보를 받아서 필요한 데이터를 db에 저장</li><li>다운로드 버튼을 누르면 여러 이미지의 경우 zip으로 묶어서, 아니면 걍 다운로드</li></ol><h2 id="클라이언트"><a href="#클라이언트" class="headerlink" title="클라이언트"></a>클라이언트</h2><p>중요한 건 form 태그의 enctype=”multipart/form-data”가 있어야 함.</p><p>input file 태그는 원하는 개수에 맞게 추가하거나 multiple 옵션을 주면 됨.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>title<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;title&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;file is-primary has-name&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;file-label&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;file-input&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;attachment&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;file-cta&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;file-icon&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-image&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;file-label&quot;</span>&gt;</span></span><br><span class="line">            Choose a image…</span><br><span class="line">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;field is-grouped&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top:30px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;button is-primary&quot;</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;control&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button is-primary is-outlined&quot;</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="업로드-다운로드-로직"><a href="#업로드-다운로드-로직" class="headerlink" title="업로드, 다운로드 로직"></a>업로드, 다운로드 로직</h2><p>express 혼자서는 multipart/form-data 데이터를 핸들링 할수가 업기 때문에 </p><p><a href="https://www.npmjs.com/package/multer">multer</a>라는 모듈을 사용 한다.</p><p>zip 다운로드의 경우 <a href="https://www.npmjs.com/package/node-zip">node-zip</a>을 사용.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-new-require */</span></span><br><span class="line"><span class="comment">/* eslint-disable new-cap */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">&#x27;../../config/config&#x27;</span>); <span class="comment">// 환경 설정</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> uploadFolder = <span class="string">&#x27;/upload/&#x27;</span>; <span class="comment">// <span class="doctag">NOTE:</span> 업로드한 이미자가 잇을 express static folder</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 디렉토리가 존재하는지 체크</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>절대 경로</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> dirExists = <span class="function">(<span class="params">absolutePath</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fs.statSync(absolutePath).isDirectory();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;dirExists err&#x27;, err); // <span class="doctag">NOTE:</span> 폴더가 존재하지 않으면 &#x27;ENOENT&#x27; 에러를 반환함.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 파일이 있는지 체크</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>절대 경로</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> fileExists = <span class="function">(<span class="params">files</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; files.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      fs.statSync(files[i]).isFile();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="comment">// console.log(&#x27;fileExists err&#x27;, err);</span></span><br><span class="line">      result = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> multer 기본 세팅</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;String&#125;</span> </span>업로드할 폴더명</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> multerInit = <span class="function">(<span class="params">folder</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!folder) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">const</span> storage = multer.diskStorage(&#123;</span><br><span class="line">    destination: <span class="function">(<span class="params">req, file, callback</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> uploadRoot = path.join(config.root, <span class="string">&#x27;/public/upload/&#x27;</span>); <span class="comment">// 시스템 절대 경로</span></span><br><span class="line">      <span class="keyword">const</span> uploadPath = path.join(config.root, <span class="string">`/public/upload/<span class="subst">$&#123;folder&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">if</span> (!dirExists(uploadRoot)) fs.mkdirSync(uploadRoot); <span class="comment">// <span class="doctag">NOTE:</span> 업로드 폴더 체크 후 생성.</span></span><br><span class="line">      <span class="keyword">if</span> (!dirExists(uploadPath)) fs.mkdirSync(uploadPath); <span class="comment">// <span class="doctag">NOTE:</span> 업로드 폴더 체크 후 생성.</span></span><br><span class="line">      callback(<span class="literal">null</span>, uploadPath);</span><br><span class="line">    &#125;,</span><br><span class="line">    filename: <span class="function">(<span class="params">req, file, callback</span>) =&gt;</span> &#123; <span class="comment">// <span class="doctag">NOTE:</span> 파일명 변환</span></span><br><span class="line">      callback(<span class="literal">null</span>, <span class="string">`<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>.<span class="subst">$&#123;file.mimetype.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>]&#125;</span>`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> multer(&#123;</span><br><span class="line">    storage,</span><br><span class="line">    limits: &#123; <span class="attr">fileSize</span>: <span class="number">2097152</span> &#125;, <span class="comment">// <span class="doctag">NOTE:</span> 업로드 파일은 2mb 제한</span></span><br><span class="line">    fileFilter: <span class="function">(<span class="params">req, file, callback</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (file.mimetype.indexOf(<span class="string">&#x27;image&#x27;</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;이미지 파일만 업로드 가능&#x27;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> callback(<span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> db에 저장할 path 만들기.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>multer에서 주는 path는 시스템 경로이기 때문에 그대로 저장하면 클라이언트에서 view로 쓸수 업음.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">filePath</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> changeDBPath = <span class="function">(<span class="params">filePath</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> origin = filePath;</span><br><span class="line">  <span class="keyword">const</span> start = origin.match(uploadFolder).index;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; origin.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">    result += origin[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> db에 저장된 path를 실제 업로드 path로 변경.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>dbpath는 client view용 (express static) 경로 이기 때문에 시스템 경로로 바꿔줘야 다운로드가 진행이 됨.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;*&#125;</span> <span class="variable">dbPath</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> changeUploadPath = <span class="function">(<span class="params">dbPath</span>) =&gt;</span> path.join(config.root, <span class="string">`/public<span class="subst">$&#123;dbPath&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> req.files에서 path, name, originalName만 가지고 오기</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>db 저장용</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>files req.files</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> convertMulterData = <span class="function">(<span class="params">files</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (files.length === <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> uploadPaths = files.map(<span class="function">(<span class="params">file</span>) =&gt;</span> changeDBPath(file.path));</span><br><span class="line">    <span class="keyword">const</span> fileName = files.map(<span class="function">(<span class="params">file</span>) =&gt;</span> file.filename);</span><br><span class="line">    <span class="keyword">const</span> fileOriginalName = files.map(<span class="function">(<span class="params">file</span>) =&gt;</span> file.originalname);</span><br><span class="line">    <span class="keyword">return</span> &#123; uploadPaths, fileName, fileOriginalName &#125;;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;convertMulterData err&#x27;</span>, err);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 여러 파일을 다운받아야 할 경우엔 zip으로 묶어서 넘긴다.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>uploadPath db에 저장된 업로드 경로</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>originalname db에 저장된 원래 파일명</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> zipDownload = <span class="function">(<span class="params">dbPath, originalname</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!dbPath || !originalname) <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;다운로드에 필요한 파라미터 누락&#x27;</span>));</span><br><span class="line">  <span class="keyword">if</span> (dbPath.length !== originalname.length) <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;다운로드 파리미터 확인&#x27;</span>));</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(dbPath) || !<span class="built_in">Array</span>.isArray(originalname)) <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;다운로드 파일 타입 체크&#x27;</span>));</span><br><span class="line">  <span class="keyword">const</span> uploadPath = dbPath.map(<span class="function">(<span class="params">p</span>) =&gt;</span> changeUploadPath(p)); <span class="comment">// <span class="doctag">NOTE:</span> dbpath -&gt; uploadpath</span></span><br><span class="line">  <span class="keyword">if</span> (!fileExists(uploadPath)) <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;업로드된 파일이 존재 하지 않음&#x27;</span>));</span><br><span class="line">  <span class="keyword">const</span> zip = <span class="keyword">new</span> <span class="built_in">require</span>(<span class="string">&#x27;node-zip&#x27;</span>)();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; uploadPath.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">    zip.file(originalname[i], fs.readFileSync(uploadPath[i]));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> zipDownloadRoot = path.join(config.root, <span class="string">&#x27;/public/upload/zip&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!dirExists(zipDownloadRoot)) fs.mkdirSync(zipDownloadRoot); <span class="comment">// <span class="doctag">NOTE:</span> zip 만들 폴더 체크 후 생성.</span></span><br><span class="line">  <span class="keyword">const</span> zipPath = <span class="string">`<span class="subst">$&#123;zipDownloadRoot&#125;</span>/<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>_<span class="subst">$&#123;crypto.randomBytes(<span class="number">8</span>).toString(<span class="string">&#x27;hex&#x27;</span>)&#125;</span>.zip`</span>;</span><br><span class="line">  <span class="keyword">const</span> addZip = zip.generate(&#123; <span class="attr">base64</span>: <span class="literal">false</span>, <span class="attr">compression</span>: <span class="string">&#x27;DEFLATE&#x27;</span> &#125;); <span class="comment">// <span class="doctag">NOTE:</span> zip 파일 생성.</span></span><br><span class="line">  fs.writeFileSync(zipPath, addZip, <span class="string">&#x27;binary&#x27;</span>); <span class="comment">// <span class="doctag">NOTE:</span> zip 파일 저장</span></span><br><span class="line">  <span class="keyword">return</span> resolve(zipPath);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.changeDBPath = changeDBPath;</span><br><span class="line"><span class="built_in">exports</span>.changeUploadPath = changeUploadPath;</span><br><span class="line"><span class="built_in">exports</span>.multerInit = multerInit;</span><br><span class="line"><span class="built_in">exports</span>.convertMulterData = convertMulterData;</span><br><span class="line"><span class="built_in">exports</span>.zipDownload = zipDownload;</span><br></pre></td></tr></table></figure><h2 id="db"><a href="#db" class="headerlink" title="db"></a>db</h2><p>db는 mongodb로 view, 다운로드에 필요한 정보를 저장 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Example model</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; Schema &#125; = mongoose;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> uploadsSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">  title: <span class="built_in">String</span>, <span class="comment">// 글 제목</span></span><br><span class="line">  uploadImagePath: <span class="built_in">Array</span>, <span class="comment">// view 이미지 경로</span></span><br><span class="line">  uploadImageName: <span class="built_in">Array</span>, <span class="comment">// view 이미지 파일명</span></span><br><span class="line">  imageOriginalName: <span class="built_in">Array</span>, <span class="comment">// download 원래 파일명</span></span><br><span class="line">  create_at: &#123;</span><br><span class="line">    type: <span class="built_in">Date</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="built_in">Date</span>.now(),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">mongoose.model(<span class="string">&#x27;uploads&#x27;</span>, uploadsSchema);</span><br></pre></td></tr></table></figure><h2 id="업로드-다운로드-route"><a href="#업로드-다운로드-route" class="headerlink" title="업로드, 다운로드 route"></a>업로드, 다운로드 route</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>).Router();</span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> upload = <span class="built_in">require</span>(<span class="string">&#x27;../lib/local_upload_util&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UploadModel = mongoose.model(<span class="string">&#x27;uploads&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">  app.use(<span class="string">&#x27;/&#x27;</span>, router);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  UploadModel.find(<span class="function">(<span class="params">err, lists</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</span><br><span class="line">    <span class="keyword">return</span> res.render(<span class="string">&#x27;list&#x27;</span>, &#123;</span><br><span class="line">      title: <span class="string">&#x27;업로드한 리스트&#x27;</span>,</span><br><span class="line">      lists,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이미지 1개 업로드 (싱글)</span></span><br><span class="line">router.get(<span class="string">&#x27;/single&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.render(<span class="string">&#x27;single&#x27;</span>, &#123;</span><br><span class="line">    title: <span class="string">&#x27;이미지 1개 업로드 form&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이미지 1개 업로드 (싱글) 처리</span></span><br><span class="line">router.post(<span class="string">&#x27;/single&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> uploadInit = upload.multerInit(<span class="string">&#x27;images&#x27;</span>).single(<span class="string">&#x27;attachment&#x27;</span>);</span><br><span class="line">  uploadInit(req, res, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</span><br><span class="line">    <span class="keyword">const</span> uploadData = <span class="keyword">new</span> UploadModel(&#123;</span><br><span class="line">      title: req.body.title,</span><br><span class="line">      uploadImagePath: [upload.changeDBPath(req.file.path)],</span><br><span class="line">      uploadImageName: [req.file.filename],</span><br><span class="line">      imageOriginalName: [req.file.originalname],</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> uploadData.save(<span class="function">(<span class="params">saveErr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (saveErr) <span class="keyword">return</span> next(saveErr);</span><br><span class="line">      <span class="keyword">return</span> res.redirect(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이미지 여러개 업로드 (Array)</span></span><br><span class="line">router.get(<span class="string">&#x27;/array&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.render(<span class="string">&#x27;array&#x27;</span>, &#123;</span><br><span class="line">    title: <span class="string">&#x27;이미지 여러개 업로드 form&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이미지 여러개 업로드 (Array) 처리</span></span><br><span class="line">router.post(<span class="string">&#x27;/array&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> uploadInit = upload.multerInit(<span class="string">&#x27;images&#x27;</span>).array(<span class="string">&#x27;attachment&#x27;</span>);</span><br><span class="line">  uploadInit(req, res, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</span><br><span class="line">    <span class="keyword">const</span> convertMulterData = upload.convertMulterData(req.files);</span><br><span class="line">    <span class="keyword">if</span> (!convertMulterData) <span class="keyword">return</span> next(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;업로드된 파일들의 정보를 변환할 수 업음&#x27;</span>));</span><br><span class="line">    <span class="keyword">const</span> uploadData = <span class="keyword">new</span> UploadModel(&#123;</span><br><span class="line">      title: req.body.title,</span><br><span class="line">      uploadImagePath: convertMulterData.uploadPaths,</span><br><span class="line">      uploadImageName: convertMulterData.fileName,</span><br><span class="line">      imageOriginalName: convertMulterData.fileOriginalName,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> uploadData.save(<span class="function">(<span class="params">saveErr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (saveErr) <span class="keyword">return</span> next(saveErr);</span><br><span class="line">      <span class="keyword">return</span> res.redirect(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 지정된 이미지 input 업로드 (fields)</span></span><br><span class="line">router.get(<span class="string">&#x27;/fields&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.render(<span class="string">&#x27;fields&#x27;</span>, &#123;</span><br><span class="line">    title: <span class="string">&#x27;이미지 각각 테스트 form&#x27;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이미지 각각 업로드 (fields) 처리</span></span><br><span class="line">router.post(<span class="string">&#x27;/fields&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> uploadInit = upload.multerInit(<span class="string">&#x27;images&#x27;</span>).fields([&#123; <span class="attr">name</span>: <span class="string">&#x27;attachment1&#x27;</span>, <span class="attr">maxCount</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;attachment2&#x27;</span>, <span class="attr">maxCount</span>: <span class="number">1</span> &#125;]);</span><br><span class="line">  uploadInit(req, res, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</span><br><span class="line">    <span class="keyword">const</span> uploadData = <span class="keyword">new</span> UploadModel(&#123;</span><br><span class="line">      title: req.body.title,</span><br><span class="line">      uploadImagePath: [upload.changeDBPath(req.files.attachment1[<span class="number">0</span>].path), upload.changeDBPath(req.files.attachment2[<span class="number">0</span>].path)],</span><br><span class="line">      uploadImageName: [req.files.attachment1[<span class="number">0</span>].filename, req.files.attachment2[<span class="number">0</span>].filename],</span><br><span class="line">      imageOriginalName: [req.files.attachment1[<span class="number">0</span>].originalname, req.files.attachment2[<span class="number">0</span>].originalname],</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> uploadData.save(<span class="function">(<span class="params">saveErr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (saveErr) <span class="keyword">return</span> next(saveErr);</span><br><span class="line">      <span class="keyword">return</span> res.redirect(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/download&#x27;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// eslint-disable-next-line no-underscore-dangle</span></span><br><span class="line">  UploadModel.findOne(&#123; <span class="attr">_id</span>: req.query._id &#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</span><br><span class="line">    <span class="keyword">if</span> (data.uploadImagePath.length === <span class="number">1</span>) &#123; <span class="comment">// <span class="doctag">NOTE:</span> 업로드 한개는 그냥 바로 다운로드.</span></span><br><span class="line">      res.cookie(<span class="string">&#x27;isDownload&#x27;</span>, <span class="string">&#x27;complete&#x27;</span>, &#123; <span class="comment">// <span class="doctag">NOTE:</span> 로딩 바를 위한 쿠키 값.</span></span><br><span class="line">        maxAge: <span class="number">10000</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      res.setHeader(<span class="string">&#x27;Content-disposition&#x27;</span>, <span class="string">&#x27;attachment&#x27;</span>); <span class="comment">// <span class="doctag">NOTE:</span> 컨텐츠 타입 첨부파일로 설정.</span></span><br><span class="line">      <span class="keyword">return</span> res.download(upload.changeUploadPath(data.uploadImagePath[<span class="number">0</span>]), data.imageOriginalName[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> upload.zipDownload(data.uploadImagePath, data.imageOriginalName).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      res.cookie(<span class="string">&#x27;isDownload&#x27;</span>, <span class="string">&#x27;complete&#x27;</span>, &#123; <span class="comment">// <span class="doctag">NOTE:</span> 로딩 바를 위한 쿠키 값.</span></span><br><span class="line">        maxAge: <span class="number">10000</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      res.setHeader(<span class="string">&#x27;Content-disposition&#x27;</span>, <span class="string">&#x27;attachment&#x27;</span>); <span class="comment">// <span class="doctag">NOTE:</span> 컨텐츠 타입 첨부파일로 설정.</span></span><br><span class="line">      <span class="keyword">return</span> res.download(result);</span><br><span class="line">    &#125;).catch(<span class="function">(<span class="params">zipDownloadErr</span>) =&gt;</span> next(zipDownloadErr));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>싱글(하나의 파일)인 경우엔 req.file, 나머지는 req.files에 파일 정보가 넘어 온다.</p><ul><li>fieldname: input file 태그 이름</li><li>originalname: 파일의 원본 이름</li><li>encoding: 파일의 인코딩</li><li>mimetype: 파일의 확장자</li><li>size: 파일 크기</li><li>filename: disk storage 에만 해당하는 프로퍼티로 모듈에서 작성한 바뀐 파일명</li><li>path: disk storage 에만 해당하는 프로퍼티로 임시 저장된 파일의 시스템 경로</li></ul><p><img src="https://res.cloudinary.com/ddebpn43q/image/upload/v1568264595/ezgif.com-video-to-gif_ae3dpi.gif" alt="동작 짤"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js Mongoose 사용해보기 - 2</title>
      <link href="/2018/06/18/nodejs-express-use-mongoose-2/"/>
      <url>/2018/06/18/nodejs-express-use-mongoose-2/</url>
      
        <content type="html"><![CDATA[<p>node.js에서 mongoose로 mongodb update, delete, join, group 정리한 글</p><h2 id="문서-갱신"><a href="#문서-갱신" class="headerlink" title="문서 갱신"></a>문서 갱신</h2><p>문서를 업데이트 하는 방법이 몇 개 잇다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/update1&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    userModel.findOne(&#123; <span class="attr">userName</span>: <span class="string">&#x27;날강두&#x27;</span> &#125;, <span class="function">(<span class="params">err, User</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.json(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (User.length == <span class="number">0</span>) &#123;</span><br><span class="line">            res.json(<span class="string">&#x27;데이터가 없습니다.&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            User.position = <span class="string">&#x27;먹튀&#x27;</span>;</span><br><span class="line">            User.save(<span class="function">(<span class="params">err, UpdateUser</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    req.json(err);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.json(UpdateUser);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>findOne에서 문서를 조회 후 콜백 받은 데이터에 바꿀 꺼 넣고 세이브 하면 갱신 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:37:45.028Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c41cc2a822207ecb315e8&quot;</span>,</span><br><span class="line">  <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;크리스티아누 날강두&quot;</span>,</span><br><span class="line">  <span class="string">&quot;userNum&quot;</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="string">&quot;position&quot;</span>: <span class="string">&quot;먹튀&quot;</span>,</span><br><span class="line">  <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;날강두@유벤투스.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565d&quot;</span>,</span><br><span class="line">  <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이전엔 update 하나 엿는데 updateOne, updateMany로 바뀌엇다 -_-</p><p>뭔가 sql의 update set … 느낌 나는 방법으로도 갱신 할 수 잇다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @<span class="doctag">TODO:</span> 통상적인 update</span></span><br><span class="line">router.get(<span class="string">&#x27;/update2&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    userModel.updateOne(</span><br><span class="line">        &#123; <span class="attr">userName</span>: <span class="string">&#x27;크리스티아누 날강두&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">$set</span>: &#123; <span class="attr">userMail</span>: <span class="string">&#x27;먹튀@유벤투스.com&#x27;</span> &#125; &#125;,</span><br><span class="line">        (err) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                res.json(err);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.json(<span class="string">&#x27;update success&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>updateOne은 뭐 조건에 맞는 데이터 중 첫 번째 데이터만 갱신 한다는 것.</p><p>그리고 이거는 따로 갱신된 데이터를 콜백으로 못 받는다.</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1565279067/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-09_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_12.44.10_ezlq9k.png" alt="결과"></p><p>여러 문서를 갱신할려면 updateMany를 쓰면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/ @TODO: 통상적인 update</span><br><span class="line">router.get(<span class="string">&#x27;/update3&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    userModel.updateMany(</span><br><span class="line">        &#123; <span class="attr">position</span>: <span class="string">&#x27;공격수&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">$set</span>: &#123; <span class="attr">userNum</span>: <span class="number">999</span> &#125; &#125;,</span><br><span class="line">        (err) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                res.json(err);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.json(<span class="string">&#x27;update success&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>마찬가지로 콜백 받는 데이터가 업음.</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1565279206/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-09_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_12.46.31_itnhiu.png" alt="결과"></p><p>어휴 많다. 마지막으로 업데이트 하는 거 하나 더 적음</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/update4&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    userModel.findOneAndUpdate(</span><br><span class="line">        &#123; <span class="attr">userName</span>: <span class="string">&#x27;크리스티아누 날강두&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">$set</span>: &#123; <span class="attr">userMail</span>: <span class="string">&#x27;예전우리형@유벤투스.com&#x27;</span> &#125; &#125;,</span><br><span class="line">        &#123; <span class="attr">new</span>: <span class="literal">true</span> &#125;, <span class="comment">// new: true를 꼭 적어줘야 결과 반환이 됨</span></span><br><span class="line">        (err, data) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                res.json(err);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.json(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>조건에 맞는 데이터 중에 첫 번째 데이터를 가져와서 갱신을 함. 나름 편리하다.</p><p>결과도 콜백으로 받아 볼수도 잇다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:37:45.028Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c41cc2a822207ecb315e8&quot;</span>,</span><br><span class="line">  <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;크리스티아누 날강두&quot;</span>,</span><br><span class="line">  <span class="string">&quot;userNum&quot;</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="string">&quot;position&quot;</span>: <span class="string">&quot;먹튀&quot;</span>,</span><br><span class="line">  <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;예전우리형@유벤투스.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565d&quot;</span>,</span><br><span class="line">  <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>근데 예전 버전에선 안 떳는데 아마 5.X부터 생겻나봄. deprecated 어쩌구가 뜬다.</p><p>해결 방법은 mongoose connect에서 하나 추가 해주면 안 뜸.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongodb = mongoose.connect(<span class="string">&#x27;mongodb://localhost:27017/localtest&#x27;</span>, &#123;</span><br><span class="line">    useNewUrlParser: <span class="literal">true</span>,</span><br><span class="line">    useFindAndModify: <span class="literal">false</span> <span class="comment">// 이거 추가 하고 false로 하면 된다.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><p>이전엔 remove로 했는데 문서 보니 얘도 deleteOne, deleteMany가 생김ㅋ 컨셉인가?!</p><p>암튼 해보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @<span class="doctag">TODO:</span> 조건에 맞는 첫 번째 문서를 삭제할 때. 새로 생겻군...</span></span><br><span class="line">router.get(<span class="string">&#x27;/deleteOne&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    userModel.deleteOne(&#123; <span class="attr">userName</span>: <span class="string">&#x27;크리스티아누 날강두&#x27;</span> &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.json(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.json(<span class="string">&#x27;삭제됨.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>뭐 조건에 맞는 첫 번째 데이터 삭제임. 로컬에 잇는 날강두 문서가 삭제되엇다.</p><p>deleteMany는 뭐 여러 개 삭제하는거겟지..</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @<span class="doctag">TODO:</span> 조건에 맞는 여러 데이터를 삭제 할 때. 이거도 마찬가지로 새로 생겻구먼..</span></span><br><span class="line">router.get(<span class="string">&#x27;/deleteMany&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    userModel.deleteMany(&#123;&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.json(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.json(<span class="string">&#x27;삭제됨.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>조건 빼고 지워봣더니 다 지워지네. ㅇㅋ</p><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>mongodb는 nosql이라 일단 관계를 지양 하는데 그래도 필요? 할 때 쓰라고 만든거 같음.</p><p>populate랑 lookup 으로 이전에 조인을 햇엇는데 지금도 잘 되는지 확인 해보자.</p><p>조인을 하기 위해 팀 데이터를 저장할 컬렉션을 하나 미리 만드럿엇음. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> teamSchema = <span class="keyword">new</span> Schema(&#123;</span><br><span class="line">    teamName: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">&#x27;teams&#x27;</span>, teamSchema);</span><br></pre></td></tr></table></figure><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1565279445/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-09_%E1%84%8B%E1%85%A9%E1%84%8C%E1%85%A5%E1%86%AB_12.50.29_y23dip.png" alt="더미"></p><p>근데 조인을 할려면 뭔가 데이터가 잇어야 하니 미리 더미 데이터를 만들어 두엇고</p><p>저번에 유저 도큐먼트를 만들 때 위의 생성 값으로 넣어준거임.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> Schema(&#123; <span class="comment">// 유저 스키마 정의</span></span><br><span class="line">    userName: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: [<span class="literal">true</span>, <span class="string">&#x27;아이디는 필수입니다.&#x27;</span>] <span class="comment">// 필수 값 validation</span></span><br><span class="line">    &#125;,</span><br><span class="line">    userNum: &#123;</span><br><span class="line">        type: <span class="built_in">Number</span>,</span><br><span class="line">        required: [<span class="literal">true</span>, <span class="string">&#x27;등번호는 필수입니다.&#x27;</span>] <span class="comment">// 필수 값 validation</span></span><br><span class="line">    &#125;,</span><br><span class="line">    position: <span class="built_in">String</span>,</span><br><span class="line">    userMail: <span class="built_in">String</span>,</span><br><span class="line">    team: &#123;</span><br><span class="line">        type: Schema.Types.ObjectId, <span class="comment">// populate를 이용하기 위한 타입 처리</span></span><br><span class="line">        ref: <span class="string">&#x27;teams&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    createAt: &#123;</span><br><span class="line">        type: <span class="built_in">Date</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="built_in">Date</span>.now() <span class="comment">// 기본 값 오늘날짜로 설정</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">&#x27;users&#x27;</span>, userSchema);</span><br></pre></td></tr></table></figure><p>저번 글에 적은 유저 스키마에 team이라는 프로퍼티가 rdb에서 fk 설정 하듯이 </p><p>그런 느낌인데 type은 mongo의 고유 ID, 참조 테이블은 팀 테이블이다.</p><p>즉 teams 컬렉션의 고유 아디를 fk로.</p><p>후 이제 populate를 이용해 join이 된 결과를 보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/populate&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    userModel.find(&#123;&#125;).populate(<span class="string">&#x27;team&#x27;</span>).exec(<span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.json(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.json(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>결과는 이러 하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:42:53.213Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c4428ebc6bc081f7a83c1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;크리스티아누 날강두&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userNum&quot;</span>: <span class="number">7</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;날강두@유벤투스.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;team&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565d&quot;</span>,</span><br><span class="line">      <span class="string">&quot;teamName&quot;</span>: <span class="string">&quot;유벤투스&quot;</span>,</span><br><span class="line">      <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:42:53.213Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c442debc6bc081f7a83c2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;모하메드 살라&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userNum&quot;</span>: <span class="number">11</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">    <span class="string">&quot;team&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565e&quot;</span>,</span><br><span class="line">      <span class="string">&quot;teamName&quot;</span>: <span class="string">&quot;리버풀&quot;</span>,</span><br><span class="line">      <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;이집트메시@리버풀.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:42:53.213Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c442debc6bc081f7a83c3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;피에르에메릭 오바메양&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userNum&quot;</span>: <span class="number">17</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">    <span class="string">&quot;team&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565f&quot;</span>,</span><br><span class="line">      <span class="string">&quot;teamName&quot;</span>: <span class="string">&quot;아스날&quot;</span>,</span><br><span class="line">      <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;득점왕@아스날.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:42:53.213Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c442debc6bc081f7a83c4&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;메수트 외질&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userNum&quot;</span>: <span class="number">11</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;미드필더&quot;</span>,</span><br><span class="line">    <span class="string">&quot;team&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565f&quot;</span>,</span><br><span class="line">      <span class="string">&quot;teamName&quot;</span>: <span class="string">&quot;아스날&quot;</span>,</span><br><span class="line">      <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;노랑머리@아스날.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>선수 밑에 팀이 다 종속으로 들어가 있다.</p><p>암튼 populate를 쓰려면 미리 스키마에서 join 하기 전에 타입을 정해놔야 하고, </p><p>타입을 objectId 외에는 사용할 수가 없다.</p><p>다른 방법으로 좀 전의 조인을 반대로 해보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/lookup&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    teamModel.aggregate([</span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     &quot;$match&quot;: &#123; // 조건절 쓰고 싶으면 여기에.</span></span><br><span class="line">        <span class="comment">//         </span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;,</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;$sort&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;_id&quot;</span>: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;$lookup&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;localField&quot;</span>: <span class="string">&quot;_id&quot;</span>,</span><br><span class="line">                <span class="string">&quot;from&quot;</span>: <span class="string">&quot;users&quot;</span>,</span><br><span class="line">                <span class="string">&quot;foreignField&quot;</span>: <span class="string">&quot;team&quot;</span>,</span><br><span class="line">                <span class="string">&quot;as&quot;</span>: <span class="string">&quot;users&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]).exec(<span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.json(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.json(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>결과는 이러하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565d&quot;</span>,</span><br><span class="line">    <span class="string">&quot;teamName&quot;</span>: <span class="string">&quot;유벤투스&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;users&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c4428ebc6bc081f7a83c1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:42:53.213Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;크리스티아누 날강두&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userNum&quot;</span>: <span class="number">7</span>,</span><br><span class="line">        <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;날강두@유벤투스.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;teamName&quot;</span>: <span class="string">&quot;리버풀&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;users&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c442debc6bc081f7a83c2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:42:53.213Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;모하메드 살라&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userNum&quot;</span>: <span class="number">11</span>,</span><br><span class="line">        <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">        <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565e&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;이집트메시@리버풀.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;teamName&quot;</span>: <span class="string">&quot;아스날&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;users&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c442debc6bc081f7a83c3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:42:53.213Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;피에르에메릭 오바메양&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userNum&quot;</span>: <span class="number">17</span>,</span><br><span class="line">        <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">        <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565f&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;득점왕@아스날.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c442debc6bc081f7a83c4&quot;</span>,</span><br><span class="line">        <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:42:53.213Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;메수트 외질&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userNum&quot;</span>: <span class="number">11</span>,</span><br><span class="line">        <span class="string">&quot;position&quot;</span>: <span class="string">&quot;미드필더&quot;</span>,</span><br><span class="line">        <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565f&quot;</span>,</span><br><span class="line">        <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;노랑머리@아스날.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>lookup이 원래 관계를 맺으라고 나온 기능이 아니고 집계 관련으로 알고 잇는데</p><p>뭐 암튼 관계는 왠만 하면 쓰지 말자. </p><p>아 추가로 위에 $lookup 밑에</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">&quot;$unwind&quot;</span>: <span class="string">&quot;$users&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p>추가하면 아스날 처럼 배열에 잇던 애들의 결과가 분리된다. 뭐 쓸 일이 언젠가 잇을래나?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565d&quot;</span>,</span><br><span class="line">    <span class="string">&quot;teamName&quot;</span>: <span class="string">&quot;유벤투스&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;users&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c4428ebc6bc081f7a83c1&quot;</span>,</span><br><span class="line">      <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:42:53.213Z&quot;</span>,</span><br><span class="line">      <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;크리스티아누 날강두&quot;</span>,</span><br><span class="line">      <span class="string">&quot;userNum&quot;</span>: <span class="number">7</span>,</span><br><span class="line">      <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">      <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;날강두@유벤투스.com&quot;</span>,</span><br><span class="line">      <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565d&quot;</span>,</span><br><span class="line">      <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;teamName&quot;</span>: <span class="string">&quot;리버풀&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;users&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c442debc6bc081f7a83c2&quot;</span>,</span><br><span class="line">      <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:42:53.213Z&quot;</span>,</span><br><span class="line">      <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;모하메드 살라&quot;</span>,</span><br><span class="line">      <span class="string">&quot;userNum&quot;</span>: <span class="number">11</span>,</span><br><span class="line">      <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">      <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565e&quot;</span>,</span><br><span class="line">      <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;이집트메시@리버풀.com&quot;</span>,</span><br><span class="line">      <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;teamName&quot;</span>: <span class="string">&quot;아스날&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;users&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c442debc6bc081f7a83c3&quot;</span>,</span><br><span class="line">      <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:42:53.213Z&quot;</span>,</span><br><span class="line">      <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;피에르에메릭 오바메양&quot;</span>,</span><br><span class="line">      <span class="string">&quot;userNum&quot;</span>: <span class="number">17</span>,</span><br><span class="line">      <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">      <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565f&quot;</span>,</span><br><span class="line">      <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;득점왕@아스날.com&quot;</span>,</span><br><span class="line">      <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;teamName&quot;</span>: <span class="string">&quot;아스날&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;users&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c442debc6bc081f7a83c4&quot;</span>,</span><br><span class="line">      <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:42:53.213Z&quot;</span>,</span><br><span class="line">      <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;메수트 외질&quot;</span>,</span><br><span class="line">      <span class="string">&quot;userNum&quot;</span>: <span class="number">11</span>,</span><br><span class="line">      <span class="string">&quot;position&quot;</span>: <span class="string">&quot;미드필더&quot;</span>,</span><br><span class="line">      <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565f&quot;</span>,</span><br><span class="line">      <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;노랑머리@아스날.com&quot;</span>,</span><br><span class="line">      <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="그룹"><a href="#그룹" class="headerlink" title="그룹"></a>그룹</h2><p>aggregate에 내장되어 있는 메소드 중에 group을 사용하면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">router.get(<span class="string">&#x27;/group&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    userModel.aggregate([</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;$group&quot;</span>: &#123; <span class="comment">// 고정된 형식.</span></span><br><span class="line">                <span class="string">&quot;_id&quot;</span>: &#123; <span class="string">&quot;position&quot;</span>: <span class="string">&quot;$position&quot;</span> &#125;, <span class="comment">// &#123; &#x27;alias ( 결과 필드명 )&#x27;: &#x27;$사용할 필드명&#x27; &#125;</span></span><br><span class="line">                <span class="string">&quot;count&quot;</span>: &#123; <span class="string">&quot;$sum&quot;</span>: <span class="number">1</span> &#125; <span class="comment">// 집계 메소드 따로 Count가 업음.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]).exec(<span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.json(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.json(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>결과는 이러하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;position&quot;</span>: <span class="string">&quot;미드필더&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;count&quot;</span>: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;count&quot;</span>: <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>여기서의 _id는 $group이 사용하는 고정된 형식. 바꾸면 에러 난다..</p><p>이 밖에도 aggregate는 다양한 함수들이 있으니 차차 필요 할 때마다</p><p>번역기를 돌려서 문서를 봐야겠다..</p><p>휴 끝.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://mongoosejs.com/docs/">mongoose doc</a></li><li><a href="https://docs.mongodb.com/manual/crud/">mongodb doc</a></li><li><a href="https://github.com/hidelryn/mongoose-example">작성한 코드</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Express </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js Mongoose 사용해보기 - 1</title>
      <link href="/2018/06/17/nodejs-express-use-mongoose-1/"/>
      <url>/2018/06/17/nodejs-express-use-mongoose-1/</url>
      
        <content type="html"><![CDATA[<p>mongodb 설치, mongoose로 mongodb 연결 및 스키마 정의, create, read까지 정리한 글</p><h2 id="mongodb-설치"><a href="#mongodb-설치" class="headerlink" title="mongodb 설치"></a>mongodb 설치</h2><p>mac 기준 homebrew로 편하게 ㄱㄱ</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew install mongodb</span><br><span class="line">sudo mkdir -p /data/db</span><br><span class="line">whoami <span class="comment"># 사용자명 출력</span></span><br><span class="line">sudo chown 터미널에 나온 사용자명 /data/db</span><br><span class="line">brew services start mongo</span><br></pre></td></tr></table></figure><p>사용한 mongoose 버전은 5.6.8이다. 버전 앞이 바뀌엇구먼 허허</p><p>코드는 귀찬으니 mongoose 쪽 부분만.</p><h2 id="연결-설정"><a href="#연결-설정" class="headerlink" title="연결 설정"></a>연결 설정</h2><p>연결은 4.X.X랑 아주 쪼금 바뀌엇다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line">mongoose.Promise = <span class="built_in">global</span>.Promise;</span><br><span class="line"><span class="keyword">const</span> mongodb = mongoose.connect(<span class="string">&#x27;mongodb://localhost:27017/localtest&#x27;</span>, &#123;</span><br><span class="line">    useNewUrlParser: <span class="literal">true</span> <span class="comment">// 이 부분이 다른걸로 바뀜</span></span><br><span class="line">&#125;);</span><br><span class="line">mongodb.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;mongodb has been connected&#x27;</span>);</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;mongodb connect err&#x27;</span>, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="스키마-정의"><a href="#스키마-정의" class="headerlink" title="스키마 정의"></a>스키마 정의</h2><p>스키마를 정의해두면 직접 db 안을 안 봐도 구조가 어떠케 생겨먹엇는지 알 수가 잇고</p><p>연결이 잘 되어 잇으면 실제 컬렉션에 데이터 삽입할 떄 정의한대로 컬렉션 생성을 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> Schema = mongoose.Schema;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> Schema(&#123; <span class="comment">// 유저 스키마 정의</span></span><br><span class="line">    userName: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: [<span class="literal">true</span>, <span class="string">&#x27;아이디는 필수입니다.&#x27;</span>] <span class="comment">// 필수 값 validation</span></span><br><span class="line">    &#125;,</span><br><span class="line">    userNum: &#123;</span><br><span class="line">        type: <span class="built_in">Number</span>,</span><br><span class="line">        required: [<span class="literal">true</span>, <span class="string">&#x27;등번호는 필수입니다.&#x27;</span>] <span class="comment">// 필수 값 validation</span></span><br><span class="line">    &#125;,</span><br><span class="line">    position: <span class="built_in">String</span>,</span><br><span class="line">    userMail: <span class="built_in">String</span>,</span><br><span class="line">    user: &#123;</span><br><span class="line">        type: Schema.Types.ObjectId, <span class="comment">// populate를 이용하기 위한 타입 처리</span></span><br><span class="line">        ref: <span class="string">&#x27;teams&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    createAt: &#123;</span><br><span class="line">        type: <span class="built_in">Date</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="built_in">Date</span>.now() <span class="comment">// 기본 값 오늘날짜로 설정</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">&#x27;users&#x27;</span>, userSchema); <span class="comment">// user == 컬렉션명</span></span><br></pre></td></tr></table></figure><p>여전히 컬렉션을 생성 할 때 user 이런식으로 정의하면 복수형인 users로 자동 변환 된다.</p><p>스키마에서 쓸 수 잇는 데이터 타입은 정리를 해두자.</p><ul><li>String = 문자열</li><li>Number = 숫자</li><li>Date = 날짜형</li><li>Boolean = true / false</li><li>Mixed = 잡종, 어떤 형이든 다 가능.</li><li>ObjectId = mongodb에서 쓰는 고유 아디 형식 같음.</li><li>Array = 배열</li></ul><h2 id="document-생성"><a href="#document-생성" class="headerlink" title="document 생성"></a>document 생성</h2><p>mongodb는 하나의 document가 mysql에서 하나의 row와 같음.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userModel = <span class="built_in">require</span>(<span class="string">&#x27;../models/users&#x27;</span>); <span class="comment">// 정의한 스키마</span></span><br><span class="line"><span class="comment">// @<span class="doctag">TODO:</span> 1 document 생성</span></span><br><span class="line">router.get(<span class="string">&#x27;/create&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">new</span> userModel(&#123; <span class="comment">// 새 객체에 넣을 데이터 쓴다.</span></span><br><span class="line">        userName: <span class="string">&#x27;크리스티아누 날강두&#x27;</span>,</span><br><span class="line">        userNum: <span class="number">7</span>,</span><br><span class="line">        position: <span class="string">&#x27;공격수&#x27;</span>,</span><br><span class="line">        team: <span class="string">&#x27;5d4c412caf60c707c225565d&#x27;</span>, <span class="comment">// 일단 무시 조인할 때 설명.</span></span><br><span class="line">        userMail: <span class="string">&#x27;날강두@유벤투스.com&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    user.save(<span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123; <span class="comment">// .save()를 호출하면 끝.</span></span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.json(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.json(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>실행하면 다음과 같은 결과를 볼 수 잇다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:37:45.028Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c41cc2a822207ecb315e8&quot;</span>, <span class="comment">// mongo 고유 ID</span></span><br><span class="line">  <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;크리스티아누 날강두&quot;</span>,</span><br><span class="line">  <span class="string">&quot;userNum&quot;</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">  <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;날강두@유벤투스.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565d&quot;</span>,</span><br><span class="line">  <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="여러-개-document-생성"><a href="#여러-개-document-생성" class="headerlink" title="여러 개 document 생성"></a>여러 개 document 생성</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @<span class="doctag">TODO:</span> 2개 이상의 document를 생성.</span></span><br><span class="line">router.get(<span class="string">&#x27;/manyCreate&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> users = [</span><br><span class="line">        &#123;</span><br><span class="line">            userName: <span class="string">&#x27;모하메드 살라&#x27;</span>,</span><br><span class="line">            userNum: <span class="number">11</span>,</span><br><span class="line">            position: <span class="string">&#x27;공격수&#x27;</span>,</span><br><span class="line">            team: <span class="string">&#x27;5d4c412caf60c707c225565e&#x27;</span>, <span class="comment">// 일단 무시.</span></span><br><span class="line">            userMail: <span class="string">&#x27;이집트메시@리버풀.com&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            userName: <span class="string">&#x27;피에르에메릭 오바메양&#x27;</span>,</span><br><span class="line">            userNum: <span class="number">17</span>,</span><br><span class="line">            position: <span class="string">&#x27;공격수&#x27;</span>,</span><br><span class="line">            team: <span class="string">&#x27;5d4c412caf60c707c225565f&#x27;</span>,</span><br><span class="line">            userMail: <span class="string">&#x27;득점왕@아스날.com&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            userName: <span class="string">&#x27;메수트 외질&#x27;</span>,</span><br><span class="line">            userNum: <span class="number">11</span>,</span><br><span class="line">            position: <span class="string">&#x27;미드필더&#x27;</span>,</span><br><span class="line">            team: <span class="string">&#x27;5d4c412caf60c707c225565f&#x27;</span>,</span><br><span class="line">            userMail: <span class="string">&#x27;노랑머리@아스날.com&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ];</span><br><span class="line">    userModel.insertMany(users, <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.json(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.json(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>배열 안에 object로 삽입할 데이터를 적어두고 insertMany를 호출하면 끝.</p><p>아 예전에 중간에 데이터가 빠져서 엿나.. 그 밖 여러 요인으로 인해 정상적인 처리가 안되엇을 때</p><p>컬렉션에 있는 데이터들이 아주 개판이 되엇던 적이 잇엇던 걸로 기억 한다 암튼 조심.</p><p>mongoose는 삽입하면 바로바로 뭐가 들어간지 리턴이 되서 참 편하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:37:45.028Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c42242a822207ecb315e9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;모하메드 살라&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userNum&quot;</span>: <span class="number">11</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">    <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;이집트메시@리버풀.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:37:45.028Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c42242a822207ecb315ea&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;피에르에메릭 오바메양&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userNum&quot;</span>: <span class="number">17</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">    <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;득점왕@아스날.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:37:45.028Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c42242a822207ecb315eb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;메수트 외질&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userNum&quot;</span>: <span class="number">11</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;미드필더&quot;</span>,</span><br><span class="line">    <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;노랑머리@아스날.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>아 그리고 아까 스키마에 정의 해놓은 required에 대한 처리는 어떻게 하는지 적어둔다.</p><p>새로 생성하는 document에 required를 걸어논 키의 데이터를 빼먹고 실행해보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @<span class="doctag">TODO:</span> mongoose validation</span></span><br><span class="line">router.get(<span class="string">&#x27;/validation&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">new</span> userModel(&#123;</span><br><span class="line">        userName: <span class="string">&#x27;해리 맥과이어&#x27;</span>,</span><br><span class="line">        userNum: <span class="literal">null</span>,</span><br><span class="line">        position: <span class="string">&#x27;수비수&#x27;</span>,</span><br><span class="line">        userMail: <span class="string">&#x27;비싼몸@맨유.com&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> validateErr = user.validateSync(); <span class="comment">// err return </span></span><br><span class="line">    user.save(<span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.json(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result &amp;&amp; !validateErr) &#123;</span><br><span class="line">            res.json(result);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.json(validateErr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>required에 걸리므로 에러를 할당 받는다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;errors&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;userNum&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;message&quot;</span>: <span class="string">&quot;등번호는 필수입니다.&quot;</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;ValidatorError&quot;</span>,</span><br><span class="line">      <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;message&quot;</span>: <span class="string">&quot;등번호는 필수입니다.&quot;</span>,</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;required&quot;</span>,</span><br><span class="line">        <span class="string">&quot;path&quot;</span>: <span class="string">&quot;userNum&quot;</span>,</span><br><span class="line">        <span class="string">&quot;value&quot;</span>: <span class="literal">null</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;required&quot;</span>,</span><br><span class="line">      <span class="string">&quot;path&quot;</span>: <span class="string">&quot;userNum&quot;</span>,</span><br><span class="line">      <span class="string">&quot;value&quot;</span>: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;_message&quot;</span>: <span class="string">&quot;users validation failed&quot;</span>,</span><br><span class="line">  <span class="string">&quot;message&quot;</span>: <span class="string">&quot;users validation failed: userNum: 등번호는 필수입니다.&quot;</span>,</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;ValidationError&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="문서-읽기"><a href="#문서-읽기" class="headerlink" title="문서 읽기"></a>문서 읽기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @<span class="doctag">TODO:</span> 조회 &#123;&#125; 오브젝트 안에 조건이 들어감.</span></span><br><span class="line">router.get(<span class="string">&#x27;/find&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    userModel.find(&#123;&#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.json(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.json(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>find를 호출하면 된다 {} 안이 where 절이다. 다양한 조건을 걸 수가 이씀.</p><p>현재는 조건이 업으니 모두 출력 한다. 그리고 find류는 모두 Array타입으로 리턴 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:37:45.028Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c41cc2a822207ecb315e8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;크리스티아누 날강두&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userNum&quot;</span>: <span class="number">7</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;날강두@유벤투스.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565d&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:37:45.028Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c42242a822207ecb315e9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;모하메드 살라&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userNum&quot;</span>: <span class="number">11</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">    <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;이집트메시@리버풀.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:37:45.028Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c42242a822207ecb315ea&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;피에르에메릭 오바메양&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userNum&quot;</span>: <span class="number">17</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">    <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;득점왕@아스날.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:37:45.028Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c42242a822207ecb315eb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;메수트 외질&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userNum&quot;</span>: <span class="number">11</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;미드필더&quot;</span>,</span><br><span class="line">    <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;노랑머리@아스날.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>where 조건이 뭐뭐 잇는지 적어두자.</p><ul><li>$eq는 ==</li><li>$gt는 &gt;</li><li>$gte는 &gt;=</li><li>$in은 Array타입 시 해당 데이터가 안에 포함되엇는지</li><li>$lt는 &lt;</li><li>$lte는 &lt;=</li><li>$ne는 !=</li><li>$nin은 Array타입 시 해당 데이터가 안에 포함 안되어잇는지</li></ul><p>조건절은 다 일일히 적긴 귀찬으니까 하나만 예로.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @<span class="doctag">TODO:</span> 조건절 예시 아래는 or</span></span><br><span class="line">router.get(<span class="string">&#x27;/or&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    userModel.find(&#123;</span><br><span class="line">        $or: [&#123; <span class="attr">userName</span>: <span class="string">&#x27;메수트 외질&#x27;</span> &#125;, &#123; <span class="attr">userName</span>: <span class="string">&#x27;크리스티아누 날강두&#x27;</span> &#125;]</span><br><span class="line">    &#125;).exec(<span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.json(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.json(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>결과는 아래와 같음</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:37:45.028Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c41cc2a822207ecb315e8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;크리스티아누 날강두&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userNum&quot;</span>: <span class="number">7</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;날강두@유벤투스.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565d&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:37:45.028Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c42242a822207ecb315eb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;메수트 외질&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userNum&quot;</span>: <span class="number">11</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;미드필더&quot;</span>,</span><br><span class="line">    <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;노랑머리@아스날.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>특정 필드만 받을 경우는 아래 처럼 하면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @<span class="doctag">TODO:</span> 특정 필드만 읽고 싶을 때.</span></span><br><span class="line">router.get(<span class="string">&#x27;/find-attr&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    userModel.find(&#123;&#125;).select(<span class="string">&#x27;userName userMail&#x27;</span>)</span><br><span class="line">        .exec(<span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                res.json(err);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.json(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>아 sql의 select username, userMail from … 뭐 이런 거.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c41cc2a822207ecb315e8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;크리스티아누 날강두&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;날강두@유벤투스.com&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c42242a822207ecb315e9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;모하메드 살라&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;이집트메시@리버풀.com&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c42242a822207ecb315ea&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;피에르에메릭 오바메양&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;득점왕@아스날.com&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c42242a822207ecb315eb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;메수트 외질&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;노랑머리@아스날.com&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>sql의 like 같은 기능이 mongo에선 regex다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @<span class="doctag">TODO:</span> 조건으로 정규식 사용, sql like과 같은 기능.</span></span><br><span class="line">router.get(<span class="string">&#x27;/regex&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  </span><br><span class="line">    userModel.find(&#123; <span class="attr">userName</span>: &#123; <span class="attr">$regex</span>: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;날강두&#x27;</span>, <span class="string">&#x27;i&#x27;</span>) &#125; &#125;).exec(<span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.json(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.json(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>날강두가 포함한 이름을 검색하는건데 아직 자주 안써봐서 좀.. like문도 기억이 잘..</p><p><a href="https://docs.mongodb.com/manual/reference/operator/query/regex/">mongodb regex</a></p><p>필요할 땐 공식 문서를 번역기로 돌려보자 암튼 결과는 이러하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:37:45.028Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c41cc2a822207ecb315e8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;크리스티아누 날강두&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userNum&quot;</span>: <span class="number">7</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;날강두@유벤투스.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565d&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>리턴 받는 개수를 정해서 받고 싶으면 아래 처럼 하면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @<span class="doctag">TODO:</span> 개수 제한.</span></span><br><span class="line">router.get(<span class="string">&#x27;/limit&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    userModel.find(&#123;&#125;).limit(<span class="number">2</span>).exec(<span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.json(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.json(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>sql에서 select top 2 … 또는 select * … limit 2; 이런 거</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:37:45.028Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c41cc2a822207ecb315e8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;크리스티아누 날강두&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userNum&quot;</span>: <span class="number">7</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;날강두@유벤투스.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565d&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:37:45.028Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c42242a822207ecb315e9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;모하메드 살라&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userNum&quot;</span>: <span class="number">11</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">    <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565e&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;이집트메시@리버풀.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>조회 햇을 시 해당 숫자만큼 건너뛰려면 아래 처럼 하면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @<span class="doctag">TODO:</span> 해당 숫자만큼 건너뛰고 조회 결과 리턴.</span></span><br><span class="line">router.get(<span class="string">&#x27;/skip&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    userModel.find(&#123;&#125;).skip(<span class="number">2</span>).exec(<span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.json(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.json(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>글쎄 이거 페이징 구현할 때 말곤 써 본 기억이 업다</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:37:45.028Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c42242a822207ecb315ea&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;피에르에메릭 오바메양&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userNum&quot;</span>: <span class="number">17</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">    <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;득점왕@아스날.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:37:45.028Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c42242a822207ecb315eb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;메수트 외질&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userNum&quot;</span>: <span class="number">11</span>,</span><br><span class="line">    <span class="string">&quot;position&quot;</span>: <span class="string">&quot;미드필더&quot;</span>,</span><br><span class="line">    <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565f&quot;</span>,</span><br><span class="line">    <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;노랑머리@아스날.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>아 정렬이 업군</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @<span class="doctag">TODO:</span> 정렬.</span></span><br><span class="line">router.get(<span class="string">&#x27;/sort&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    userModel.find(&#123;&#125;).sort(&#123; <span class="attr">id</span>: <span class="number">-1</span> &#125;).exec(<span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.json(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.json(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>필드: 1이면 오름차순, 필드: -1이면 내림차순이다.</p><p>정렬 할 필드 기준이 여러 개면 {필드: 1, 필드: -1 …} 이런식으로 추가를 하면 되는데 </p><p>정렬 순도 역시 적힌대로 앞에 꺼 부터 먼저 정렬 후 그 뒤에 다음 정렬임.</p><p>아 조건에 맞게 조회했을 때 첫 번째 문서만 조회하는 기능이 따로 잇다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @<span class="doctag">TODO:</span> 조건에 맞는 데이터 조회 해서 첫 번째 문서만 리턴.</span></span><br><span class="line">router.get(<span class="string">&#x27;/findOne&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    userModel.findOne(&#123; <span class="attr">userName</span>: <span class="string">&#x27;크리스티아누 날강두&#x27;</span> &#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            res.json(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.json(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>특이점은 find류는 다 Array 안에 Object가 포함이지만 얘는 단독 Object로 넘어옴.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;createAt&quot;</span>: <span class="string">&quot;2019-08-08T15:37:45.028Z&quot;</span>,</span><br><span class="line">  <span class="string">&quot;_id&quot;</span>: <span class="string">&quot;5d4c41cc2a822207ecb315e8&quot;</span>,</span><br><span class="line">  <span class="string">&quot;userName&quot;</span>: <span class="string">&quot;크리스티아누 날강두&quot;</span>,</span><br><span class="line">  <span class="string">&quot;userNum&quot;</span>: <span class="number">7</span>,</span><br><span class="line">  <span class="string">&quot;position&quot;</span>: <span class="string">&quot;공격수&quot;</span>,</span><br><span class="line">  <span class="string">&quot;userMail&quot;</span>: <span class="string">&quot;날강두@유벤투스.com&quot;</span>,</span><br><span class="line">  <span class="string">&quot;team&quot;</span>: <span class="string">&quot;5d4c412caf60c707c225565d&quot;</span>,</span><br><span class="line">  <span class="string">&quot;__v&quot;</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>엇 글이 너무 길어진다. 나눠서 내일 2편을 작성 하자.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Express </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js async 모듈 사용해보기</title>
      <link href="/2018/06/16/nodejs-async-lib/"/>
      <url>/2018/06/16/nodejs-async-lib/</url>
      
        <content type="html"><![CDATA[<p>요즘에는 node.js에서 async/await, promise를 지원해줘서 주로 쓰지만 처음 입문하엿을 땐 지원이 안 되서 <a href="https://www.npmjs.com/package/async">async</a> 모듈을 주로 썻엇다. 지금도 종종 애용하는 중</p><h2 id="순차적-처리"><a href="#순차적-처리" class="headerlink" title="순차적 처리"></a>순차적 처리</h2><p>series, waterfall이 잇다.</p><h3 id="series"><a href="#series" class="headerlink" title="series"></a>series</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">&#x27;async&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">4000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="number">3</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.series([a, b, c], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;results&#x27;</span>, results);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>함수의 실행 시간에 상관 업이 호출한 순서대로 실행 결과를 배열에 받는다.</p><p>함수의 콜백을 호출할 때 에러 처리를 할 경우 에러는 첫 인자에, 결과는 두 번째 인자에 넣어야 한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">results [ 1, 2, 3 ]</span><br></pre></td></tr></table></figure><h3 id="waterfall"><a href="#waterfall" class="headerlink" title="waterfall"></a>waterfall</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">&#x27;async&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">4000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="function">(<span class="params">data, cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="literal">null</span>, data + <span class="number">2</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="function">(<span class="params">data, cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="literal">null</span>, data + <span class="number">3</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.waterfall([a, b, c], <span class="function">(<span class="params">err, result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;result&#x27;</span>, result);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>waterfall도 함수의 실행 시간과 상관 업이 호출한 순서대로 실행을 하는데</p><p>series와 다른 점은 각 함수의 결과를 다음 함수에 파라미터로 넘길 수가 잇다.</p><p>마찬가지로 각 함수의 콜백의 첫 인자는 에러, 두 번째 인자는 넘길 데이터이다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result 6</span><br></pre></td></tr></table></figure><h2 id="병렬-처리"><a href="#병렬-처리" class="headerlink" title="병렬 처리"></a>병렬 처리</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">&#x27;async&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.parallel([a, b], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;results&#x27;</span>, results);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>동시에 호출한 함수들이 모두 완료되어야 호출한 순서대로 응답을 배열로 받는다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">results [ 1, 2 ]</span><br></pre></td></tr></table></figure><h2 id="반복"><a href="#반복" class="headerlink" title="반복"></a>반복</h2><p>each와 eachSeries가 잇다.</p><h3 id="each"><a href="#each" class="headerlink" title="each"></a>each</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">&#x27;async&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line no-plusplus</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  arr.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="function">(<span class="params">_param, cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> random = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(_param);</span><br><span class="line">  &#125;, random);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> results = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.each(arr, <span class="function">(<span class="params">item, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  a(item, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    results.push(data);</span><br><span class="line">    callback();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;results&#x27;</span>, results);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>each는 반복할 함수의 실행 시간에 따라 빨리 처리되는 순서대로 응답을 한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">results [ 0, 6, 7, 8, 1, 4, 5, 2, 3, 9 ]</span><br></pre></td></tr></table></figure><h3 id="eachSeries"><a href="#eachSeries" class="headerlink" title="eachSeries"></a>eachSeries</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">&#x27;async&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line no-plusplus</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  arr.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="function">(<span class="params">_param, cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> random = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(_param);</span><br><span class="line">  &#125;, random);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> results = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.eachSeries(arr, <span class="function">(<span class="params">item, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  a(item, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    results.push(data);</span><br><span class="line">    callback();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;results&#x27;</span>, results);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>eachSeries는 무조건 반복할 함수의 실행 시간과 상관 업이 요청한 순서대로 응답을 한다.</p><p>단 그 만큼 데이터가 클 수록 실행 시간이 늘어난다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">results [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</span><br></pre></td></tr></table></figure><p>여기 적은 건 내가 주로 쓰던 거들이고 이외에도 많은 <a href="https://caolan.github.io/async/v3/">기능</a>등이 잇으므로 한 번씩 봐두도록 하자.</p><h2 id="주의점"><a href="#주의점" class="headerlink" title="주의점"></a>주의점</h2><p>예로 series를 쓸 때 이러한 경우가 잇을 수 잇다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">&#x27;async&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    x += <span class="number">10</span>;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">4000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;ㅠㅠ&#x27;</span>));</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    cb(<span class="literal">null</span>, <span class="number">3</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span>.series([a, b, c], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;err&#x27;</span>, err, <span class="string">&#x27;x&#x27;</span>, x);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;results&#x27;</span>, results);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>첫 함수는 잘 동작햇지만 두번 째 함수에선 처리 중에 에러가 발생햇다고 치자.</p><p>이러면 실행 결과가 어떠케 될까?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">err Error: ㅠㅠ</span><br><span class="line">    at Timeout.setTimeout [as _onTimeout] (/Volumes/Seagate Slim Drive/project/nodejs/async-example/error.js:15:8)</span><br><span class="line">    at ontimeout (timers.js:436:11)</span><br><span class="line">    at tryOnTimeout (timers.js:300:5)</span><br><span class="line">    at listOnTimeout (timers.js:263:5)</span><br><span class="line">    at Timer.processTimers (timers.js:223:10) x 110</span><br></pre></td></tr></table></figure><p>그렇다. 첫 함수는 정상적으로 작동되엇기에 x는 증가가 되버렷다.</p><p>만약 각 함수마다 db에 뭔가 갱신을 하는 코드라면 좀 골치가 아파질수도 잇다.</p><p>예외 처리를 잘 생각하자.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js Passport 모듈을 이용한 소셜 로그인 구현</title>
      <link href="/2018/06/15/nodejs-sns-signin/"/>
      <url>/2018/06/15/nodejs-sns-signin/</url>
      
        <content type="html"><![CDATA[<p>소셜로그인은 보통 OAuth2(트위터 빼고 -_-)라는 방식으로 구현을 하는데 구현하기 전에 <a href="https://d2.naver.com/helloworld/24942">OAuth와 춤을</a>이라는 글을 읽어두면 좋다.</p><p>소셜 로그인은 보통 각 그 회사들 sdk나 api doc이 잘 정리되어 잇는데 막상 그대로 구현하려면</p><p>매우 귀찬다. 마찬가지로 그 귀찬음을 좀 덜어내고자 패스포트 모듈을 사용한 로그인이다.</p><p>클라이언트는 이전 글에서 쓰던 거 그대로 사용하고 잇다.</p><p>HTML을 보면 페북, 트위터, 구글 이 3개의 아이콘이 그려져 잇는데 3개 다 패스포트로 하면 비슷하므로 트위터 하나만 예로 적어두자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add passport-twitter</span><br></pre></td></tr></table></figure><p>이전에 패스포트는 설치햇으므로 생략하고 패스포트 트위터를 설치하자 코드는 이러하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> passport = <span class="built_in">require</span>(<span class="string">&#x27;passport&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> TwitterStrategy = <span class="built_in">require</span>(<span class="string">&#x27;passport-twitter&#x27;</span>).Strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 트위터 처리.</span></span><br><span class="line">passport.use(<span class="keyword">new</span> TwitterStrategy(&#123;</span><br><span class="line">  consumerKey: process.env.TWITTER_API_KEY, <span class="comment">// 이하 아래는 twitter developer에서 발급.</span></span><br><span class="line">  consumerSecret: process.env.TWITTER_SECRET_KEY,</span><br><span class="line">  callbackURL: process.env.TWITTER_CALLBACK_URL,</span><br><span class="line">  includeEmail: <span class="literal">true</span>,</span><br><span class="line">&#125;, <span class="function">(<span class="params">token, tokenSecret, profile, done</span>) =&gt;</span> &#123;</span><br><span class="line">  UserModel.findOne(&#123; <span class="attr">email</span>: profile.emails[<span class="number">0</span>].value &#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> done(err); &#125;</span><br><span class="line">    <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">      <span class="keyword">const</span> user = <span class="keyword">new</span> UserModel(&#123;</span><br><span class="line">        email: profile.emails[<span class="number">0</span>].value,</span><br><span class="line">        password: security.randomHash(<span class="number">10</span>),</span><br><span class="line">        name: profile.displayName,</span><br><span class="line">        image: profile.photos[<span class="number">0</span>].value,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> user.save(<span class="function">(<span class="params">saveErr, saveUser</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (saveErr) &#123; <span class="keyword">return</span> done(saveErr); &#125;</span><br><span class="line">        <span class="keyword">return</span> done(<span class="literal">null</span>, saveUser);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> done(<span class="literal">null</span>, data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&#x27;/twitter&#x27;</span>, passport.authenticate(<span class="string">&#x27;twitter&#x27;</span>));</span><br><span class="line">router.get(<span class="string">&#x27;/twitter/callback&#x27;</span>, passport.authenticate(<span class="string">&#x27;twitter&#x27;</span>, &#123;</span><br><span class="line">  successRedirect: <span class="string">&#x27;/success&#x27;</span>, <span class="comment">// 처리 성공 시</span></span><br><span class="line">  failureRedirect: <span class="string">&#x27;/&#x27;</span>, <span class="comment">// 처리 실패 시</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">passport.serializeUser(<span class="function">(<span class="params">user, done</span>) =&gt;</span> &#123;</span><br><span class="line">  done(<span class="literal">null</span>, user);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">passport.deserializeUser(<span class="function">(<span class="params">user, done</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = user;</span><br><span class="line">  <span class="keyword">delete</span> data.password;</span><br><span class="line">  done(<span class="literal">null</span>, data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>이전 글의 패스포트 로그인 구현하고 다른 게 거의 업다. </p><p>TwitterStrategy를 통해 유저 정보를 받아 오면 내 db에서 체크하고 done으로.</p><p>아 소셜 로그인 같은 경우 비밀번호는 업으므로 그냥 임의의 해시 값을 적당하게 넣어 준다.</p><p>환경 변수 값을 생성 하려면 소셜 로그인을 해주는 회사마다 각 developer 사이트를 운영을 하는데 예로 트위터의 경우는 <a href="https://developer.twitter.com/">twitter developer</a>에 접속해서 로그인 후 앱을 하나 생성을 해야 한다. 이 부분이 제일 귀찬음</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1565872962/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-15_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_9.42.17_zd4wm6.png" alt="트위터 디벨로퍼"></p><p>이런 식으로 내용을 대충 가라로 써서 만든다. 제대로 작성해야 하는 부분은 callback url인데</p><p>이 url로 트위터에서 GET method로 유저들의 정보를 보내준다. 그러므로 서버에서 처리하는 url로 적어줘야 한다. 나 같은 경우는 /auth/twitter/callback이다.</p><p>그리고 나서 필요한 키들이 어케 생겻는지 확인 해보자.</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1565874893/%E3%85%85%E3%84%B1%E3%84%B7%E3%85%85%E3%84%B1%E3%84%B7%E3%85%85%E3%84%B7%E3%84%B1_aa4izr.png" alt="트위터 키"></p><p>이제 api key, api secret key, callback url을 환경 변수로 넣고 로그인 시도를 해보자.</p><p>아 근데 트위터는 기본적으로 이메일을 안 준다. 그래서 이메일을 얻기 위해선 다음과 같은 설정을 해줘야 한다.</p><p>트위터 앱의 Privacy policy URL, Terms of service URL을 추가해 준담 (대충 가라로)</p><p>아래 이미지처럼 퍼미션에서 이메일 요청을 해야된다.. 망할 트위터</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1565873860/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-15_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_9.56.49_nidy2i.png" alt="이메일 요청"></p><p>그럼 동작하는 원리가 클라이언트의 트위터 아이콘을 클릭해서 /twitter로 넘어가게 되면</p><p>작성한 TwitterStrategy의 app key, secret으로 알아서 패스포트가 알아서 트위터한테</p><p>유저 정보를 내놔라 이렇게 요청을 하게 된다. 그러면 트위터 서버에서 요청을 받고 해당 유저</p><p>정보를 내가 정의한 콜백 url로 보내 준다. 그럼 콜백 url에 패스포트 미들웨어가</p><p>수신을 해서 TwitterStrategy 로직대로 처리를 하고 세션에 담게 된다.</p><p>현존하는 소셜 거의 passport-@@으로 거의 구현되어 잇으니 찾아서 받아가지고 써보도록 하자.</p><p>마지막으로 트위터 로그인 짤</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1565874232/twiiter_nutggy.gif" alt="트위터 로그인"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Auth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js Passport 모듈을 이용한 로그인 구현</title>
      <link href="/2018/06/15/nodejs-signin/"/>
      <url>/2018/06/15/nodejs-signin/</url>
      
        <content type="html"><![CDATA[<p>저번 글에 이어서 작성</p><p>로그인 구현이 어렵진 않지만 은근 귀찮은 작업이라.. 패스포트 모듈을 쓰면 쪼금 편한 거 같은? 느낌이다.</p><p>해야할 작업은 로그인을 한 이후 유저 세션을 레디스에 넣어서 쓰도록 하자. (이전 글에선 귀찬아서 mongo에 넣엇음)</p><p>먼저 필요한 모듈을 설치하자 아 난 요즘 yarn을 쓰고 잇음.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add passport passport-local cookie-parser express-session redis connect-redis</span><br></pre></td></tr></table></figure><p>이제 로그인을 구현 해보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> passport = <span class="built_in">require</span>(<span class="string">&#x27;passport&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LocalStrategy = <span class="built_in">require</span>(<span class="string">&#x27;passport-local&#x27;</span>).Strategy;</span><br><span class="line"></span><br><span class="line"><span class="comment">// local Strategy 세팅</span></span><br><span class="line">passport.use(<span class="keyword">new</span> LocalStrategy(&#123;</span><br><span class="line">  usernameField: <span class="string">&#x27;email&#x27;</span>,</span><br><span class="line">  passwordField: <span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">  passReqToCallback: <span class="literal">true</span>,</span><br><span class="line">&#125;, <span class="function">(<span class="params">req, email, password, done</span>) =&gt;</span> &#123;</span><br><span class="line">  UserModel.findOne(&#123;</span><br><span class="line">    email: security.xssFilter(email),</span><br><span class="line">    password: security.changeHash(password),</span><br><span class="line">  &#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> done(err); &#125;</span><br><span class="line">    <span class="keyword">if</span> (!data) &#123;</span><br><span class="line">      <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>, <span class="string">&#x27;Either no registered email address or the password is incorrect.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> done(<span class="literal">null</span>, data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 로그인 처리.</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line no-unused-vars</span></span><br><span class="line">router.post(<span class="string">&#x27;/signIn&#x27;</span>, security.csrfProtection(), <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// eslint-disable-next-line consistent-return</span></span><br><span class="line">  passport.authenticate(<span class="string">&#x27;local&#x27;</span>, <span class="function">(<span class="params">err, user, message</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;user&#x27;, user);</span></span><br><span class="line">    <span class="comment">// console.log(&#x27;message&#x27;, message);</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> res.status(<span class="number">500</span>).json(err); &#125;</span><br><span class="line">    <span class="keyword">if</span> (!user) &#123; <span class="keyword">return</span> res.status(<span class="number">200</span>).json(&#123; <span class="attr">result</span>: <span class="literal">false</span>, <span class="attr">title</span>: <span class="string">&#x27;error&#x27;</span>, <span class="attr">comment</span>: message &#125;); &#125;</span><br><span class="line">    req.logIn(user, <span class="function">(<span class="params">sessionErr</span>) =&gt;</span> &#123; <span class="comment">// session init</span></span><br><span class="line">      <span class="keyword">if</span> (sessionErr) &#123; <span class="keyword">return</span> next(sessionErr); &#125;</span><br><span class="line">      <span class="keyword">return</span> res.status(<span class="number">200</span>).json(&#123; <span class="attr">result</span>: <span class="literal">true</span>, <span class="attr">title</span>: <span class="string">&#x27;success&#x27;</span>, <span class="attr">comment</span>: <span class="string">&#x27;login complete&#x27;</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)(req, res, next);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> profile 페이지</span></span><br><span class="line">router.get(<span class="string">&#x27;/success&#x27;</span>, security.isLogin, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// console.log(&#x27;req.user&#x27;, req.user);</span></span><br><span class="line">  res.render(<span class="string">&#x27;profile&#x27;</span>, &#123;</span><br><span class="line">    profile: req.user,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">passport.serializeUser(<span class="function">(<span class="params">user, done</span>) =&gt;</span> &#123;</span><br><span class="line">  done(<span class="literal">null</span>, user);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">passport.deserializeUser(<span class="function">(<span class="params">user, done</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> data = user;</span><br><span class="line">  <span class="keyword">delete</span> data.password;</span><br><span class="line">  done(<span class="literal">null</span>, data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>위에서 순서대로 설명</p><p>LocalStrategy가 로그인 구현 부분의 핵심이다.</p><p>usernameField, passwordField는 내가 지은 게 아니고 모듈에 정의된 프로퍼티이다.</p><p>여기에 form이나 ajax로 데이터 보내는 데이터의 ID 파라미터 이름을 적어두면 된다. </p><p>실제 내 HTML에서도 위의 정의한 대로 되어 있음.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Email&quot;</span> <span class="attr">required</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Password&quot;</span> <span class="attr">required</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>passReqToCallback는 아래의 콜백 데이터로 받을 것인가 그런건데 항상 true로 써 왓음. 딱히 false로 해보진 않앗다.</p><p>이제 이메일, 비밀번호가 클라이언트에서 보내주면 콜백 함수에서 email, password 여기에 넘어 온다.</p><p>그럼 db에서 (이전 글에 이어 mongodb) 이메일, 비밀번호로 조회 해서 (xss, hash는 이전 글에서 설명 햇으니 패스.) 나온 결과에 맞게 done()을 호출을 한다.</p><p>done에 몇개 까지 넣을 수 잇는지는 안 해봣는데 보통 첫 칸이 에러, 2번째 칸이 유저 데이터, 3번째 칸이 넣고 싶은 메세지 정도로 쓴다.</p><p>그럼 이 done이 어디로 가냐면 passport.serializeUser() 여기로 넘어 간다. 여기가 로그인 후 세션을 저장 하는 부분이다.</p><p>passport.deserializeUser()는 이제 웹 페이지 이동 시 호출 되서 세션에 담은 데이터를 호출 할수 잇게 해 줄 수 잇다.</p><p>아래에 /success로 가는 페이지에 req.user가 유저의 세션 데이터를 불러오는 것. (내가 지은게 아니고 모듈에서 지정한 이름)</p><p>모듈 만든 사람이 serializeUser에서 가볍게 유저 ID나 키만 저장하고 deserializeUser에서는 serializeUser에 저장한 유저 ID나 키로 DB에서 유저 데이터 조회 후 새로 세션을 갱신하라고 추천하는데 지금은 규모가 작으니 패스.</p><p>마지막으로 로그인할 때 처리할 라우터에 passport.authenticate를 적어서 우리가 작성한 passport Strategy를 사용 하게 끔 하면 된다.</p><p>req.logIn은 내가 만든 게 아니고 모듈에서 지원하는 건데 세션 적용을 하는 부분이다.</p><p>단순하게 form으로 데이터 처리 시에는 passport.authenticate를 미들웨어로 넣어서 처리하면 되는데 위의 사례는 로그인을 ajax로 처리할 때에 적용하는 패스포트 방법이다. 그리고 success로 가는 페이지에 security.isLogin 이 부분에 대해 적자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 로그인 세션 체크.</span></span><br><span class="line"><span class="built_in">module</span>.exports.isLogin = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (req.isAuthenticated()) &#123;</span><br><span class="line">    <span class="keyword">return</span> next();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res.redirect(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>유저 로그인 세션 체크하는 방법이다. 패스포트에서 지원함.</p><p>그리고 이게 끝이 아니고 몇 가지 자질구레한 설정을 express에 좀 해줘야 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cookieParser = <span class="built_in">require</span>(<span class="string">&#x27;cookie-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> passport = <span class="built_in">require</span>(<span class="string">&#x27;passport&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> redis = <span class="built_in">require</span>(<span class="string">&#x27;redis&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> RedisStore = <span class="built_in">require</span>(<span class="string">&#x27;connect-redis&#x27;</span>)(session);</span><br><span class="line">app.use(cookieParser()); <span class="comment">// 쿠키 사용</span></span><br><span class="line">app.use(session(&#123; <span class="comment">// 세션 적용</span></span><br><span class="line">  secret: <span class="string">&#x27;hi?delryn&#x27;</span>, <span class="comment">// 암호화를 하기위한 salt</span></span><br><span class="line">  resave: <span class="literal">false</span>, <span class="comment">// 세션 재저장 여부 체크</span></span><br><span class="line">  saveUninitialized: <span class="literal">false</span>, <span class="comment">// 초기화 되지 않은 세션 저장 여부 체크</span></span><br><span class="line">  store: <span class="keyword">new</span> RedisStore(&#123; <span class="comment">// 세션 정보를 redis 저장</span></span><br><span class="line">    client: redis.createClient(config.redis),</span><br><span class="line">    host: config.redis.host,</span><br><span class="line">    port: config.redis.port,</span><br><span class="line">    prefix: <span class="string">&#x27;session:&#x27;</span>,</span><br><span class="line">    db: <span class="number">0</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;));</span><br><span class="line">app.use(passport.initialize()); <span class="comment">// 앱 전역에 passport init</span></span><br><span class="line">app.use(passport.session()); <span class="comment">// 앱 전역에 passport 세션 사용</span></span><br></pre></td></tr></table></figure><p>세션과 패스포트를 사용하기 위한 적용이다.</p><p>세션 또한 쿠키 기반이기 때문에 cookieParser라는 모듈을 써야 하고 express-session가 이제 세션 설정하는 코드다.</p><p>connect-redis는 세션 데이터를 서버 메모리가 아닌 redis에 저장하기 쉽게 해주는 모듈이다.</p><p>마지막으로 로그인 하는 짤</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1565849447/signup_lmnimt.gif" alt="로그인"></p><p>다음 글에서는 소셜로 로그인하는 법을 적어야 겟다.</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="http://www.passportjs.org/docs/">passport doc</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Auth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Express에서 회원 가입 만들어 보기</title>
      <link href="/2018/06/11/nodejs-user-signup/"/>
      <url>/2018/06/11/nodejs-user-signup/</url>
      
        <content type="html"><![CDATA[<p>클라이언트 HTML, CSS는 <a href="https://www.florin-pop.com/blog/2019/03/double-slider-sign-in-up-form/">FLORIN POP - DOUBLE SLIDER - SIGN IN/UP FORM</a> 의 글을 보고 따라 했다.</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1565620242/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-12_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_11.30.03_ln0ffb.png" alt="클라이언트"></p><p>실제 서비스는 여러 개의 데이터를 기입해야 하지만 지금은 가볍게 하기 위해 이메일, 비밀번호, 이름만 적게끔 했다.</p><p>간단하게 빈 값에 대한 validation을 한 후 ajax로 파리미터들을 전송하게 햇다.</p><p>서버에선 어떠케 처리를 하는지 코드를 적어 두자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 가입 페이지 랜더링.</span></span><br><span class="line">router.get(<span class="string">&#x27;/&#x27;</span>, security.csrfProtection(), <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.render(<span class="string">&#x27;index&#x27;</span>, &#123;</span><br><span class="line">    csrfToken: req.csrfToken(),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>security.csrfProtection(), {csrfToken: req.csrfToken()} 이 부분에 대해서 적을려고 한건데</p><p>저 코드가 사용된 이유는 <a href="https://ko.wikipedia.org/wiki/%EC%82%AC%EC%9D%B4%ED%8A%B8_%EA%B0%84_%EC%9A%94%EC%B2%AD_%EC%9C%84%EC%A1%B0">csrf</a> 라는 웹사이트 취약점 공격 중의 하나 인데(자세한 내용은 링크 참조) 대비책으로 사용하는 기법으로 자주 보는 npm 사이트에도 적용이 되어 잇다.</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1565621372/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-12_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_11.47.11_cxvegq.png" alt="npm csrf"></p><p>직접 만든 건 아니고 <a href="https://www.npmjs.com/package/csurf">csurf</a>라는 좋은 라이브러리가 잇어서 사용을 햇다.</p><p>이 기법이 쿠키 기반이라 <a href="https://www.npmjs.com/package/cookie-parser">cookie-parser</a>가 필요함</p><p>이건 다음 글의 주제인 로그인에 대해 쓸 때 세션 때도 쓰므로 그 때 적어두자. 귀찮다..</p><p>위의 저 security.csrfProtection()의 코드를 보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> csrf 검증.</span></span><br><span class="line"><span class="built_in">module</span>.exports.csrfProtection = <span class="function">() =&gt;</span> csrf(&#123; <span class="attr">cookie</span>: <span class="literal">true</span> &#125;);</span><br></pre></td></tr></table></figure><p>한 줄이면 끝. 이렇게 모듈로 만들어두고 쓰면 편리하더라. 나 같은 경우엔 html meta에 넣어두엇음.</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1565621988/%E1%84%89%E1%85%B3%E1%84%8F%E1%85%B3%E1%84%85%E1%85%B5%E1%86%AB%E1%84%89%E1%85%A3%E1%86%BA_2019-08-12_%E1%84%8B%E1%85%A9%E1%84%92%E1%85%AE_11.59.26_ftgggu.png" alt="예시"></p><p>새로 고침을 해 보면 이 토큰은 1회성 토큰이기 때문에 계속 바뀐다.</p><p>그리고 클라이언트에서 form이든 ajax든 서버에 데이터를 보낼 때 아래 처럼 저 토큰 값을 꼭 보내줘야 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> csrf = $(<span class="string">&#x27;meta[name=&quot;csrf&quot;]&#x27;</span>).attr(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line"></span><br><span class="line"> $.ajax(&#123;</span><br><span class="line">          url: <span class="string">`/signUp?_csrf=<span class="subst">$&#123;csrf&#125;</span>`</span>,</span><br><span class="line">          type: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">          data: $(<span class="string">&#x27;#signUpForm&#x27;</span>).serialize(),</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>이제 토큰 값과 함께 데이터를 보내면 서버에서 처리를 해야 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 가입 처리.</span></span><br><span class="line"><span class="comment">// eslint-disable-next-line consistent-return</span></span><br><span class="line">router.post(<span class="string">&#x27;/signUp&#x27;</span>, security.csrfProtection(), <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; email, password, name &#125; = req.body;</span><br><span class="line">  <span class="keyword">if</span> (!email || !password || !name) &#123;</span><br><span class="line">    <span class="keyword">return</span> res.status(<span class="number">200</span>).json(&#123; <span class="attr">result</span>: <span class="literal">false</span>, <span class="attr">title</span>: <span class="string">&#x27;warning&#x27;</span>, <span class="attr">comment</span>: <span class="string">&#x27;email or password or name is omitted&#x27;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  UserModel.findOne(&#123;</span><br><span class="line">    email: security.xssFilter(email),</span><br><span class="line">    <span class="comment">// eslint-disable-next-line consistent-return</span></span><br><span class="line">  &#125;, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> next(err); &#125;</span><br><span class="line">    <span class="keyword">if</span> (data) &#123; <span class="keyword">return</span> res.json(&#123; <span class="attr">result</span>: <span class="literal">false</span>, <span class="attr">title</span>: <span class="string">&#x27;warning&#x27;</span>, <span class="attr">comment</span>: <span class="string">&#x27;This email has already been signed up.&#x27;</span> &#125;); &#125;</span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">new</span> UserModel(&#123;</span><br><span class="line">      email: security.xssFilter(email),</span><br><span class="line">      password: security.changeHash(security.xssFilter(password)),</span><br><span class="line">      name,</span><br><span class="line">    &#125;);</span><br><span class="line">    user.save(<span class="function">(<span class="params">saveErr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (saveErr) &#123; <span class="keyword">return</span> next(saveErr); &#125;</span><br><span class="line">      <span class="keyword">return</span> res.status(<span class="number">200</span>).json(&#123; <span class="attr">result</span>: <span class="literal">true</span>, <span class="attr">title</span>: <span class="string">&#x27;Your membership is complete&#x27;</span>, <span class="attr">comment</span>: <span class="string">&#x27;Please sign in.&#x27;</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>처리를 하는 라우터에 마찬가지로 security.csrfProtection()를 미들웨어로 넣으면 </p><p>이 친구가 알아서 검증을 하기 때문에 정상 토큰 이면 다음으로 진행을 하고 </p><p>비정상적인 토큰 값이거나 비어잇으면 403으로 리턴을 햇던 걸로..</p><p>사실 이건 회원 가입 뿐만 아니라 웹 사이트 전체 내에 사용자가 뭔가 입력을 하는 페이지의 같은 경우 다 넣어줘야 한다.</p><p>csrfProtection 코드를 모듈로 만든 이유가 이렇기 때문이다. 패시브처럼 써야 함.</p><p>나머지 가입 구현은 사실 위의 코드가 끝이다. 저 코드는 DB를 mongoDB를 쓰고 잇는데 클라가 보내준 email을 유저 컬렉션에서 조회를 한 후 중복된 이메일인지 체크를 해서 있으면 거절하고 업는 이메일이면 신규 유저로 인식을 하고 저장하는 게 끝이다.</p><p>저 코드에서 남겨둘려고 하는 건 xssFilter, changeHash 이 부분이다.</p><p><a href="https://ko.wikipedia.org/wiki/%EC%82%AC%EC%9D%B4%ED%8A%B8_%EA%B0%84_%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8C%85">xss</a>는 이거도 웹사이트 취약점 공격 중의 하나 인데(역시 이거도 자세한 내용은 링크 참조) 쉽게 적자면 사용자가 적는 form input에 스크립트를 넣는다는 소리다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;aa&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;script&gt;alert(&#x27;이게뭐여&#x27;&lt;/script&gt;&quot;</span></span></span><br></pre></td></tr></table></figure><p>뭐 이런식으로 해서 넘어올 때 스크립트가 만약에 잇다면 &lt;&gt; 이 부분만 entity 코드로 치환 해버리면 문자로 인식이 되기에 스크립트가 실행이 되질 않을 것이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 간단한 xss 필터.</span></span><br><span class="line"><span class="built_in">module</span>.exports.xssFilter = <span class="function">(<span class="params">_val</span>) =&gt;</span> _val.replace(<span class="regexp">/&lt;/g</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>).replace(<span class="regexp">/&gt;/g</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>마지막으로 changeHash는 <a href="https://d2.naver.com/helloworld/318732">안전한 비밀번호 저장</a>이란 글을 참고하면 좋다.</p><p>즉 비밀번호를 사용자가 입력한 일반 텍스트로 저장을 하면 안된다는 소리. 해킹은 고사하고 db 접근 권한이 잇는 사람이 들어가서 보면 그 사람이 평소에 쓰는 비밀번호나 이런 게 노출되버리기 때문이다. 악의적인 프로그래머라면 ㅎㅎ 말 안해도 끔찍하다.</p><p>아 여담으로 올해에 비밀번호를 평문으로 저장을 하는 코드와 DB를 난 본 적이 있다. 몹시 충격이였음…</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MY_SALT = <span class="string">&#x27;Always back up Hexo articles. :(&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 단방향 암호화.</span></span><br><span class="line"><span class="built_in">module</span>.exports.changeHash = <span class="function">(<span class="params">_val</span>) =&gt;</span> crypto.createHash(<span class="string">&#x27;sha512&#x27;</span>).update(_val + MY_SALT).digest(<span class="string">&#x27;base64&#x27;</span>);</span><br></pre></td></tr></table></figure><p>암튼 changeHash는 nodejs의 내장된 패키지인 crypto를 이용해 단방향 암호화 (=복호화가 안되는 암호화)로 변환을 하는 코드이다.</p><p>이걸 어떠케 사용하는거냐면</p><ol><li>가입할 때 사용자가 비밀번호를 1q2w3e 뭐 이렇게 입력햇다고 치자.</li><li>서버에서 사용자가 보내준 비밀번호를 변환 -&gt; 예로 7eb32f7589 뭐 이런 식으로 변환 된다.</li><li>가입을 할 때 저 변환된 값을 DB에 저장을 한다.</li><li>이제 사용자가 로그인 할 때 1q2w3e를 입력을 하면 서버에선 또 변환하여 DB에 저장된 변환된 비밀번호와 동일한지 체크를 하는 거다.</li></ol><p>마지막으로 가입하는 짤 투척</p><p><img src="https://res.cloudinary.com/dwmywmqv6/image/upload/v1565624972/signin_kly4vo.gif" alt="예시"></p><p>가입은 이정도로 적어두고 다음 글에서 로그인, 소셜 로그인을 이어서 작성을 해야 겟다.</p><p>코드를 일부분만 적어 둿으므로 만약 만약에 누가 보게 될 경우엔 <a href="https://github.com/hidelryn/auth-example">소스 코드</a>를 참조 바랍니다.</p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> Express </tag>
            
            <tag> Auth </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
